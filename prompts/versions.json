{
  "schema_version": "1.0",
  "versions": {
    "v0.3.0-baseline": {
      "file": "prompts/v0.3.0.md",
      "hash": "e36ab2dfbdb985095a74302386c3681b426698d59a04513deb894eaf7f689663",
      "description": "Baseline teaching prompt for v0.3.0 with records, recursion, blocks, Clock/Net effects",
      "created": "2025-10-05",
      "tags": ["baseline", "production"],
      "notes": "Original teaching prompt from v0.3.0 release. Comprehensive coverage of language features with clear syntax rules and examples."
    },
    "v0.3.0-hints": {
      "file": "prompts/v0.3.0-hints.md",
      "hash": "28653b83b6399896728d807f9bf3305b999b7a3108a4e570a288e9c3a88846be",
      "description": "Enhanced v0.3.0 prompt with explicit error pattern warnings and prevention guidance",
      "created": "2025-10-08",
      "tags": ["experimental", "error-hints"],
      "notes": "Adds 6 common error pattern sections (PAR_001, TC_REC_001, TC_INT_001, EQ_001, CAP_001, MOD_001) with wrong/correct examples. Hypothesis: Explicit error warnings reduce first-attempt failures and improve repair success rate."
    },
    "v0.3.2": {
      "file": "prompts/v0.3.2.md",
      "hash": "c29549fb36585bf775d4425cc615f78436866960d25347086f4c6a1f656b93a7",
      "description": "v0.3.2 prompt with Planning & Scaffolding Protocol - proactive architecture validation",
      "created": "2025-10-10",
      "tags": ["production", "planning"],
      "notes": "Adds proactive architecture planning with :propose and :scaffold commands. Includes plan schema, validation rules, and best practices. Teaches AI agents to validate architecture BEFORE coding. Derived from v0.3.0-hints with 24 validation error codes added."
    },
    "v0.3.5": {
      "file": "prompts/v0.3.5.md",
      "hash": "15edab8d4b814bbd04cebaa70b8abeac94757c26a8499aa9a2236731080e0f2f",
      "description": "v0.3.5 prompt with anonymous functions (func literals), letrec, and numeric conversions",
      "created": "2025-10-14",
      "tags": ["production"],
      "notes": "Adds support for: 1) Anonymous function syntax func(x) -> T { body }, 2) letrec keyword for recursive lambdas, 3) intToFloat/floatToInt builtins. Derived from v0.3.0 baseline."
    },
    "v0.3.8": {
      "file": "prompts/v0.3.8.md",
      "hash": "91fed29dd5b991549cddd7a492b1afe790eb0a74c8da9bf29dcb46c2546a9665",
      "description": "v0.3.8 prompt with auto-import std/prelude, record updates, and multi-line ADTs",
      "created": "2025-10-15",
      "tags": ["production", "latest"],
      "notes": "Major improvements: 1) std/prelude auto-imported (no more Ord/Eq imports needed), 2) Record update syntax {r | field: val}, 3) Multi-line ADTs with optional leading pipe, 4) Operator lowering fixes. 49.1% success rate (+10.5% from v0.3.7). All v0.3.5 features included."
    },
    "v0.3.6": {
      "file": "prompts/v0.3.6.md",
      "hash": "064185768dae63412f235f1c27c17da0ab8cd4725e2c42bb70195c895a2ef53e",
      "description": "v0.3.6 prompt with anti-patterns, mandatory structure, and import checklist",
      "created": "2025-10-14",
      "tags": ["experimental", "failed"],
      "notes": "FAILED: Two iterations showed 10% worse performance than v0.3.5. Longer prompts with anti-patterns and import checklists caused information overload. Conclusion: Prompt engineering is counter-productive; language changes (auto-import, record update syntax) are the solution."
    },
    "v0.2.0": {
      "file": "prompts/v0.2.0.md",
      "hash": "PLACEHOLDER",
      "description": "Teaching prompt for v0.2.0 with module runtime and effect system",
      "created": "2025-09-28",
      "tags": ["historical"],
      "notes": "Pre-records, pre-recursion, pre-blocks. Kept for historical comparison."
    },
    "python": {
      "file": "prompts/python.md",
      "hash": "PLACEHOLDER",
      "description": "Python language teaching prompt (control/reference)",
      "created": "2025-10-05",
      "tags": ["control", "python"],
      "notes": "Used for baseline comparison - how well do models do with Python vs AILANG?"
    }
  },
  "active": "v0.3.8",
  "notes": [
    "Hash is SHA256 of the prompt file contents",
    "Use 'active' field to specify default prompt version",
    "Tags help categorize prompts: baseline, experimental, production, historical, control",
    "Add new versions here when creating prompt variants for A/B testing"
  ]
}
