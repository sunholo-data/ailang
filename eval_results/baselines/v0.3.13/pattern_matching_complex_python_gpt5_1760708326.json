{
  "id": "pattern_matching_complex",
  "lang": "python",
  "model": "gpt5",
  "seed": 42,
  "input_tokens": 277,
  "output_tokens": 313,
  "total_tokens": 590,
  "cost_usd": 0.00347625,
  "compile_ok": true,
  "runtime_ok": true,
  "stdout_ok": true,
  "duration_ms": 64,
  "compile_ms": 0,
  "execute_ms": 0,
  "error_category": "none",
  "stdout": "Sum: 18\nMax: 7\n",
  "expected_stdout": "Sum: 18\nMax: 7\n",
  "timestamp": "2025-10-17T15:38:46.155073+02:00",
  "code": "from __future__ import annotations\nfrom dataclasses import dataclass\nfrom typing import TypeAlias\n\n@dataclass(frozen=True)\nclass Leaf:\n    value: int\n    __match_args__ = (\"value\",)\n\n@dataclass(frozen=True)\nclass Node:\n    left: \"Tree\"\n    value: int\n    right: \"Tree\"\n    __match_args__ = (\"left\", \"value\", \"right\")\n\nTree: TypeAlias = Leaf | Node\n\ndef tree_sum(tree: Tree) -\u003e int:\n    match tree:\n        case Leaf(v):\n            return v\n        case Node(l, v, r):\n            return tree_sum(l) + v + tree_sum(r)\n\ndef find_max(tree: Tree) -\u003e int:\n    match tree:\n        case Leaf(v):\n            return v\n        case Node(Leaf(lv), v, Leaf(rv)):\n            return max(lv, v, rv)\n        case Node(Leaf(lv), v, r) if lv \u003e= v:\n            return max(lv, find_max(r))\n        case Node(l, v, Leaf(rv)) if rv \u003e= v:\n            return max(find_max(l), rv)\n        case Node(l, v, r):\n            return max(find_max(l), v, find_max(r))\n\ntree = Node(Leaf(1), 5, Node(Leaf(3), 7, Leaf(2)))\n\nprint(f\"Sum: {tree_sum(tree)}\")\nprint(f\"Max: {find_max(tree)}\")",
  "first_attempt_ok": true,
  "repair_used": false,
  "repair_ok": false
}