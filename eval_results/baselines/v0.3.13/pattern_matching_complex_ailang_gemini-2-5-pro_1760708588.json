{
  "id": "pattern_matching_complex",
  "lang": "ailang",
  "model": "gemini-2-5-pro",
  "seed": 42,
  "input_tokens": 13037,
  "output_tokens": 628,
  "total_tokens": 13665,
  "cost_usd": 0.0109425,
  "compile_ok": true,
  "runtime_ok": true,
  "stdout_ok": true,
  "duration_ms": 17,
  "compile_ms": 0,
  "execute_ms": 0,
  "error_category": "compile_error",
  "stderr": "Error: module loading error: failed to load benchmark/solution.ail (search trace: [Loading module: benchmark/solution.ail]): parse errors in benchmark/solution.ail: [PAR_UNEXPECTED_TOKEN at benchmark/solution.ail:37:1: expected next token to be }, got EOF instead]\n",
  "expected_stdout": "Sum: 18\nMax: 7\n",
  "timestamp": "2025-10-17T15:43:08.913777+02:00",
  "code": "module benchmark/solution\n\nimport std/io (println)\n\ntype Tree = Leaf(int) | Node(Tree, int, Tree)\n\nexport func tree_sum(t: Tree) -\u003e int {\n  match t {\n    Leaf(v) =\u003e v,\n    Node(l, v, r) =\u003e tree_sum(l) + v + tree_sum(r)\n  }\n}\n\nfunc max_int(a: int, b: int) -\u003e int {\n  if a \u003e b then a else b\n}\n\nexport func find_max(t: Tree) -\u003e int {\n  match t {\n    Leaf(v) =\u003e v,\n    Node(l, v, r) =\u003e {\n      let max_left = find_max(l);\n      let max_right = find_max(r);\n      max_int(v, max_int(max_left, max_right))\n    }\n  }\n}\n\nexport func main() -\u003e () ! {IO} {\n  let sample_tree = Node(Leaf(1), 5, Node(Leaf(3), 7, Leaf(2)));\n  let sum = tree_sum(sample_tree);\n  let max_val = find_max(sample_tree);\n  println(\"Sum: \" ++ show(sum));\n  println(\"Max: \" ++ show(max_val))\n}",
  "first_attempt_ok": false,
  "repair_used": true,
  "repair_ok": true,
  "err_code": "PAR_001",
  "repair_tokens_in": 6795,
  "repair_tokens_out": 314
}