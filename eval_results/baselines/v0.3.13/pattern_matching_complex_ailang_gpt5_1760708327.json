{
  "id": "pattern_matching_complex",
  "lang": "ailang",
  "model": "gpt5",
  "seed": 42,
  "input_tokens": 5770,
  "output_tokens": 377,
  "total_tokens": 6147,
  "cost_usd": 0.0109825,
  "compile_ok": true,
  "runtime_ok": true,
  "stdout_ok": true,
  "duration_ms": 20,
  "compile_ms": 0,
  "execute_ms": 0,
  "error_category": "none",
  "stdout": "Sum: 18\nMax: 7\n",
  "expected_stdout": "Sum: 18\nMax: 7\n",
  "timestamp": "2025-10-17T15:38:47.822216+02:00",
  "code": "module benchmark/solution\n\nimport std/io (println)\n\ntype Tree =\n  | Leaf(int)\n  | Node(Tree, int, Tree)\n\nexport func tree_sum(t: Tree) -\u003e int {\n  match t {\n    Leaf(v) =\u003e v,\n    Node(l, v, r) =\u003e tree_sum(l) + v + tree_sum(r)\n  }\n}\n\nexport func max3(a: int, b: int, c: int) -\u003e int {\n  match (a, b, c) {\n    (x, y, z) if y \u003e= x \u0026\u0026 y \u003e= z =\u003e y,\n    (x, y, z) if x \u003e= y \u0026\u0026 x \u003e= z =\u003e x,\n    (_, _, z) =\u003e z\n  }\n}\n\nexport func find_max(t: Tree) -\u003e int {\n  match t {\n    Leaf(v) =\u003e v,\n    Node(Leaf(lv), v, Leaf(rv)) =\u003e {\n      match (lv, v, rv) {\n        (a, b, c) if b \u003e= a \u0026\u0026 b \u003e= c =\u003e b,\n        (a, b, c) if a \u003e= b \u0026\u0026 a \u003e= c =\u003e a,\n        (_, _, c) =\u003e c\n      }\n    },\n    Node(l, v, r) =\u003e {\n      let ml = find_max(l);\n      let mr = find_max(r);\n      max3(ml, v, mr)\n    }\n  }\n}\n\nexport func main() -\u003e () ! {IO} {\n  let tree =\n    Node(\n      Leaf(1),\n      5,\n      Node(Leaf(3), 7, Leaf(2))\n    );\n  let s = tree_sum(tree);\n  let m = find_max(tree);\n  println(\"Sum: \" ++ show(s));\n  println(\"Max: \" ++ show(m))\n}",
  "first_attempt_ok": true,
  "repair_used": false,
  "repair_ok": false
}