{
  "id": "pattern_matching_complex",
  "lang": "python",
  "model": "gpt5-mini",
  "seed": 42,
  "input_tokens": 277,
  "output_tokens": 433,
  "total_tokens": 710,
  "cost_usd": 0.00093525,
  "compile_ok": true,
  "runtime_ok": true,
  "stdout_ok": true,
  "duration_ms": 67,
  "compile_ms": 0,
  "execute_ms": 0,
  "error_category": "none",
  "stdout": "Sum: 18\nMax: 7\n",
  "expected_stdout": "Sum: 18\nMax: 7\n",
  "timestamp": "2025-10-17T15:39:57.30855+02:00",
  "code": "from __future__ import annotations\nfrom dataclasses import dataclass\nfrom typing import Union\n\nTree = Union[\"Leaf\", \"Node\"]\n\n@dataclass(frozen=True)\nclass Leaf:\n    value: int\n\n@dataclass(frozen=True)\nclass Node:\n    left: Tree\n    value: int\n    right: Tree\n\ndef tree_sum(tree: Tree) -\u003e int:\n    match tree:\n        case Leaf(v):\n            return v\n        case Node(l, v, r):\n            return tree_sum(l) + v + tree_sum(r)\n        case _:\n            raise TypeError(\"Unknown tree node\")\n\ndef find_max(tree: Tree) -\u003e int:\n    match tree:\n        case Leaf(v):\n            return v\n        case Node(Leaf(lv), v, Leaf(rv)):\n            return lv if lv \u003e= v and lv \u003e= rv else (rv if rv \u003e= v else v)\n        case Node(Leaf(lv), v, r):\n            rm = find_max(r)\n            if lv \u003e= v and lv \u003e= rm:\n                return lv\n            if rm \u003e= lv and rm \u003e= v:\n                return rm\n            return v\n        case Node(l, v, Leaf(rv)):\n            lm = find_max(l)\n            if lm \u003e= v and lm \u003e= rv:\n                return lm\n            if rv \u003e= lm and rv \u003e= v:\n                return rv\n            return v\n        case Node(l, v, r):\n            lm = find_max(l)\n            rm = find_max(r)\n            match (lm, v, rm):\n                case (a, b, c) if a \u003e= b and a \u003e= c:\n                    return a\n                case (a, b, c) if c \u003e= a and c \u003e= b:\n                    return c\n                case _:\n                    return v\n        case _:\n            raise TypeError(\"Unknown tree node\")\n\ntree = Node(Leaf(1), 5, Node(Leaf(3), 7, Leaf(2)))\n\nprint(f\"Sum: {tree_sum(tree)}\")\nprint(f\"Max: {find_max(tree)}\")",
  "first_attempt_ok": true,
  "repair_used": false,
  "repair_ok": false
}