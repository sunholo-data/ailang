{
  "id": "error_handling",
  "lang": "python",
  "model": "claude-sonnet-4-5",
  "seed": 42,
  "input_tokens": 312,
  "output_tokens": 354,
  "total_tokens": 666,
  "cost_usd": 0.006246,
  "compile_ok": true,
  "runtime_ok": true,
  "stdout_ok": true,
  "duration_ms": 67,
  "compile_ms": 0,
  "execute_ms": 0,
  "error_category": "none",
  "stdout": "Result: 5\nError: Division by zero\nError: Invalid integer\n",
  "expected_stdout": "Result: 5\nError: Division by zero\nError: Invalid integer\n",
  "timestamp": "2025-10-17T15:41:36.013391+02:00",
  "code": "from dataclasses import dataclass\nfrom typing import Generic, TypeVar, Callable\n\nT = TypeVar('T')\nU = TypeVar('U')\n\n\n@dataclass\nclass Ok(Generic[T]):\n    value: T\n\n\n@dataclass\nclass Err:\n    message: str\n\n\nResult = Ok[T] | Err\n\n\ndef parse_int(s: str) -\u003e Result[int]:\n    try:\n        return Ok(int(s))\n    except ValueError:\n        return Err(\"Invalid integer\")\n\n\ndef divide_safe(a: int, b: int) -\u003e Result[int]:\n    if b == 0:\n        return Err(\"Division by zero\")\n    return Ok(a // b)\n\n\ndef bind(result: Result[T], func: Callable[[T], Result[U]]) -\u003e Result[U]:\n    if isinstance(result, Ok):\n        return func(result.value)\n    return result\n\n\ndef print_result(result: Result):\n    if isinstance(result, Ok):\n        print(f\"Result: {result.value}\")\n    else:\n        print(f\"Error: {result.message}\")\n\n\nresult1 = bind(parse_int(\"10\"), lambda x: divide_safe(x, 2))\nprint_result(result1)\n\nresult2 = bind(parse_int(\"10\"), lambda x: divide_safe(x, 0))\nprint_result(result2)\n\nresult3 = parse_int(\"abc\")\nprint_result(result3)",
  "first_attempt_ok": true,
  "repair_used": false,
  "repair_ok": false
}