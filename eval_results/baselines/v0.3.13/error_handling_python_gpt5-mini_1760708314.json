{
  "id": "error_handling",
  "lang": "python",
  "model": "gpt5-mini",
  "seed": 42,
  "input_tokens": 270,
  "output_tokens": 489,
  "total_tokens": 759,
  "cost_usd": 0.0010455,
  "compile_ok": true,
  "runtime_ok": true,
  "stdout_ok": true,
  "duration_ms": 56,
  "compile_ms": 0,
  "execute_ms": 0,
  "error_category": "none",
  "stdout": "Result: 5\nError: Division by zero\nError: Invalid integer\n",
  "expected_stdout": "Result: 5\nError: Division by zero\nError: Invalid integer\n",
  "timestamp": "2025-10-17T15:38:34.87105+02:00",
  "code": "from typing import Generic, TypeVar, Callable, Union\n\nT = TypeVar(\"T\")\nU = TypeVar(\"U\")\n\nclass Result(Generic[T]):\n    def is_ok(self) -\u003e bool:\n        return isinstance(self, Ok)\n\n    def is_err(self) -\u003e bool:\n        return isinstance(self, Err)\n\n    def and_then(self, fn: Callable[[T], \"Result[U]\"]) -\u003e \"Result[U]\":\n        if self.is_ok():\n            return fn(self.value)  # type: ignore[attr-defined]\n        return self  # type: ignore[return-value]\n\n    def map(self, fn: Callable[[T], U]) -\u003e \"Result[U]\":\n        if self.is_ok():\n            return Ok(fn(self.value))  # type: ignore[attr-defined]\n        return self  # type: ignore[return-value]\n\nclass Ok(Result[T]):\n    def __init__(self, value: T):\n        self.value = value\n\n    def __repr__(self):\n        return f\"Ok({self.value!r})\"\n\nclass Err(Result[None]):\n    def __init__(self, message: str):\n        self.message = message\n\n    def __repr__(self):\n        return f\"Err({self.message!r})\"\n\ndef parse_int(s: str) -\u003e Result[int]:\n    try:\n        n = int(s)\n        return Ok(n)\n    except ValueError:\n        return Err(\"Invalid integer\")\n\ndef divide_safe(a: int, b: int) -\u003e Result[int]:\n    if b == 0:\n        return Err(\"Division by zero\")\n    return Ok(a // b)\n\ndef print_result(r: Result[int]) -\u003e None:\n    if r.is_ok():\n        print(f\"Result: {r.value}\")  # type: ignore[attr-defined]\n    else:\n        print(f\"Error: {r.message}\")  # type: ignore[attr-defined]\n\n# Test cases\nr1 = parse_int(\"10\").and_then(lambda n: divide_safe(n, 2))\nprint_result(r1)  # Expected: Result: 5\n\nr2 = parse_int(\"10\").and_then(lambda n: divide_safe(n, 0))\nprint_result(r2)  # Expected: Error: Division by zero\n\nr3 = parse_int(\"abc\")\nprint_result(r3)  # Expected: Error: Invalid integer",
  "first_attempt_ok": true,
  "repair_used": false,
  "repair_ok": false
}