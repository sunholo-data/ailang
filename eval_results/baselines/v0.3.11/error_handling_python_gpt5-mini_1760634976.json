{
  "id": "error_handling",
  "lang": "python",
  "model": "gpt5-mini",
  "seed": 42,
  "input_tokens": 270,
  "output_tokens": 426,
  "total_tokens": 696,
  "cost_usd": 0.0009195,
  "compile_ok": true,
  "runtime_ok": true,
  "stdout_ok": true,
  "duration_ms": 63,
  "compile_ms": 0,
  "execute_ms": 0,
  "error_category": "none",
  "stdout": "Result: 5\nError: Division by zero\nError: Invalid integer\n",
  "expected_stdout": "Result: 5\nError: Division by zero\nError: Invalid integer\n",
  "timestamp": "2025-10-16T19:16:16.646816+02:00",
  "code": "from dataclasses import dataclass\nfrom typing import Generic, TypeVar, Callable, Union\n\nT = TypeVar(\"T\")\nU = TypeVar(\"U\")\n\nclass Result(Generic[T]):\n    def is_ok(self) -\u003e bool:\n        return isinstance(self, Ok)\n\n    def is_err(self) -\u003e bool:\n        return isinstance(self, Err)\n\n    def and_then(self, func: Callable[[T], \"Result[U]\"]) -\u003e \"Result[U]\":\n        if self.is_ok():\n            return func(self.value)  # type: ignore[attr-defined]\n        return self  # type: ignore[return-value]\n\n@dataclass(frozen=True)\nclass Ok(Result[T]):\n    value: T\n\n@dataclass(frozen=True)\nclass Err(Result[T]):\n    message: str\n\ndef parse_int(s: str) -\u003e Result[int]:\n    try:\n        n = int(s)\n        return Ok(n)\n    except ValueError:\n        return Err(\"Invalid integer\")\n\ndef divide_safe(a: int, b: int) -\u003e Result[int]:\n    if b == 0:\n        return Err(\"Division by zero\")\n    return Ok(a // b)\n\ndef print_result(res: Result[int]) -\u003e None:\n    if res.is_ok():\n        print(f\"Result: {res.value}\")  # type: ignore[attr-defined]\n    else:\n        print(f\"Error: {res.message}\")  # type: ignore[attr-defined]\n\n# Test case 1: parse_int(\"10\") then divide by 2 -\u003e \"Result: 5\"\nres1 = parse_int(\"10\").and_then(lambda n: divide_safe(n, 2))\nprint_result(res1)\n\n# Test case 2: parse_int(\"10\") then divide by 0 -\u003e \"Error: Division by zero\"\nres2 = parse_int(\"10\").and_then(lambda n: divide_safe(n, 0))\nprint_result(res2)\n\n# Test case 3: parse_int(\"abc\") -\u003e \"Error: Invalid integer\"\nres3 = parse_int(\"abc\")\nprint_result(res3)",
  "first_attempt_ok": true,
  "repair_used": false,
  "repair_ok": false
}