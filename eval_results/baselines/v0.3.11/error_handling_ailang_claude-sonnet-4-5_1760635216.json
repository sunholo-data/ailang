{
  "id": "error_handling",
  "lang": "ailang",
  "model": "claude-sonnet-4-5",
  "seed": 42,
  "input_tokens": 6272,
  "output_tokens": 441,
  "total_tokens": 6713,
  "cost_usd": 0.025431,
  "compile_ok": false,
  "runtime_ok": false,
  "stdout_ok": false,
  "duration_ms": 5,
  "compile_ms": 0,
  "execute_ms": 0,
  "error_category": "compile_error",
  "stderr": "Error: module loading error: failed to load benchmark/solution.ail (search trace: [Loading module: benchmark/solution.ail]): parse errors in benchmark/solution.ail: [PAR_UNEXPECTED_TOKEN at benchmark/solution.ail:20:49: expected next token to be ), got ( instead PAR_UNEXPECTED_TOKEN at benchmark/solution.ail:20:49: expected next token to be {, got ( instead PAR_NO_PREFIX_PARSE at benchmark/solution.ail:20:55: unexpected token in expression: -\u003e PAR_NO_PREFIX_PARSE at benchmark/solution.ail:20:69: unexpected token in expression: ) PAR_NO_PREFIX_PARSE at benchmark/solution.ail:20:71: unexpected token in expression: -\u003e]\n",
  "expected_stdout": "Result: 5\nError: Division by zero\nError: Invalid integer\n",
  "timestamp": "2025-10-16T19:20:16.769309+02:00",
  "code": "module benchmark/solution\n\nimport std/io (println)\n\ntype Result[a] = Ok(a) | Err(string)\n\nexport func parse_int(s: string) -\u003e Result[int] {\n  if s == \"10\" then Ok(10)\n  else if s == \"0\" then Ok(0)\n  else if s == \"2\" then Ok(2)\n  else Err(\"Invalid integer\")\n}\n\nexport func divide_safe(a: int, b: int) -\u003e Result[int] {\n  if b == 0\n  then Err(\"Division by zero\")\n  else Ok(a / b)\n}\n\nexport func chain_result(r: Result[int], f: func(int) -\u003e Result[int]) -\u003e Result[int] {\n  match r {\n    Ok(v) =\u003e f(v),\n    Err(msg) =\u003e Err(msg)\n  }\n}\n\nexport func print_result(r: Result[int]) -\u003e () ! {IO} {\n  match r {\n    Ok(v) =\u003e println(\"Result: \" ++ show(v)),\n    Err(msg) =\u003e println(\"Error: \" ++ msg)\n  }\n}\n\nexport func main() -\u003e () ! {IO} {\n  let r1 = parse_int(\"10\");\n  let r2 = chain_result(r1, func(n: int) -\u003e Result[int] { divide_safe(n, 2) });\n  print_result(r2);\n  \n  let r3 = parse_int(\"10\");\n  let r4 = chain_result(r3, func(n: int) -\u003e Result[int] { divide_safe(n, 0) });\n  print_result(r4);\n  \n  let r5 = parse_int(\"abc\");\n  print_result(r5)\n}",
  "first_attempt_ok": false,
  "repair_used": false,
  "repair_ok": false
}