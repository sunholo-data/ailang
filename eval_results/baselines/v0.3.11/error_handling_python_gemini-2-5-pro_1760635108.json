{
  "id": "error_handling",
  "lang": "python",
  "model": "gemini-2-5-pro",
  "seed": 42,
  "input_tokens": 294,
  "output_tokens": 620,
  "total_tokens": 914,
  "cost_usd": 0.0065675,
  "compile_ok": true,
  "runtime_ok": true,
  "stdout_ok": true,
  "duration_ms": 73,
  "compile_ms": 0,
  "execute_ms": 0,
  "error_category": "none",
  "stdout": "Result: 5\nError: Division by zero\nError: Invalid integer\n",
  "expected_stdout": "Result: 5\nError: Division by zero\nError: Invalid integer\n",
  "timestamp": "2025-10-16T19:18:28.441741+02:00",
  "code": "import sys\nfrom typing import TypeVar, Generic, Union\nfrom dataclasses import dataclass\n\nif sys.version_info \u003c (3, 8):\n    from typing_extensions import final\nelse:\n    from typing import final\n\nT = TypeVar('T')\nE = TypeVar('E')\n\n@final\n@dataclass(frozen=True)\nclass Ok(Generic[T]):\n    value: T\n\n@final\n@dataclass(frozen=True)\nclass Err(Generic[E]):\n    message: E\n\nResult = Union[Ok[T], Err[E]]\n\ndef parse_int(s: str) -\u003e Result[int, str]:\n    \"\"\"Parses a string into an integer, returning a Result.\"\"\"\n    try:\n        return Ok(int(s))\n    except ValueError:\n        return Err(\"Invalid integer\")\n\ndef divide_safe(a: int, b: int) -\u003e Result[int, str]:\n    \"\"\"Divides two integers, returning a Result to handle division by zero.\"\"\"\n    if b == 0:\n        return Err(\"Division by zero\")\n    return Ok(a // b)\n\ndef main():\n    \"\"\"Main function to run test cases.\"\"\"\n    # Test case 1: Successful parsing and division\n    result_1 = parse_int(\"10\")\n    if isinstance(result_1, Ok):\n        final_result_1 = divide_safe(result_1.value, 2)\n    else:\n        final_result_1 = result_1\n\n    if isinstance(final_result_1, Ok):\n        print(f\"Result: {final_result_1.value}\")\n    else:\n        print(f\"Error: {final_result_1.message}\")\n\n    # Test case 2: Successful parsing, but division by zero\n    result_2 = parse_int(\"10\")\n    if isinstance(result_2, Ok):\n        final_result_2 = divide_safe(result_2.value, 0)\n    else:\n        final_result_2 = result_2\n\n    if isinstance(final_result_2, Ok):\n        print(f\"Result: {final_result_2.value}\")\n    else:\n        print(f\"Error: {final_result_2.message}\")\n\n    # Test case 3: Failed parsing\n    final_result_3 = parse_int(\"abc\")\n    if isinstance(final_result_3, Ok):\n        # This branch is not expected to be hit in this test case\n        print(f\"Result: {final_result_3.value}\")\n    else:\n        print(f\"Error: {final_result_3.message}\")\n\nif __name__ == \"__main__\":\n    main()",
  "first_attempt_ok": true,
  "repair_used": false,
  "repair_ok": false
}