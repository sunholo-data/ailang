{
  "id": "error_handling",
  "lang": "python",
  "model": "gemini-2-5-flash",
  "seed": 42,
  "input_tokens": 294,
  "output_tokens": 618,
  "total_tokens": 912,
  "cost_usd": 0.0016332,
  "compile_ok": true,
  "runtime_ok": true,
  "stdout_ok": true,
  "duration_ms": 55,
  "compile_ms": 0,
  "execute_ms": 0,
  "error_category": "none",
  "stdout": "Result: 5\nError: Division by zero\nError: Invalid integer\n",
  "expected_stdout": "Result: 5\nError: Division by zero\nError: Invalid integer\n",
  "timestamp": "2025-10-16T19:18:14.142782+02:00",
  "code": "from typing import Union, TypeVar, Generic\n\nT = TypeVar('T')\nE = TypeVar('E')\n\nclass Ok(Generic[T]):\n    def __init__(self, value: T):\n        self.value = value\n\n    def __repr__(self) -\u003e str:\n        return f\"Ok({self.value!r})\"\n\n    def is_ok(self) -\u003e bool:\n        return True\n\n    def is_err(self) -\u003e bool:\n        return False\n\nclass Err(Generic[E]):\n    def __init__(self, message: E):\n        self.message = message\n\n    def __repr__(self) -\u003e str:\n        return f\"Err({self.message!r})\"\n\n    def is_ok(self) -\u003e bool:\n        return False\n\n    def is_err(self) -\u003e bool:\n        return True\n\nResult = Union[Ok[T], Err[str]]\n\ndef parse_int(s: str) -\u003e Result[int]:\n    try:\n        n = int(s)\n        return Ok(n)\n    except ValueError:\n        return Err(\"Invalid integer\")\n\ndef divide_safe(a: int, b: int) -\u003e Result[int]:\n    if b == 0:\n        return Err(\"Division by zero\")\n    return Ok(a // b)\n\ndef print_final_result(res: Result[int]):\n    if res.is_ok():\n        print(f\"Result: {res.value}\")\n    else:\n        print(f\"Error: {res.message}\")\n\n# Test cases\n\n# Test case 1: parse_int(\"10\") then divide by 2 -\u003e \"Result: 5\"\nparsed_val = parse_int(\"10\")\nif parsed_val.is_ok():\n    final_op_result = divide_safe(parsed_val.value, 2)\nelse:\n    final_op_result = parsed_val\nprint_final_result(final_op_result)\n\n# Test case 2: parse_int(\"10\") then divide by 0 -\u003e \"Error: Division by zero\"\nparsed_val = parse_int(\"10\")\nif parsed_val.is_ok():\n    final_op_result = divide_safe(parsed_val.value, 0)\nelse:\n    final_op_result = parsed_val\nprint_final_result(final_op_result)\n\n# Test case 3: parse_int(\"abc\") -\u003e \"Error: Invalid integer\"\nparsed_val = parse_int(\"abc\")\n# If parsing fails, no division happens, the error propagates directly.\nfinal_op_result = parsed_val\nprint_final_result(final_op_result)",
  "first_attempt_ok": true,
  "repair_used": false,
  "repair_ok": false
}