{
  "id": "pattern_matching_complex",
  "lang": "ailang",
  "model": "gpt5",
  "seed": 42,
  "input_tokens": 5323,
  "output_tokens": 366,
  "total_tokens": 5689,
  "cost_usd": 0.01031375,
  "compile_ok": false,
  "runtime_ok": false,
  "stdout_ok": false,
  "duration_ms": 20,
  "compile_ms": 0,
  "execute_ms": 0,
  "error_category": "compile_error",
  "stdout": "  After instantiation: String -\u003e () ! {IO}\n  Instantiated EffectRow: {IO}\n",
  "stderr": "Error: type error in benchmark/solution (decl 4): undefined variable: show at benchmark/solution.ail:41:22\n",
  "expected_stdout": "Sum: 18\nMax: 7\n",
  "timestamp": "2025-10-16T19:23:41.746714+02:00",
  "code": "module benchmark/solution\n\nimport std/io (println)\n\ntype Tree = Leaf(int) | Node(Tree, int, Tree)\n\nexport func tree_sum(t: Tree) -\u003e int {\n  match t {\n    Leaf(v) =\u003e v,\n    Node(l, v, r) =\u003e tree_sum(l) + v + tree_sum(r)\n  }\n}\n\nfunc max2(a: int, b: int) -\u003e int {\n  if a \u003e= b then a else b\n}\n\nfunc max3(a: int, b: int, c: int) -\u003e int {\n  max2(max2(a, b), c)\n}\n\nexport func find_max(t: Tree) -\u003e int {\n  match t {\n    Leaf(v) =\u003e v,\n    Node(Leaf(lv), v, Leaf(rv)) =\u003e max3(lv, v, rv),\n    Node(l, v, r) if v \u003e= find_max(l) \u0026\u0026 v \u003e= find_max(r) =\u003e v,\n    Node(Leaf(lv), v, r) if lv \u003e= v \u0026\u0026 lv \u003e= find_max(r) =\u003e lv,\n    Node(l, v, Leaf(rv)) if rv \u003e= v \u0026\u0026 rv \u003e= find_max(l) =\u003e rv,\n    Node(l, v, r) =\u003e {\n      let ml = find_max(l);\n      let mr = find_max(r);\n      max3(ml, v, mr)\n    }\n  }\n}\n\nexport func main() -\u003e () ! {IO} {\n  let sample = Node(Leaf(1), 5, Node(Leaf(3), 7, Leaf(2)));\n  let s = tree_sum(sample);\n  let m = find_max(sample);\n  println(\"Sum: \" ++ show(s));\n  println(\"Max: \" ++ show(m))\n}",
  "first_attempt_ok": false,
  "repair_used": false,
  "repair_ok": false
}