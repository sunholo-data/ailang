{
  "id": "pattern_matching_complex",
  "lang": "python",
  "model": "gpt5",
  "seed": 42,
  "input_tokens": 277,
  "output_tokens": 268,
  "total_tokens": 545,
  "cost_usd": 0.0030262500000000003,
  "compile_ok": true,
  "runtime_ok": true,
  "stdout_ok": true,
  "duration_ms": 71,
  "compile_ms": 0,
  "execute_ms": 0,
  "error_category": "none",
  "stdout": "Sum: 18\nMax: 7\n",
  "expected_stdout": "Sum: 18\nMax: 7\n",
  "timestamp": "2025-10-16T19:23:44.668246+02:00",
  "code": "from __future__ import annotations\nfrom dataclasses import dataclass\nfrom typing import Union\n\n@dataclass(frozen=True)\nclass Leaf:\n    value: int\n\n@dataclass(frozen=True)\nclass Node:\n    left: 'Tree'\n    value: int\n    right: 'Tree'\n\nTree = Union[Leaf, Node]\n\ndef tree_sum(tree: Tree) -\u003e int:\n    match tree:\n        case Leaf(v):\n            return v\n        case Node(l, v, r):\n            return tree_sum(l) + v + tree_sum(r)\n\ndef find_max(tree: Tree) -\u003e int:\n    match tree:\n        case Leaf(v):\n            return v\n        case Node(l, v, r):\n            lm = find_max(l)\n            rm = find_max(r)\n            match (lm, rm):\n                case (lm, rm) if lm \u003e= v and lm \u003e= rm:\n                    return lm\n                case (lm, rm) if rm \u003e= v and rm \u003e= lm:\n                    return rm\n                case _:\n                    return v\n\nt = Node(Leaf(1), 5, Node(Leaf(3), 7, Leaf(2)))\n\nprint(f\"Sum: {tree_sum(t)}\")\nprint(f\"Max: {find_max(t)}\")",
  "first_attempt_ok": true,
  "repair_used": false,
  "repair_ok": false
}