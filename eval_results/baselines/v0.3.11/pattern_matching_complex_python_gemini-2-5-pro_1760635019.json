{
  "id": "pattern_matching_complex",
  "lang": "python",
  "model": "gemini-2-5-pro",
  "seed": 42,
  "input_tokens": 293,
  "output_tokens": 336,
  "total_tokens": 629,
  "cost_usd": 0.0037262500000000004,
  "compile_ok": true,
  "runtime_ok": true,
  "stdout_ok": true,
  "duration_ms": 35,
  "compile_ms": 0,
  "execute_ms": 0,
  "error_category": "none",
  "stdout": "Sum: 18\nMax: 7\n",
  "expected_stdout": "Sum: 18\nMax: 7\n",
  "timestamp": "2025-10-16T19:16:59.633046+02:00",
  "code": "from __future__ import annotations\nfrom dataclasses import dataclass\nfrom typing import Union\n\n@dataclass\nclass Leaf:\n    value: int\n\n@dataclass\nclass Node:\n    left: Tree\n    value: int\n    right: Tree\n\nTree = Leaf | Node\n\ndef tree_sum(tree: Tree) -\u003e int:\n    match tree:\n        case Leaf(value):\n            return value\n        case Node(left, value, right):\n            return tree_sum(left) + value + tree_sum(right)\n\ndef find_max(tree: Tree) -\u003e int:\n    match tree:\n        case Leaf(value):\n            return value\n        case Node(left, value, right) if isinstance(right, Leaf) and value \u003e right.value:\n            return max(value, find_max(left))\n        case Node(left, _, right) if isinstance(right, Leaf):\n            return max(right.value, find_max(left))\n        case Node(left, value, right):\n            return max(value, find_max(left), find_max(right))\n\nif __name__ == \"__main__\":\n    sample_tree = Node(Leaf(1), 5, Node(Leaf(3), 7, Leaf(2)))\n\n    total_sum = tree_sum(sample_tree)\n    max_val = find_max(sample_tree)\n\n    print(f\"Sum: {total_sum}\")\n    print(f\"Max: {max_val}\")",
  "first_attempt_ok": true,
  "repair_used": false,
  "repair_ok": false
}