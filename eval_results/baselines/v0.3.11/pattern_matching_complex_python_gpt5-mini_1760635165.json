{
  "id": "pattern_matching_complex",
  "lang": "python",
  "model": "gpt5-mini",
  "seed": 42,
  "input_tokens": 277,
  "output_tokens": 380,
  "total_tokens": 657,
  "cost_usd": 0.00082925,
  "compile_ok": true,
  "runtime_ok": true,
  "stdout_ok": true,
  "duration_ms": 63,
  "compile_ms": 0,
  "execute_ms": 0,
  "error_category": "none",
  "stdout": "Sum: 18\nMax: 7\n",
  "expected_stdout": "Sum: 18\nMax: 7\n",
  "timestamp": "2025-10-16T19:19:25.904087+02:00",
  "code": "from __future__ import annotations\nfrom dataclasses import dataclass\nfrom typing import Union\n\n@dataclass(frozen=True)\nclass Leaf:\n    value: int\n    __match_args__ = (\"value\",)\n\n@dataclass(frozen=True)\nclass Node:\n    left: \"Tree\"\n    value: int\n    right: \"Tree\"\n    __match_args__ = (\"left\", \"value\", \"right\")\n\nTree = Union[Leaf, Node]\n\ndef tree_sum(tree: Tree) -\u003e int:\n    match tree:\n        case Leaf(v):\n            return v\n        case Node(l, v, r):\n            return tree_sum(l) + v + tree_sum(r)\n        case _:\n            raise TypeError(\"Unsupported Tree node\")\n\ndef find_max(tree: Tree) -\u003e int:\n    match tree:\n        case Leaf(v):\n            return v\n        case Node(Leaf(lv), v, Leaf(rv)):\n            return max(lv, v, rv)\n        case Node(Leaf(lv), v, right) if v \u003e= find_max(right):\n            return max(lv, v)\n        case Node(left, v, Leaf(rv)) if v \u003e= find_max(left):\n            return max(v, rv)\n        case Node(left, v, right):\n            ml = find_max(left)\n            mr = find_max(right)\n            return max(ml, v, mr)\n        case _:\n            raise TypeError(\"Unsupported Tree node\")\n\n# Sample tree: Node(Leaf(1), 5, Node(Leaf(3), 7, Leaf(2)))\nsample = Node(Leaf(1), 5, Node(Leaf(3), 7, Leaf(2)))\n\ns = tree_sum(sample)\nm = find_max(sample)\n\nprint(f\"Sum: {s}\")\nprint(f\"Max: {m}\")",
  "first_attempt_ok": true,
  "repair_used": false,
  "repair_ok": false
}