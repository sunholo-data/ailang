{
  "id": "pattern_matching_complex",
  "lang": "python",
  "model": "gemini-2-5-flash",
  "seed": 42,
  "input_tokens": 293,
  "output_tokens": 431,
  "total_tokens": 724,
  "cost_usd": 0.0011654,
  "compile_ok": true,
  "runtime_ok": true,
  "stdout_ok": true,
  "duration_ms": 64,
  "compile_ms": 0,
  "execute_ms": 0,
  "error_category": "none",
  "stdout": "Sum: 18\nMax: 7\n",
  "expected_stdout": "Sum: 18\nMax: 7\n",
  "timestamp": "2025-10-16T19:23:40.182926+02:00",
  "code": "from dataclasses import dataclass\nfrom typing import Union\n\n# 1. Define a Tree type\n@dataclass(frozen=True)\nclass Leaf:\n    value: int\n\n@dataclass(frozen=True)\nclass Node:\n    left: 'Tree'\n    value: int\n    right: 'Tree'\n\nTree = Union[Leaf, Node]\n\n# 2. Implement tree_sum using pattern matching\ndef tree_sum(tree: Tree) -\u003e int:\n    match tree:\n        case Leaf(v):\n            return v\n        case Node(l, v, r):\n            return tree_sum(l) + v + tree_sum(r)\n\n# 3. Implement find_max with nested patterns and guards\n# The Node(left, value, right) pattern itself is a nested pattern.\n# For finding the maximum value, the most idiomatic and efficient approach\n# in Python is to compute the maximums of subtrees and then use the built-in max() function.\n# Directly implementing the max comparison logic using multiple guarded patterns\n# for this specific problem would lead to inefficient re-computation of recursive calls,\n# which an expert Python programmer would avoid.\ndef find_max(tree: Tree) -\u003e int:\n    match tree:\n        case Leaf(v):\n            return v\n        case Node(left, value, right):\n            max_left = find_max(left)\n            max_right = find_max(right)\n            return max(value, max_left, max_right)\n\n# 4. Create a sample tree\nsample_tree: Tree = Node(Leaf(1), 5, Node(Leaf(3), 7, Leaf(2)))\n\n# 5. Print results\nsum_result = tree_sum(sample_tree)\nmax_result = find_max(sample_tree)\n\nprint(f\"Sum: {sum_result}\")\nprint(f\"Max: {max_result}\")",
  "first_attempt_ok": true,
  "repair_used": false,
  "repair_ok": false
}