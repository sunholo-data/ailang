{
  "id": "list_operations",
  "lang": "python",
  "model": "gemini-2-5-pro",
  "seed": 42,
  "input_tokens": 184,
  "output_tokens": 321,
  "total_tokens": 505,
  "cost_usd": 0.0034400000000000003,
  "compile_ok": true,
  "runtime_ok": true,
  "stdout_ok": true,
  "duration_ms": 21,
  "compile_ms": 0,
  "execute_ms": 0,
  "error_category": "none",
  "stdout": "Sum: 15\nLength: 5\n",
  "expected_stdout": "Sum: 15\nLength: 5\n",
  "timestamp": "2025-10-16T19:22:17.021136+02:00",
  "code": "import sys\n\n# Python's default recursion limit is often 1000.\n# For very long lists, this might need to be adjusted.\n# sys.setrecursionlimit(2000)\n\ndef sum_list(items: list[int]) -\u003e int:\n    \"\"\"\n    Recursively calculates the sum of elements in a list using pattern matching.\n    \"\"\"\n    match items:\n        case []:\n            return 0\n        case [head, *tail]:\n            return head + sum_list(tail)\n        case _:\n            raise TypeError(\"Input must be a list of integers.\")\n\ndef length_list(items: list) -\u003e int:\n    \"\"\"\n    Recursively calculates the length of a list using pattern matching.\n    \"\"\"\n    match items:\n        case []:\n            return 0\n        case [_, *tail]:\n            return 1 + length_list(tail)\n        case _:\n            raise TypeError(\"Input must be a list.\")\n\ndef main():\n    \"\"\"\n    Main function to run the program.\n    \"\"\"\n    numbers = [1, 2, 3, 4, 5]\n\n    total_sum = sum_list(numbers)\n    total_length = length_list(numbers)\n\n    print(f\"Sum: {total_sum}\")\n    print(f\"Length: {total_length}\")\n\nif __name__ == \"__main__\":\n    main()",
  "first_attempt_ok": true,
  "repair_used": false,
  "repair_ok": false
}