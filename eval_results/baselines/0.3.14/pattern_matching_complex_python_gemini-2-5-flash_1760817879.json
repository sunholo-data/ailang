{
  "id": "pattern_matching_complex",
  "lang": "python",
  "model": "gemini-2-5-flash",
  "seed": 42,
  "input_tokens": 293,
  "output_tokens": 514,
  "total_tokens": 807,
  "cost_usd": 0.0013729,
  "compile_ok": true,
  "runtime_ok": true,
  "stdout_ok": true,
  "duration_ms": 58,
  "compile_ms": 0,
  "execute_ms": 0,
  "error_category": "none",
  "stdout": "Sum: 18\nMax: 7\n",
  "expected_stdout": "Sum: 18\nMax: 7\n",
  "timestamp": "2025-10-18T22:04:39.54268+02:00",
  "code": "from dataclasses import dataclass\nfrom typing import Union\n\n# Define the Tree type using dataclasses\n@dataclass(frozen=True)\nclass Leaf:\n    value: int\n\n@dataclass(frozen=True)\nclass Node:\n    left: 'Tree'  # Forward reference for recursive type\n    value: int\n    right: 'Tree' # Forward reference for recursive type\n\nTree = Union[Leaf, Node]\n\n# Function to calculate the sum of values in the tree using pattern matching\ndef tree_sum(tree: Tree) -\u003e int:\n    match tree:\n        case Leaf(v):\n            return v\n        case Node(l, v, r):\n            return tree_sum(l) + v + tree_sum(r)\n\n# Function to find the maximum value in the tree using nested patterns and guards\ndef find_max(tree: Tree) -\u003e int:\n    match tree:\n        case Leaf(v):\n            return v\n        case Node(left_child, node_value, right_child):\n            # Recursively find the maximum in left and right subtrees\n            max_from_left = find_max(left_child)\n            max_from_right = find_max(right_child)\n\n            # Use a nested match statement with guards to determine the overall maximum.\n            # This demonstrates how guards can be used with patterns for conditional logic.\n            match (node_value, max_from_left, max_from_right):\n                case (v, ml, mr) if v \u003e= ml and v \u003e= mr:\n                    return v\n                case (v, ml, mr) if ml \u003e= mr: # If node_value is not the max, check between ml and mr\n                    return ml\n                case (_, _, mr): # If neither node_value nor ml is the max, mr must be\n                    return mr\n\n# Create a sample tree\nsample_tree = Node(\n    Leaf(1),\n    5,\n    Node(\n        Leaf(3),\n        7,\n        Leaf(2)\n    )\n)\n\n# Calculate sum and max\ntotal_sum = tree_sum(sample_tree)\nmaximum_val = find_max(sample_tree)\n\n# Print results\nprint(f\"Sum: {total_sum}\")\nprint(f\"Max: {maximum_val}\")",
  "first_attempt_ok": true,
  "repair_used": false,
  "repair_ok": false
}