{
  "id": "error_handling",
  "lang": "python",
  "model": "gemini-2-5-flash",
  "seed": 42,
  "input_tokens": 294,
  "output_tokens": 580,
  "total_tokens": 874,
  "cost_usd": 0.0015382,
  "compile_ok": true,
  "runtime_ok": true,
  "stdout_ok": true,
  "duration_ms": 46,
  "compile_ms": 0,
  "execute_ms": 0,
  "error_category": "none",
  "stdout": "Result: 5\nError: Division by zero\nError: Invalid integer\n",
  "expected_stdout": "Result: 5\nError: Division by zero\nError: Invalid integer\n",
  "timestamp": "2025-10-18T22:03:40.397893+02:00",
  "code": "from typing import TypeVar, Generic, Union\n\nT = TypeVar('T')\n\nclass Ok(Generic[T]):\n    __slots__ = ('value',)\n    def __init__(self, value: T):\n        self.value = value\n\n    def __repr__(self) -\u003e str:\n        return f\"Ok({self.value!r})\"\n\n    def is_ok(self) -\u003e bool:\n        return True\n\n    def is_err(self) -\u003e bool:\n        return False\n\nclass Err:\n    __slots__ = ('message',)\n    def __init__(self, message: str):\n        self.message = message\n\n    def __repr__(self) -\u003e str:\n        return f\"Err({self.message!r})\"\n\n    def is_ok(self) -\u003e bool:\n        return False\n\n    def is_err(self) -\u003e bool:\n        return True\n\nResult = Union[Ok[T], Err]\n\ndef parse_int(s: str) -\u003e Result[int]:\n    try:\n        n = int(s)\n        return Ok(n)\n    except ValueError:\n        return Err(\"Invalid integer\")\n\ndef divide_safe(a: int, b: int) -\u003e Result[int]:\n    if b == 0:\n        return Err(\"Division by zero\")\n    return Ok(a // b)\n\nresult1_parse = parse_int(\"10\")\nif result1_parse.is_ok():\n    result1_final = divide_safe(result1_parse.value, 2)\nelse:\n    result1_final = result1_parse\n\nif result1_final.is_ok():\n    print(f\"Result: {result1_final.value}\")\nelse:\n    print(f\"Error: {result1_final.message}\")\n\nresult2_parse = parse_int(\"10\")\nif result2_parse.is_ok():\n    result2_final = divide_safe(result2_parse.value, 0)\nelse:\n    result2_final = result2_parse\n\nif result2_final.is_ok():\n    print(f\"Result: {result2_final.value}\")\nelse:\n    print(f\"Error: {result2_final.message}\")\n\nresult3_parse = parse_int(\"abc\")\nresult3_final = result3_parse\n\nif result3_final.is_ok():\n    print(f\"Result: {result3_final.value}\")\nelse:\n    print(f\"Error: {result3_final.message}\")",
  "first_attempt_ok": true,
  "repair_used": false,
  "repair_ok": false
}