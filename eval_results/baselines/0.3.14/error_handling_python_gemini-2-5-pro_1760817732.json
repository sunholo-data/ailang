{
  "id": "error_handling",
  "lang": "python",
  "model": "gemini-2-5-pro",
  "seed": 42,
  "input_tokens": 294,
  "output_tokens": 518,
  "total_tokens": 812,
  "cost_usd": 0.0055475,
  "compile_ok": true,
  "runtime_ok": true,
  "stdout_ok": true,
  "duration_ms": 65,
  "compile_ms": 0,
  "execute_ms": 0,
  "error_category": "none",
  "stdout": "Result: 5\nError: Division by zero\nError: Invalid integer\n",
  "expected_stdout": "Result: 5\nError: Division by zero\nError: Invalid integer\n",
  "timestamp": "2025-10-18T22:02:12.746169+02:00",
  "code": "from dataclasses import dataclass\nfrom typing import Generic, TypeVar, Union\n\nT = TypeVar(\"T\")\nE = TypeVar(\"E\")\n\n@dataclass(frozen=True)\nclass Ok(Generic[T]):\n    value: T\n\n@dataclass(frozen=True)\nclass Err(Generic[E]):\n    message: E\n\nResult = Union[Ok[T], Err[E]]\n\ndef parse_int(s: str) -\u003e Result[int, str]:\n    \"\"\"\n    Parses a string into an integer, returning a Result type.\n    \"\"\"\n    try:\n        return Ok(int(s))\n    except ValueError:\n        return Err(\"Invalid integer\")\n\ndef divide_safe(a: int, b: int) -\u003e Result[int, str]:\n    \"\"\"\n    Divides two integers, returning a Result type to handle division by zero.\n    \"\"\"\n    if b == 0:\n        return Err(\"Division by zero\")\n    return Ok(a // b)\n\ndef process_and_print(s: str, divisor: int):\n    \"\"\"\n    Chains parsing and division, then prints the final result.\n    \"\"\"\n    parse_result = parse_int(s)\n\n    # Chain the operations\n    if isinstance(parse_result, Ok):\n        # If parsing is successful, proceed to division\n        final_result = divide_safe(parse_result.value, divisor)\n    else:\n        # If parsing failed, the chain is short-circuited\n        final_result = parse_result\n\n    # Print the final result based on its variant\n    if isinstance(final_result, Ok):\n        print(f\"Result: {final_result.value}\")\n    elif isinstance(final_result, Err):\n        print(f\"Error: {final_result.message}\")\n\ndef main():\n    \"\"\"\n    Runs the test cases.\n    \"\"\"\n    # Test case 1: Successful parsing and division\n    process_and_print(\"10\", 2)\n\n    # Test case 2: Successful parsing, but division by zero\n    process_and_print(\"10\", 0)\n\n    # Test case 3: Failed parsing\n    process_and_print(\"abc\", 2)\n\nif __name__ == \"__main__\":\n    main()",
  "first_attempt_ok": true,
  "repair_used": false,
  "repair_ok": false
}