{
  "id": "error_handling",
  "lang": "ailang",
  "model": "gemini-2-5-flash",
  "seed": 42,
  "input_tokens": 13373,
  "output_tokens": 1028,
  "total_tokens": 14401,
  "cost_usd": 0.0032279,
  "compile_ok": true,
  "runtime_ok": true,
  "stdout_ok": true,
  "duration_ms": 14,
  "compile_ms": 0,
  "execute_ms": 0,
  "error_category": "compile_error",
  "stderr": "Error: module loading error: failed to load benchmark/solution.ail (search trace: [Loading module: benchmark/solution.ail]): parse errors in benchmark/solution.ail: [PAR_UNEXPECTED_TOKEN at benchmark/solution.ail:7:46: expected next token to be ), got ( instead PAR_UNEXPECTED_TOKEN at benchmark/solution.ail:7:46: expected next token to be {, got ( instead PAR_NO_PREFIX_PARSE at benchmark/solution.ail:7:50: unexpected token in expression: -\u003e PAR_NO_PREFIX_PARSE at benchmark/solution.ail:7:65: unexpected token in expression: ) PAR_NO_PREFIX_PARSE at benchmark/solution.ail:7:67: unexpected token in expression: -\u003e]\n",
  "expected_stdout": "Result: 5\nError: Division by zero\nError: Invalid integer\n",
  "timestamp": "2025-10-18T22:03:57.961344+02:00",
  "code": "module benchmark/solution\n\nimport std/io (println)\n\ntype Result[a, e] = Ok(a) | Err(e)\n\nexport func parse_int(s: string) -\u003e Result[int, string] {\n  match s {\n    \"10\" =\u003e Ok(10),\n    \"2\" =\u003e Ok(2),\n    _ =\u003e Err(\"Invalid integer\")\n  }\n}\n\nexport func divide_safe(a: int, b: int) -\u003e Result[int, string] {\n  if b == 0\n  then Err(\"Division by zero\")\n  else Ok(a / b)\n}\n\nfunc print_result_val(res: Result[int, string]) -\u003e () ! {IO} {\n  match res {\n    Ok(v) =\u003e println(\"Result: \" ++ show(v)),\n    Err(e) =\u003e println(\"Error: \" ++ e)\n  }\n}\n\nexport func main() -\u003e () ! {IO} {\n  -- Test case 1: parse_int(\"10\") then divide by 2 -\u003e \"Result: 5\"\n  let parsed1 = parse_int(\"10\");\n  let chain1 = match parsed1 {\n    Ok(val) =\u003e divide_safe(val, 2),\n    Err(err) =\u003e Err(err)\n  };\n  print_result_val(chain1);\n\n  -- Test case 2: parse_int(\"10\") then divide by 0 -\u003e \"Error: Division by zero\"\n  let parsed2 = parse_int(\"10\");\n  let chain2 = match parsed2 {\n    Ok(val) =\u003e divide_safe(val, 0),\n    Err(err) =\u003e Err(err)\n  };\n  print_result_val(chain2);\n\n  -- Test case 3: parse_int(\"abc\") -\u003e \"Error: Invalid integer\"\n  let parsed3 = parse_int(\"abc\");\n  let chain3 = match parsed3 {\n    Ok(val) =\u003e divide_safe(val, 2),\n    Err(err) =\u003e Err(err)\n  };\n  print_result_val(chain3)\n}",
  "first_attempt_ok": false,
  "repair_used": true,
  "repair_ok": true,
  "err_code": "PAR_001",
  "repair_tokens_in": 7130,
  "repair_tokens_out": 486
}