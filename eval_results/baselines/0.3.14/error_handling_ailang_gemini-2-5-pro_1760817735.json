{
  "id": "error_handling",
  "lang": "ailang",
  "model": "gemini-2-5-pro",
  "seed": 42,
  "input_tokens": 6243,
  "output_tokens": 429,
  "total_tokens": 6672,
  "cost_usd": 0.01209375,
  "compile_ok": false,
  "runtime_ok": false,
  "stdout_ok": false,
  "duration_ms": 5,
  "compile_ms": 0,
  "execute_ms": 0,
  "error_category": "compile_error",
  "stderr": "Error: module loading error: failed to load benchmark/solution.ail (search trace: [Loading module: benchmark/solution.ail]): parse errors in benchmark/solution.ail: [PAR_UNEXPECTED_TOKEN at benchmark/solution.ail:21:44: expected next token to be ), got ( instead PAR_UNEXPECTED_TOKEN at benchmark/solution.ail:21:44: expected next token to be {, got ( instead PAR_NO_PREFIX_PARSE at benchmark/solution.ail:21:48: unexpected token in expression: -\u003e PAR_NO_PREFIX_PARSE at benchmark/solution.ail:21:60: unexpected token in expression: ) PAR_NO_PREFIX_PARSE at benchmark/solution.ail:21:62: unexpected token in expression: -\u003e]\n",
  "expected_stdout": "Result: 5\nError: Division by zero\nError: Invalid integer\n",
  "timestamp": "2025-10-18T22:02:15.695855+02:00",
  "code": "module benchmark/solution\n\nimport std/io (println)\n\ntype Result[a] = Ok(a) | Err(string)\n\nfunc parse_int(s: string) -\u003e Result[int] {\n  if s == \"10\" then\n    Ok(10)\n  else\n    Err(\"Invalid integer\")\n}\n\nfunc divide_safe(a: int, b: int) -\u003e Result[int] {\n  if b == 0 then\n    Err(\"Division by zero\")\n  else\n    Ok(a / b)\n}\n\nfunc and_then[a, b](res: Result[a], f: func(a) -\u003e Result[b]) -\u003e Result[b] {\n  match res {\n    Ok(value) =\u003e f(value),\n    Err(msg) =\u003e Err(msg)\n  }\n}\n\nfunc print_result(res: Result[int]) -\u003e () ! {IO} {\n  match res {\n    Ok(value) =\u003e println(\"Result: \" ++ show(value)),\n    Err(msg) =\u003e println(\"Error: \" ++ msg)\n  }\n}\n\nexport func main() -\u003e () ! {IO} {\n  {\n    let res1 = and_then(parse_int(\"10\"), func(n: int) -\u003e Result[int] {\n      divide_safe(n, 2)\n    });\n    print_result(res1);\n\n    let res2 = and_then(parse_int(\"10\"), func(n: int) -\u003e Result[int] {\n      divide_safe(n, 0)\n    });\n    print_result(res2);\n\n    let res3 = and_then(parse_int(\"abc\"), func(n: int) -\u003e Result[int] {\n      divide_safe(n, 5)\n    });\n    print_result(res3)\n  }\n}",
  "first_attempt_ok": false,
  "repair_used": true,
  "repair_ok": false,
  "err_code": "PAR_001",
  "repair_tokens_in": 7016,
  "repair_tokens_out": 387
}