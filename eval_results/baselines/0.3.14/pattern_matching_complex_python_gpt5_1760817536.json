{
  "id": "pattern_matching_complex",
  "lang": "python",
  "model": "gpt5",
  "seed": 42,
  "input_tokens": 277,
  "output_tokens": 426,
  "total_tokens": 703,
  "cost_usd": 0.00460625,
  "compile_ok": true,
  "runtime_ok": true,
  "stdout_ok": true,
  "duration_ms": 68,
  "compile_ms": 0,
  "execute_ms": 0,
  "error_category": "none",
  "stdout": "Sum: 18\nMax: 7\n",
  "expected_stdout": "Sum: 18\nMax: 7\n",
  "timestamp": "2025-10-18T21:58:56.302024+02:00",
  "code": "from __future__ import annotations\nfrom dataclasses import dataclass\nfrom typing import Union\n\n@dataclass(frozen=True)\nclass Leaf:\n    value: int\n    __match_args__ = (\"value\",)\n\n@dataclass(frozen=True)\nclass Node:\n    left: 'Tree'\n    value: int\n    right: 'Tree'\n    __match_args__ = (\"left\", \"value\", \"right\")\n\nTree = Union[Leaf, Node]\n\ndef tree_sum(tree: Tree) -\u003e int:\n    match tree:\n        case Leaf(v):\n            return v\n        case Node(l, v, r):\n            return tree_sum(l) + v + tree_sum(r)\n\ndef find_max(tree: Tree) -\u003e int:\n    match tree:\n        case Leaf(v):\n            return v\n        case Node(Leaf(lv), v, Leaf(rv)):\n            return lv if lv \u003e= v and lv \u003e= rv else (v if v \u003e= rv else rv)\n        case Node(Leaf(lv), v, r) if lv \u003e= v:\n            mr = find_max(r)\n            return lv if lv \u003e= mr else mr\n        case Node(Leaf(lv), v, r):\n            mr = find_max(r)\n            return v if v \u003e= mr else mr\n        case Node(l, v, Leaf(rv)) if rv \u003e= v:\n            ml = find_max(l)\n            return rv if rv \u003e= ml else ml\n        case Node(l, v, Leaf(rv)):\n            ml = find_max(l)\n            return v if v \u003e= ml else ml\n        case Node(l, v, r):\n            ml = find_max(l)\n            mr = find_max(r)\n            m = ml if ml \u003e= mr else mr\n            return m if m \u003e= v else v\n\nif __name__ == \"__main__\":\n    tree = Node(Leaf(1), 5, Node(Leaf(3), 7, Leaf(2)))\n    print(f\"Sum: {tree_sum(tree)}\")\n    print(f\"Max: {find_max(tree)}\")",
  "first_attempt_ok": true,
  "repair_used": false,
  "repair_ok": false
}