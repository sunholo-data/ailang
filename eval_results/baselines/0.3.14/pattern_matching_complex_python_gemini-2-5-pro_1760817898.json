{
  "id": "pattern_matching_complex",
  "lang": "python",
  "model": "gemini-2-5-pro",
  "seed": 42,
  "input_tokens": 293,
  "output_tokens": 368,
  "total_tokens": 661,
  "cost_usd": 0.00404625,
  "compile_ok": true,
  "runtime_ok": true,
  "stdout_ok": true,
  "duration_ms": 57,
  "compile_ms": 0,
  "execute_ms": 0,
  "error_category": "none",
  "stdout": "Sum: 18\nMax: 7\n",
  "expected_stdout": "Sum: 18\nMax: 7\n",
  "timestamp": "2025-10-18T22:04:58.098534+02:00",
  "code": "from dataclasses import dataclass\nfrom typing import Union\n\n@dataclass\nclass Leaf:\n    value: int\n\n@dataclass\nclass Node:\n    left: 'Tree'\n    value: int\n    right: 'Tree'\n\nTree = Union[Leaf, Node]\n\ndef tree_sum(tree: Tree) -\u003e int:\n    match tree:\n        case Leaf(value=v):\n            return v\n        case Node(left=l, value=v, right=r):\n            return tree_sum(l) + v + tree_sum(r)\n        case _:\n            raise TypeError(\"Not a valid Tree node\")\n\ndef find_max(tree: Tree) -\u003e int:\n    match tree:\n        case Leaf(value=v):\n            return v\n        case Node(left=Leaf(lv), value=v, right=Leaf(rv)):\n            return max(v, lv, rv)\n        case Node(left=l, value=v, right=r) if (m := max(find_max(l), find_max(r))) \u003e v:\n            return m\n        case Node(value=v):\n            return v\n        case _:\n            raise TypeError(\"Not a valid Tree node\")\n\nif __name__ == \"__main__\":\n    sample_tree = Node(Leaf(1), 5, Node(Leaf(3), 7, Leaf(2)))\n\n    total_sum = tree_sum(sample_tree)\n    max_value = find_max(sample_tree)\n\n    print(f\"Sum: {total_sum}\")\n    print(f\"Max: {max_value}\")",
  "first_attempt_ok": true,
  "repair_used": false,
  "repair_ok": false
}