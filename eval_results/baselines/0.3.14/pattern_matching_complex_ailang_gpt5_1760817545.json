{
  "id": "pattern_matching_complex",
  "lang": "ailang",
  "model": "gpt5",
  "seed": 42,
  "input_tokens": 5770,
  "output_tokens": 319,
  "total_tokens": 6089,
  "cost_usd": 0.010402499999999999,
  "compile_ok": false,
  "runtime_ok": false,
  "stdout_ok": false,
  "duration_ms": 16,
  "compile_ms": 0,
  "execute_ms": 0,
  "error_category": "compile_error",
  "stderr": "Error: module loading error: failed to load benchmark/solution.ail (search trace: [Loading module: benchmark/solution.ail]): parse errors in benchmark/solution.ail: [PAR_UNEXPECTED_TOKEN at benchmark/solution.ail:37:22: expected next token to be }, got () instead PAR_NO_PREFIX_PARSE at benchmark/solution.ail:37:24: unexpected token in expression: ; PAR_NO_PREFIX_PARSE at benchmark/solution.ail:38:22: unexpected token in expression: ; PAR_NO_PREFIX_PARSE at benchmark/solution.ail:39:22: unexpected token in expression: ; PAR_NO_PREFIX_PARSE at benchmark/solution.ail:40:30: unexpected token in expression: ; PAR_NO_PREFIX_PARSE at benchmark/solution.ail:42:1: unexpected token in expression: }]\n",
  "expected_stdout": "Sum: 18\nMax: 7\n",
  "timestamp": "2025-10-18T21:59:05.495217+02:00",
  "code": "module benchmark/solution\n\nimport std/io (println)\n\ntype Tree = Leaf(int) | Node(Tree, int, Tree)\n\nexport func tree_sum(t: Tree) -\u003e int {\n  match t {\n    Leaf(v) =\u003e v,\n    Node(l, v, r) =\u003e tree_sum(l) + v + tree_sum(r)\n  }\n}\n\nexport func max3(a: int, b: int, c: int) -\u003e int {\n  let m = if a \u003e= b then a else b;\n  if m \u003e= c then m else c\n}\n\nexport func find_max(t: Tree) -\u003e int {\n  match t {\n    Leaf(v) =\u003e v,\n    Node(l, v, r) if v \u003e= find_max(l) \u0026\u0026 v \u003e= find_max(r) =\u003e v,\n    Node(Leaf(lv), v, Leaf(rv)) =\u003e max3(lv, v, rv),\n    Node(l, v, r) =\u003e {\n      let lm = find_max(l);\n      let rm = find_max(r);\n      max3(lm, v, rm)\n    }\n  }\n}\n\nexport func sample_tree() -\u003e Tree {\n  Node(Leaf(1), 5, Node(Leaf(3), 7, Leaf(2)))\n}\n\nexport func main() -\u003e () ! {IO} {\n  let t = sample_tree();\n  let s = tree_sum(t);\n  let m = find_max(t);\n  println(\"Sum: \" ++ show(s));\n  println(\"Max: \" ++ show(m))\n}",
  "first_attempt_ok": false,
  "repair_used": true,
  "repair_ok": false,
  "err_code": "PAR_001",
  "repair_tokens_in": 6417,
  "repair_tokens_out": 301
}