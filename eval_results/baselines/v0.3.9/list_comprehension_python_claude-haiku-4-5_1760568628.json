{
  "id": "list_comprehension",
  "lang": "python",
  "model": "claude-haiku-4-5",
  "seed": 42,
  "input_tokens": 256,
  "output_tokens": 263,
  "total_tokens": 519,
  "cost_usd": 0.0015710000000000001,
  "compile_ok": true,
  "runtime_ok": true,
  "stdout_ok": false,
  "duration_ms": 18,
  "compile_ms": 0,
  "execute_ms": 0,
  "error_category": "logic_error",
  "stdout": "Original list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nFiltered evens: [2, 4, 6, 8, 10]\nSquared evens: [4, 16, 36, 64, 100]\nSum of squares of evens: 220\n\nUsing list comprehension:\nSum of squares of evens: 220\n",
  "expected_stdout": "Sum of squares of evens: 220\n",
  "timestamp": "2025-10-16T00:50:28.838449+02:00",
  "code": "#!/usr/bin/env python3\n\"\"\"\nProgram that filters even numbers, squares them, and computes their sum.\n\"\"\"\n\n# Create initial list\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(f\"Original list: {numbers}\")\n\n# Filter to keep only even numbers\nevens = list(filter(lambda x: x % 2 == 0, numbers))\nprint(f\"Filtered evens: {evens}\")\n\n# Map by squaring each number\nsquared = list(map(lambda x: x ** 2, evens))\nprint(f\"Squared evens: {squared}\")\n\n# Compute the sum\nresult = sum(squared)\nprint(f\"Sum of squares of evens: {result}\")\n\n# Alternative using list comprehension (one-liner approach)\nprint(\"\\nUsing list comprehension:\")\nresult_alt = sum(x**2 for x in numbers if x % 2 == 0)\nprint(f\"Sum of squares of evens: {result_alt}\")",
  "first_attempt_ok": false,
  "repair_used": false,
  "repair_ok": false
}