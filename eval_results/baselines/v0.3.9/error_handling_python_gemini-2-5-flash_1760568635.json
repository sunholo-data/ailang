{
  "id": "error_handling",
  "lang": "python",
  "model": "gemini-2-5-flash",
  "seed": 42,
  "input_tokens": 294,
  "output_tokens": 534,
  "total_tokens": 828,
  "cost_usd": 0.0014232000000000001,
  "compile_ok": true,
  "runtime_ok": true,
  "stdout_ok": false,
  "duration_ms": 54,
  "compile_ms": 0,
  "execute_ms": 0,
  "error_category": "logic_error",
  "stdout": "Result: 5\nError: Division by zero\nError: Invalid integer\nResult: 10\nResult: 0\nError: Invalid integer\n",
  "expected_stdout": "Result: 5\nError: Division by zero\nError: Invalid integer\n",
  "timestamp": "2025-10-16T00:50:35.838416+02:00",
  "code": "from typing import TypeVar, Generic, Union\n\nT = TypeVar('T')\n\nclass Ok(Generic[T]):\n    def __init__(self, value: T):\n        self._value = value\n\n    def __repr__(self) -\u003e str:\n        return f\"Ok({self._value!r})\"\n\n    def is_ok(self) -\u003e bool:\n        return True\n\n    def is_err(self) -\u003e bool:\n        return False\n\n    @property\n    def value(self) -\u003e T:\n        return self._value\n\nclass Err:\n    def __init__(self, message: str):\n        self._message = message\n\n    def __repr__(self) -\u003e str:\n        return f\"Err({self._message!r})\"\n\n    def is_ok(self) -\u003e bool:\n        return False\n\n    def is_err(self) -\u003e bool:\n        return True\n\n    @property\n    def message(self) -\u003e str:\n        return self._message\n\nResultInt = Union[Ok[int], Err]\n\ndef parse_int(s: str) -\u003e ResultInt:\n    try:\n        return Ok(int(s))\n    except ValueError:\n        return Err(\"Invalid integer\")\n\ndef divide_safe(a: int, b: int) -\u003e ResultInt:\n    if b == 0:\n        return Err(\"Division by zero\")\n    return Ok(a // b)\n\ndef process_and_print(s_val: str, divisor: int):\n    parse_result = parse_int(s_val)\n\n    if parse_result.is_ok():\n        divide_result = divide_safe(parse_result.value, divisor)\n        if divide_result.is_ok():\n            print(f\"Result: {divide_result.value}\")\n        else:\n            print(f\"Error: {divide_result.message}\")\n    else:\n        print(f\"Error: {parse_result.message}\")\n\nif __name__ == \"__main__\":\n    process_and_print(\"10\", 2)\n    process_and_print(\"10\", 0)\n    process_and_print(\"abc\", 2)\n    process_and_print(\"100\", 10)\n    process_and_print(\"0\", 5)\n    process_and_print(\"bad\", 0)",
  "first_attempt_ok": false,
  "repair_used": false,
  "repair_ok": false
}