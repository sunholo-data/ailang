{
  "id": "pattern_matching_complex",
  "lang": "ailang",
  "model": "gpt5-mini",
  "seed": 42,
  "input_tokens": 5323,
  "output_tokens": 382,
  "total_tokens": 5705,
  "cost_usd": 0.0020947500000000003,
  "compile_ok": true,
  "runtime_ok": true,
  "stdout_ok": true,
  "duration_ms": 15,
  "compile_ms": 0,
  "execute_ms": 0,
  "error_category": "none",
  "stdout": "Sum: 18\nMax: 7\n",
  "expected_stdout": "Sum: 18\nMax: 7\n",
  "timestamp": "2025-10-16T00:51:14.696499+02:00",
  "code": "module benchmark/solution\n\nimport std/io (println)\n\ntype Tree = Leaf(int) | Node(Tree, int, Tree)\n\nexport func tree_sum(tree: Tree) -\u003e int {\n  match tree {\n    Leaf(v) =\u003e v,\n    Node(l, v, r) =\u003e tree_sum(l) + v + tree_sum(r)\n  }\n}\n\nexport func find_max(tree: Tree) -\u003e int {\n  match tree {\n    Leaf(v) =\u003e v,\n    Node(Leaf(lv), v, Leaf(rv)) =\u003e {\n      if lv \u003e= v \u0026\u0026 lv \u003e= rv then lv\n      else if v \u003e= lv \u0026\u0026 v \u003e= rv then v\n      else rv\n    },\n    Node(Leaf(lv), v, r) =\u003e {\n      let mr = find_max(r);\n      if lv \u003e= v \u0026\u0026 lv \u003e= mr then lv\n      else if v \u003e= lv \u0026\u0026 v \u003e= mr then v\n      else mr\n    },\n    Node(l, v, Leaf(rv)) =\u003e {\n      let ml = find_max(l);\n      if ml \u003e= v \u0026\u0026 ml \u003e= rv then ml\n      else if v \u003e= ml \u0026\u0026 v \u003e= rv then v\n      else rv\n    },\n    Node(l, v, r) =\u003e {\n      let ml = find_max(l);\n      let mr = find_max(r);\n      if ml \u003e= v \u0026\u0026 ml \u003e= mr then ml\n      else if v \u003e= ml \u0026\u0026 v \u003e= mr then v\n      else mr\n    }\n  }\n}\n\nexport func main() -\u003e () ! {IO} {\n  let sample = Node(Leaf(1), 5, Node(Leaf(3), 7, Leaf(2)));\n  let s = tree_sum(sample);\n  let m = find_max(sample);\n  println(\"Sum: \" ++ show(s));\n  println(\"Max: \" ++ show(m))\n}",
  "first_attempt_ok": true,
  "repair_used": false,
  "repair_ok": false
}