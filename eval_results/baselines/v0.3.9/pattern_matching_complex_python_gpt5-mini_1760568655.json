{
  "id": "pattern_matching_complex",
  "lang": "python",
  "model": "gpt5-mini",
  "seed": 42,
  "input_tokens": 277,
  "output_tokens": 369,
  "total_tokens": 646,
  "cost_usd": 0.00080725,
  "compile_ok": true,
  "runtime_ok": true,
  "stdout_ok": true,
  "duration_ms": 62,
  "compile_ms": 0,
  "execute_ms": 0,
  "error_category": "none",
  "stdout": "Sum: 18\nMax: 7\n",
  "expected_stdout": "Sum: 18\nMax: 7\n",
  "timestamp": "2025-10-16T00:50:55.438044+02:00",
  "code": "from dataclasses import dataclass\nfrom typing import Union\n\nTree = Union['Leaf', 'Node']\n\n@dataclass(frozen=True)\nclass Leaf:\n    value: int\n    __match_args__ = ('value',)\n\n@dataclass(frozen=True)\nclass Node:\n    left: Tree\n    value: int\n    right: Tree\n    __match_args__ = ('left', 'value', 'right')\n\ndef tree_sum(tree: Tree) -\u003e int:\n    match tree:\n        case Leaf(v):\n            return v\n        case Node(l, v, r):\n            return tree_sum(l) + v + tree_sum(r)\n        case _:\n            raise TypeError(\"Unsupported tree node\")\n\ndef find_max(tree: Tree) -\u003e int:\n    match tree:\n        case Leaf(v):\n            return v\n        case Node(Leaf(lv), v, Leaf(rv)):\n            return max(lv, v, rv)\n        case Node(Leaf(lv), v, r) if find_max(r) \u003c= lv:\n            return max(lv, v, find_max(r))\n        case Node(l, v, Leaf(rv)) if find_max(l) \u003c= rv:\n            return max(find_max(l), v, rv)\n        case Node(l, v, r):\n            lm = find_max(l)\n            rm = find_max(r)\n            return max(lm, v, rm)\n        case _:\n            raise TypeError(\"Unsupported tree node\")\n\nif __name__ == \"__main__\":\n    sample = Node(Leaf(1), 5, Node(Leaf(3), 7, Leaf(2)))\n    s = tree_sum(sample)\n    m = find_max(sample)\n    print(f\"Sum: {s}\")\n    print(f\"Max: {m}\")",
  "first_attempt_ok": true,
  "repair_used": false,
  "repair_ok": false
}