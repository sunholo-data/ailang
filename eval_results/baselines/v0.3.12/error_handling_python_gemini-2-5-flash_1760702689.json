{
  "id": "error_handling",
  "lang": "python",
  "model": "gemini-2-5-flash",
  "seed": 42,
  "input_tokens": 294,
  "output_tokens": 692,
  "total_tokens": 986,
  "cost_usd": 0.0018181999999999999,
  "compile_ok": true,
  "runtime_ok": true,
  "stdout_ok": true,
  "duration_ms": 52,
  "compile_ms": 0,
  "execute_ms": 0,
  "error_category": "none",
  "stdout": "Result: 5\nError: Division by zero\nError: Invalid integer\n",
  "expected_stdout": "Result: 5\nError: Division by zero\nError: Invalid integer\n",
  "timestamp": "2025-10-17T14:04:49.662256+02:00",
  "code": "from typing import Generic, TypeVar, Union\n\n_T = TypeVar('_T')\n\nclass Ok(Generic[_T]):\n    def __init__(self, value: _T):\n        self.value = value\n\n    def is_ok(self) -\u003e bool:\n        return True\n\n    def is_err(self) -\u003e bool:\n        return False\n\n    def unwrap(self) -\u003e _T:\n        \"\"\"Returns the contained `Ok` value. Raises if the value is an `Err`.\"\"\"\n        return self.value\n\n    def __repr__(self) -\u003e str:\n        return f\"Ok({self.value!r})\"\n\n\nclass Err:\n    def __init__(self, message: str):\n        self.message = message\n\n    def is_ok(self) -\u003e bool:\n        return False\n\n    def is_err(self) -\u003e bool:\n        return True\n\n    def unwrap_err(self) -\u003e str:\n        \"\"\"Returns the contained `Err` message. Raises if the value is an `Ok`.\"\"\"\n        return self.message\n\n    def __repr__(self) -\u003e str:\n        return f\"Err({self.message!r})\"\n\nResult = Union[Ok[_T], Err]\n\n\ndef parse_int(s: str) -\u003e Result[int]:\n    try:\n        n = int(s)\n        return Ok(n)\n    except ValueError:\n        return Err(\"Invalid integer\")\n\n\ndef divide_safe(a: int, b: int) -\u003e Result[int]:\n    if b == 0:\n        return Err(\"Division by zero\")\n    return Ok(a // b)\n\n\ndef print_result(res: Result[int]) -\u003e None:\n    if res.is_ok():\n        print(f\"Result: {res.unwrap()}\")\n    else:\n        print(f\"Error: {res.unwrap_err()}\")\n\n\n# Test Cases\n\n# parse_int(\"10\") then divide by 2 -\u003e \"Result: 5\"\nparsed_val = parse_int(\"10\")\nif parsed_val.is_ok():\n    final_result = divide_safe(parsed_val.unwrap(), 2)\n    print_result(final_result)\nelse:\n    print_result(parsed_val)\n\n# parse_int(\"10\") then divide by 0 -\u003e \"Error: Division by zero\"\nparsed_val = parse_int(\"10\")\nif parsed_val.is_ok():\n    final_result = divide_safe(parsed_val.unwrap(), 0)\n    print_result(final_result)\nelse:\n    print_result(parsed_val)\n\n# parse_int(\"abc\") -\u003e \"Error: Invalid integer\"\nparsed_val = parse_int(\"abc\")\nif parsed_val.is_ok():\n    # This block won't be reached if parse_int returns Err\n    final_result = divide_safe(parsed_val.unwrap(), 2)\n    print_result(final_result)\nelse:\n    print_result(parsed_val)",
  "first_attempt_ok": true,
  "repair_used": false,
  "repair_ok": false
}