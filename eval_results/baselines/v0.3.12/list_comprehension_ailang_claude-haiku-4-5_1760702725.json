{
  "id": "list_comprehension",
  "lang": "ailang",
  "model": "claude-haiku-4-5",
  "seed": 42,
  "input_tokens": 6724,
  "output_tokens": 389,
  "total_tokens": 7113,
  "cost_usd": 0.008669,
  "compile_ok": false,
  "runtime_ok": false,
  "stdout_ok": false,
  "duration_ms": 5,
  "compile_ms": 0,
  "execute_ms": 0,
  "error_category": "compile_error",
  "stderr": "Error: module loading error: failed to load benchmark/solution.ail (search trace: [Loading module: benchmark/solution.ail]): parse errors in benchmark/solution.ail: [PAR_UNEXPECTED_TOKEN at benchmark/solution.ail:5:30: expected next token to be ), got ( instead PAR_UNEXPECTED_TOKEN at benchmark/solution.ail:5:30: expected next token to be {, got ( instead PAR_NO_PREFIX_PARSE at benchmark/solution.ail:5:36: unexpected token in expression: -\u003e PAR_NO_PREFIX_PARSE at benchmark/solution.ail:5:43: unexpected token in expression: , PAR_NO_PREFIX_PARSE at benchmark/solution.ail:5:47: unexpected token in expression: : PAR_NO_PREFIX_PARSE at benchmark/solution.ail:5:54: unexpected token in expression: ) PAR_NO_PREFIX_PARSE at benchmark/solution.ail:5:56: unexpected token in expression: -\u003e PAR_UNEXPECTED_TOKEN at benchmark/solution.ail:8:7: expected next token to be =\u003e, got :: instead PAR_NO_PREFIX_PARSE at benchmark/solution.ail:8:7: unexpected token in expression: :: PAR_UNEXPECTED_TOKEN at benchmark/solution.ail:10:14: expected next token to be else, got :: instead PAR_NO_PREFIX_PARSE at benchmark/solution.ail:10:14: unexpected token in expression: :: PAR_UNEXPECTED_TOKEN at benchmark/solution.ail:11:7: expected next token to be =\u003e, got else instead PAR_NO_PREFIX_PARSE at benchmark/solution.ail:11:7: unexpected token in expression: else PAR_UNEXPECTED_TOKEN at benchmark/solution.ail:12:3: expected next token to be =\u003e, got } instead PAR_NO_PREFIX_PARSE at benchmark/solution.ail:12:3: unexpected token in expression: } PAR_UNEXPECTED_TOKEN at benchmark/solution.ail:15:24: expected next token to be ), got ( instead PAR_UNEXPECTED_TOKEN at benchmark/solution.ail:15:24: expected next token to be {, got ( instead PAR_NO_PREFIX_PARSE at benchmark/solution.ail:15:30: unexpected token in expression: -\u003e PAR_NO_PREFIX_PARSE at benchmark/solution.ail:15:36: unexpected token in expression: , PAR_NO_PREFIX_PARSE at benchmark/solution.ail:15:40: unexpected token in expression: : PAR_NO_PREFIX_PARSE at benchmark/solution.ail:15:47: unexpected token in expression: ) PAR_NO_PREFIX_PARSE at benchmark/solution.ail:15:49: unexpected token in expression: -\u003e PAR_UNEXPECTED_TOKEN at benchmark/solution.ail:18:7: expected next token to be =\u003e, got :: instead PAR_NO_PREFIX_PARSE at benchmark/solution.ail:18:7: unexpected token in expression: :: PAR_UNEXPECTED_TOKEN at benchmark/solution.ail:18:26: expected next token to be =\u003e, got IDENT instead PAR_UNEXPECTED_TOKEN at benchmark/solution.ail:22:25: expected next token to be ), got ( instead PAR_UNEXPECTED_TOKEN at benchmark/solution.ail:22:25: expected next token to be {, got ( instead PAR_NO_PREFIX_PARSE at benchmark/solution.ail:22:36: unexpected token in expression: -\u003e PAR_NO_PREFIX_PARSE at benchmark/solution.ail:22:42: unexpected token in expression: , PAR_NO_PREFIX_PARSE at benchmark/solution.ail:22:47: unexpected token in expression: : PAR_NO_PREFIX_PARSE at benchmark/solution.ail:22:52: unexpected token in expression: , PAR_NO_PREFIX_PARSE at benchmark/solution.ail:22:56: unexpected token in expression: : PAR_NO_PREFIX_PARSE at benchmark/solution.ail:22:63: unexpected token in expression: ) PAR_NO_PREFIX_PARSE at benchmark/solution.ail:22:65: unexpected token in expression: -\u003e PAR_UNEXPECTED_TOKEN at benchmark/solution.ail:25:7: expected next token to be =\u003e, got :: instead PAR_NO_PREFIX_PARSE at benchmark/solution.ail:25:7: unexpected token in expression: ::]\n",
  "expected_stdout": "Sum of squares of evens: 220\n",
  "timestamp": "2025-10-17T14:05:25.989764+02:00",
  "code": "module benchmark/solution\n\nimport std/io (println)\n\nexport func filter(pred: func(int) -\u003e bool, xs: [int]) -\u003e [int] {\n  match xs {\n    [] =\u003e [],\n    x :: rest =\u003e \n      if pred(x)\n      then x :: filter(pred, rest)\n      else filter(pred, rest)\n  }\n}\n\nexport func map(f: func(int) -\u003e int, xs: [int]) -\u003e [int] {\n  match xs {\n    [] =\u003e [],\n    x :: rest =\u003e f(x) :: map(f, rest)\n  }\n}\n\nexport func fold(f: func(int, int) -\u003e int, acc: int, xs: [int]) -\u003e int {\n  match xs {\n    [] =\u003e acc,\n    x :: rest =\u003e fold(f, f(acc, x), rest)\n  }\n}\n\nexport func isEven(n: int) -\u003e bool {\n  n % 2 == 0\n}\n\nexport func square(n: int) -\u003e int {\n  n * n\n}\n\nexport func add(a: int, b: int) -\u003e int {\n  a + b\n}\n\nexport func main() -\u003e () ! {IO} {\n  let nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n  let evens = filter(isEven, nums);\n  let squared = map(square, evens);\n  let result = fold(add, 0, squared);\n  println(\"Sum of squares of evens: \" ++ show(result))\n}",
  "first_attempt_ok": false,
  "repair_used": true,
  "repair_ok": false,
  "err_code": "PAR_001",
  "repair_tokens_in": 8326,
  "repair_tokens_out": 554
}