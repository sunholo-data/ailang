{
  "id": "pattern_matching_complex",
  "lang": "python",
  "model": "claude-haiku-4-5",
  "seed": 42,
  "input_tokens": 314,
  "output_tokens": 335,
  "total_tokens": 649,
  "cost_usd": 0.0019890000000000003,
  "compile_ok": true,
  "runtime_ok": true,
  "stdout_ok": true,
  "duration_ms": 49,
  "compile_ms": 0,
  "execute_ms": 0,
  "error_category": "none",
  "stdout": "Sum: 18\nMax: 7\n",
  "expected_stdout": "Sum: 18\nMax: 7\n",
  "timestamp": "2025-10-17T14:05:56.656616+02:00",
  "code": "from dataclasses import dataclass\nfrom typing import Union\n\n@dataclass\nclass Leaf:\n    value: int\n\n@dataclass\nclass Node:\n    left: 'Tree'\n    value: int\n    right: 'Tree'\n\nTree = Union[Leaf, Node]\n\ndef tree_sum(tree: Tree) -\u003e int:\n    match tree:\n        case Leaf(v):\n            return v\n        case Node(l, v, r):\n            return tree_sum(l) + v + tree_sum(r)\n\ndef find_max(tree: Tree) -\u003e int:\n    match tree:\n        case Leaf(v):\n            return v\n        case Node(l, v, r):\n            left_max = find_max(l)\n            right_max = find_max(r)\n            return max(left_max, v, right_max)\n\n# Create sample tree: Node(Leaf(1), 5, Node(Leaf(3), 7, Leaf(2)))\nsample_tree = Node(Leaf(1), 5, Node(Leaf(3), 7, Leaf(2)))\n\n# Calculate sum and max\ntotal_sum = tree_sum(sample_tree)\nmax_value = find_max(sample_tree)\n\n# Print results\nprint(f\"Sum: {total_sum}\")\nprint(f\"Max: {max_value}\")",
  "first_attempt_ok": true,
  "repair_used": false,
  "repair_ok": false
}