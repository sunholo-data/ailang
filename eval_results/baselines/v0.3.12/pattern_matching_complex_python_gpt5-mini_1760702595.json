{
  "id": "pattern_matching_complex",
  "lang": "python",
  "model": "gpt5-mini",
  "seed": 42,
  "input_tokens": 277,
  "output_tokens": 378,
  "total_tokens": 655,
  "cost_usd": 0.00082525,
  "compile_ok": true,
  "runtime_ok": true,
  "stdout_ok": true,
  "duration_ms": 63,
  "compile_ms": 0,
  "execute_ms": 0,
  "error_category": "none",
  "stdout": "Sum: 18\nMax: 7\n",
  "expected_stdout": "Sum: 18\nMax: 7\n",
  "timestamp": "2025-10-17T14:03:15.692567+02:00",
  "code": "from typing import NamedTuple, Union\n\nclass Leaf(NamedTuple):\n    value: int\n\nclass Node(NamedTuple):\n    left: 'Tree'\n    value: int\n    right: 'Tree'\n\nTree = Union[Leaf, Node]\n\ndef tree_sum(tree: Tree) -\u003e int:\n    match tree:\n        case Leaf(v):\n            return v\n        case Node(l, v, r):\n            return tree_sum(l) + v + tree_sum(r)\n        case _:\n            raise TypeError(\"Unsupported Tree\")\n\ndef find_max(tree: Tree) -\u003e int:\n    match tree:\n        case Leaf(v):\n            return v\n        case Node(Leaf(lv), v, Leaf(rv)):\n            return max(lv, v, rv)\n        case Node(Leaf(lv), v, r):\n            mr = find_max(r)\n            return mr if mr \u003e max(lv, v) else max(lv, v)\n        case Node(l, v, Leaf(rv)):\n            ml = find_max(l)\n            return ml if ml \u003e max(v, rv) else max(v, rv)\n        case Node(l, v, r) if v \u003e= find_max(l) and v \u003e= find_max(r):\n            return v\n        case Node(l, v, r):\n            ml = find_max(l)\n            mr = find_max(r)\n            return max(ml, v, mr)\n        case _:\n            raise TypeError(\"Unsupported Tree\")\n\n# Sample tree: Node(Leaf(1), 5, Node(Leaf(3), 7, Leaf(2)))\nt = Node(Leaf(1), 5, Node(Leaf(3), 7, Leaf(2)))\n\nprint(f\"Sum: {tree_sum(t)}\")\nprint(f\"Max: {find_max(t)}\")",
  "first_attempt_ok": true,
  "repair_used": false,
  "repair_ok": false
}