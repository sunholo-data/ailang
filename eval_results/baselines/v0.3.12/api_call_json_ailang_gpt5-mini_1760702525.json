{
  "id": "api_call_json",
  "lang": "ailang",
  "model": "gpt5-mini",
  "seed": 42,
  "input_tokens": 119,
  "output_tokens": 82,
  "total_tokens": 201,
  "cost_usd": 0.00019375000000000002,
  "compile_ok": false,
  "runtime_ok": false,
  "stdout_ok": false,
  "duration_ms": 11,
  "compile_ms": 0,
  "execute_ms": 0,
  "error_category": "compile_error",
  "stderr": "Error: module loading error: failed to load benchmark/solution.ail (search trace: [Loading module: benchmark/solution.ail]): parse errors in benchmark/solution.ail: [PAR_NO_PREFIX_PARSE at benchmark/solution.ail:1:8: unexpected token in expression: = PAR_NO_PREFIX_PARSE at benchmark/solution.ail:2:5: unexpected token in expression: = PAR_NO_PREFIX_PARSE at benchmark/solution.ail:3:30: unexpected token in expression: = PAR_NO_PREFIX_PARSE at benchmark/solution.ail:4:29: unexpected token in expression: = PAR_NO_PREFIX_PARSE at benchmark/solution.ail:5:10: unexpected token in expression: = expected ; or }, got : PAR_UNEXPECTED_TOKEN at benchmark/solution.ail:5:34: expected next token to be ), got : instead PAR_NO_PREFIX_PARSE at benchmark/solution.ail:5:34: unexpected token in expression: : PAR_NO_PREFIX_PARSE at benchmark/solution.ail:5:54: unexpected token in expression: , PAR_NO_PREFIX_PARSE at benchmark/solution.ail:5:62: unexpected token in expression: : PAR_NO_PREFIX_PARSE at benchmark/solution.ail:5:65: unexpected token in expression: } PAR_NO_PREFIX_PARSE at benchmark/solution.ail:5:66: unexpected token in expression: ) PAR_NO_PREFIX_PARSE at benchmark/solution.ail:6:5: unexpected token in expression: = PAR_UNEXPECTED_TOKEN at benchmark/solution.ail:6:14: expected next token to be IDENT, got send instead PAR_NO_PREFIX_PARSE at benchmark/solution.ail:6:14: unexpected token in expression: send]\n",
  "expected_stdout": "200\n",
  "timestamp": "2025-10-17T14:02:05.597723+02:00",
  "code": "client = HttpClient()\nreq = HttpRequest(\"POST\", \"https://httpbin.org/post\")\nreq.headers[\"X-Test-Header\"] = \"value123\"\nreq.headers[\"Content-Type\"] = \"application/json\"\nreq.body = Json.encode({\"message\":\"Hello from AILANG\",\"count\":42})\nres = client.send(req)\nprint(res.status_code)",
  "first_attempt_ok": false,
  "repair_used": true,
  "repair_ok": false,
  "err_code": "IMPERATIVE",
  "repair_tokens_in": 693,
  "repair_tokens_out": 63
}