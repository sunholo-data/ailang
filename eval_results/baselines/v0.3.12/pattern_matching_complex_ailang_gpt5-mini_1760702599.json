{
  "id": "pattern_matching_complex",
  "lang": "ailang",
  "model": "gpt5-mini",
  "seed": 42,
  "input_tokens": 5770,
  "output_tokens": 350,
  "total_tokens": 6120,
  "cost_usd": 0.0021425,
  "compile_ok": true,
  "runtime_ok": true,
  "stdout_ok": true,
  "duration_ms": 28,
  "compile_ms": 0,
  "execute_ms": 0,
  "error_category": "none",
  "stdout": "Sum: 18\nMax: 7\n",
  "expected_stdout": "Sum: 18\nMax: 7\n",
  "timestamp": "2025-10-17T14:03:19.095747+02:00",
  "code": "module benchmark/solution\n\nimport std/io (println)\n\ntype Tree = Leaf(int) | Node(Tree, int, Tree)\n\nexport func tree_sum(tree: Tree) -\u003e int {\n  match tree {\n    Leaf(v) =\u003e v,\n    Node(l, v, r) =\u003e tree_sum(l) + v + tree_sum(r)\n  }\n}\n\nexport func find_max(tree: Tree) -\u003e int {\n  match tree {\n    Leaf(v) =\u003e v,\n    Node(l, v, r) if v \u003e= find_max(l) \u0026\u0026 v \u003e= find_max(r) =\u003e v,\n    Node(Leaf(lv), v, r) =\u003e {\n      let mr = find_max(r);\n      if lv \u003e= v \u0026\u0026 lv \u003e= mr then lv else if mr \u003e= v \u0026\u0026 mr \u003e= lv then mr else v\n    },\n    Node(l, v, Leaf(rv)) =\u003e {\n      let ml = find_max(l);\n      if ml \u003e= v \u0026\u0026 ml \u003e= rv then ml else if rv \u003e= v \u0026\u0026 rv \u003e= ml then rv else v\n    },\n    Node(l, v, r) =\u003e {\n      let ml = find_max(l);\n      let mr = find_max(r);\n      if ml \u003e= mr \u0026\u0026 ml \u003e= v then ml else if mr \u003e= ml \u0026\u0026 mr \u003e= v then mr else v\n    }\n  }\n}\n\nexport func main() -\u003e () ! {IO} {\n  let tree = Node(Leaf(1), 5, Node(Leaf(3), 7, Leaf(2)));\n  let sum = tree_sum(tree);\n  let mx = find_max(tree);\n  println(\"Sum: \" ++ show(sum));\n  println(\"Max: \" ++ show(mx))\n}",
  "first_attempt_ok": true,
  "repair_used": false,
  "repair_ok": false
}