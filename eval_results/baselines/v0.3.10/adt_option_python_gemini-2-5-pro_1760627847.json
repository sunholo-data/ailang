{
  "id": "adt_option",
  "lang": "python",
  "model": "gemini-2-5-pro",
  "seed": 42,
  "input_tokens": 167,
  "output_tokens": 423,
  "total_tokens": 590,
  "cost_usd": 0.00443875,
  "compile_ok": true,
  "runtime_ok": true,
  "stdout_ok": true,
  "duration_ms": 46,
  "compile_ms": 0,
  "execute_ms": 0,
  "error_category": "none",
  "stdout": "Result: 5.0\nError: Division by zero\n",
  "expected_stdout": "Result: 5.0\nError: Division by zero\n",
  "timestamp": "2025-10-16T17:17:27.880794+02:00",
  "code": "import typing\nfrom typing import TypeVar, Generic, Union, final\n\nT = TypeVar('T')\n\n@final\nclass Some(Generic[T]):\n    def __init__(self, value: T) -\u003e None:\n        self._value = value\n\n    @property\n    def value(self) -\u003e T:\n        return self._value\n\n    def __repr__(self) -\u003e str:\n        return f'Some({self._value!r})'\n\n    def __eq__(self, other: object) -\u003e bool:\n        if not isinstance(other, Some):\n            return NotImplemented\n        return self._value == other._value\n\nOption = Union[Some[T], None]\n\ndef safe_divide(numerator: float, denominator: float) -\u003e Option[float]:\n    \"\"\"\n    Performs division and returns the result wrapped in an Option type.\n    Returns Some(result) for a valid division, or None if dividing by zero.\n    \"\"\"\n    if denominator == 0:\n        return None\n    return Some(numerator / denominator)\n\ndef main() -\u003e None:\n    \"\"\"\n    Tests the safe_divide function and prints the results.\n    \"\"\"\n    def print_result(result: Option[float]) -\u003e None:\n        if isinstance(result, Some):\n            print(f\"Result: {result.value}\")\n        elif result is None:\n            print(\"Error: Division by zero\")\n        else:\n            # This case should not be reached with proper type checking\n            print(\"Unknown result type\")\n\n    # Test case 1: Successful division\n    result1 = safe_divide(10, 2)\n    print_result(result1)\n\n    # Test case 2: Division by zero\n    result2 = safe_divide(10, 0)\n    print_result(result2)\n\nif __name__ == \"__main__\":\n    main()",
  "first_attempt_ok": true,
  "repair_used": false,
  "repair_ok": false
}