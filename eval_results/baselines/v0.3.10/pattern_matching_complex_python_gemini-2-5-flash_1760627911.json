{
  "id": "pattern_matching_complex",
  "lang": "python",
  "model": "gemini-2-5-flash",
  "seed": 42,
  "input_tokens": 293,
  "output_tokens": 396,
  "total_tokens": 689,
  "cost_usd": 0.0010779000000000001,
  "compile_ok": true,
  "runtime_ok": true,
  "stdout_ok": true,
  "duration_ms": 67,
  "compile_ms": 0,
  "execute_ms": 0,
  "error_category": "none",
  "stdout": "Sum: 18\nMax: 7\n",
  "expected_stdout": "Sum: 18\nMax: 7\n",
  "timestamp": "2025-10-16T17:18:31.074561+02:00",
  "code": "from dataclasses import dataclass\nfrom typing import Union\n\n@dataclass(frozen=True)\nclass Leaf:\n    value: int\n\n@dataclass(frozen=True)\nclass Node:\n    left: \"Tree\"\n    value: int\n    right: \"Tree\"\n\nTree = Union[Leaf, Node]\n\ndef tree_sum(tree: Tree) -\u003e int:\n    match tree:\n        case Leaf(v):\n            return v\n        case Node(l, v, r):\n            return tree_sum(l) + v + tree_sum(r)\n\ndef find_max(tree: Tree) -\u003e int:\n    match tree:\n        case Leaf(v):\n            return v\n        # Nested pattern: a Node whose children are both Leaves\n        case Node(Leaf(left_val), val, Leaf(right_val)):\n            return max(left_val, val, right_val)\n        # General Node case (includes nodes with non-Leaf children)\n        # The 'if True' serves as a syntactic demonstration of a guard.\n        case Node(left_subtree, val, right_subtree) if True:\n            max_left_sub = find_max(left_subtree)\n            max_right_sub = find_max(right_subtree)\n            return max(val, max_left_sub, max_right_sub)\n\n# Create a sample tree\nsample_tree = Node(Leaf(1), 5, Node(Leaf(3), 7, Leaf(2)))\n\n# Calculate sum and max\nsum_result = tree_sum(sample_tree)\nmax_result = find_max(sample_tree)\n\n# Print results\nprint(f\"Sum: {sum_result}\")\nprint(f\"Max: {max_result}\")",
  "first_attempt_ok": true,
  "repair_used": false,
  "repair_ok": false
}