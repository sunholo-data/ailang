{
  "id": "error_handling",
  "lang": "python",
  "model": "gemini-2-5-pro",
  "seed": 42,
  "input_tokens": 294,
  "output_tokens": 489,
  "total_tokens": 783,
  "cost_usd": 0.0052575,
  "compile_ok": true,
  "runtime_ok": true,
  "stdout_ok": true,
  "duration_ms": 45,
  "compile_ms": 0,
  "execute_ms": 0,
  "error_category": "none",
  "stdout": "Result: 5\nError: Division by zero\nError: Invalid integer\n",
  "expected_stdout": "Result: 5\nError: Division by zero\nError: Invalid integer\n",
  "timestamp": "2025-10-16T17:17:43.665226+02:00",
  "code": "from typing import TypeVar, Generic, Union, final\nfrom dataclasses import dataclass\n\nT = TypeVar('T')\n\n@final\n@dataclass(frozen=True)\nclass Ok(Generic[T]):\n    value: T\n\n@final\n@dataclass(frozen=True)\nclass Err:\n    message: str\n\nResult = Union[Ok[T], Err]\n\ndef parse_int(s: str) -\u003e Result[int]:\n    try:\n        return Ok(int(s))\n    except ValueError:\n        return Err(\"Invalid integer\")\n\ndef divide_safe(a: int, b: int) -\u003e Result[int]:\n    if b == 0:\n        return Err(\"Division by zero\")\n    return Ok(a // b)\n\ndef print_result(result: Result):\n    if isinstance(result, Ok):\n        print(f\"Result: {result.value}\")\n    elif isinstance(result, Err):\n        print(f\"Error: {result.message}\")\n\ndef main():\n    # Test case 1: parse_int(\"10\") then divide by 2 -\u003e \"Result: 5\"\n    res1_parse = parse_int(\"10\")\n    if isinstance(res1_parse, Ok):\n        final_res1 = divide_safe(res1_parse.value, 2)\n    else:\n        final_res1 = res1_parse\n    print_result(final_res1)\n\n    # Test case 2: parse_int(\"10\") then divide by 0 -\u003e \"Error: Division by zero\"\n    res2_parse = parse_int(\"10\")\n    if isinstance(res2_parse, Ok):\n        final_res2 = divide_safe(res2_parse.value, 0)\n    else:\n        final_res2 = res2_parse\n    print_result(final_res2)\n\n    # Test case 3: parse_int(\"abc\") -\u003e \"Error: Invalid integer\"\n    final_res3 = parse_int(\"abc\")\n    print_result(final_res3)\n\nif __name__ == \"__main__\":\n    main()",
  "first_attempt_ok": true,
  "repair_used": false,
  "repair_ok": false
}