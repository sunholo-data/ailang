{
  "id": "error_handling",
  "lang": "ailang",
  "model": "gemini-2-5-pro",
  "seed": 42,
  "input_tokens": 5768,
  "output_tokens": 416,
  "total_tokens": 6184,
  "cost_usd": 0.01137,
  "compile_ok": false,
  "runtime_ok": false,
  "stdout_ok": false,
  "duration_ms": 5,
  "compile_ms": 0,
  "execute_ms": 0,
  "error_category": "compile_error",
  "stderr": "Error: module loading error: failed to load benchmark/solution.ail (search trace: [Loading module: benchmark/solution.ail]): parse errors in benchmark/solution.ail: [PAR_UNEXPECTED_TOKEN at benchmark/solution.ail:20:41: expected next token to be ), got ( instead PAR_UNEXPECTED_TOKEN at benchmark/solution.ail:20:41: expected next token to be {, got ( instead PAR_NO_PREFIX_PARSE at benchmark/solution.ail:20:45: unexpected token in expression: -\u003e PAR_NO_PREFIX_PARSE at benchmark/solution.ail:20:57: unexpected token in expression: ) PAR_NO_PREFIX_PARSE at benchmark/solution.ail:20:59: unexpected token in expression: -\u003e expected '-\u003e' or '=\u003e' after function parameters at benchmark/solution.ail:35:43 PAR_UNEXPECTED_TOKEN at benchmark/solution.ail:35:43: expected next token to be ), got { instead PAR_UNEXPECTED_TOKEN at benchmark/solution.ail:35:43: expected next token to be }, got { instead PAR_NO_PREFIX_PARSE at benchmark/solution.ail:37:4: unexpected token in expression: ) PAR_NO_PREFIX_PARSE at benchmark/solution.ail:37:5: unexpected token in expression: ; PAR_NO_PREFIX_PARSE at benchmark/solution.ail:38:19: unexpected token in expression: ; expected '-\u003e' or '=\u003e' after function parameters at benchmark/solution.ail:40:43 PAR_UNEXPECTED_TOKEN at benchmark/solution.ail:40:43: expected next token to be ), got { instead PAR_NO_PREFIX_PARSE at benchmark/solution.ail:42:4: unexpected token in expression: ) PAR_NO_PREFIX_PARSE at benchmark/solution.ail:42:5: unexpected token in expression: ; PAR_NO_PREFIX_PARSE at benchmark/solution.ail:43:19: unexpected token in expression: ; expected '-\u003e' or '=\u003e' after function parameters at benchmark/solution.ail:45:44 PAR_UNEXPECTED_TOKEN at benchmark/solution.ail:45:44: expected next token to be ), got { instead PAR_NO_PREFIX_PARSE at benchmark/solution.ail:47:4: unexpected token in expression: ) PAR_NO_PREFIX_PARSE at benchmark/solution.ail:47:5: unexpected token in expression: ; PAR_NO_PREFIX_PARSE at benchmark/solution.ail:49:1: unexpected token in expression: }]\n",
  "expected_stdout": "Result: 5\nError: Division by zero\nError: Invalid integer\n",
  "timestamp": "2025-10-16T17:17:44.863933+02:00",
  "code": "module benchmark/solution\n\nimport std/io (println)\n\ntype Result[a] = Ok(a) | Err(string)\n\nfunc parse_int(s: string) -\u003e Result[int] {\n  if s == \"10\" then Ok(10)\n  else if s == \"2\" then Ok(2)\n  else if s == \"0\" then Ok(0)\n  else Err(\"Invalid integer\")\n}\n\nfunc divide_safe(a: int, b: int) -\u003e Result[int] {\n  if b == 0\n  then Err(\"Division by zero\")\n  else Ok(a / b)\n}\n\nfunc chain[a, b](res: Result[a], f: func(a) -\u003e Result[b]) -\u003e Result[b] {\n  match res {\n    Ok(value) =\u003e f(value),\n    Err(msg) =\u003e Err(msg)\n  }\n}\n\nfunc print_result(res: Result[int]) -\u003e () ! {IO} {\n  match res {\n    Ok(value) =\u003e println(\"Result: \" ++ show(value)),\n    Err(msg) =\u003e println(\"Error: \" ++ msg)\n  }\n}\n\nexport func main() -\u003e () ! {IO} {\n  let r1 = chain(parse_int(\"10\"), func(n) {\n    divide_safe(n, 2)\n  });\n  print_result(r1);\n\n  let r2 = chain(parse_int(\"10\"), func(n) {\n    divide_safe(n, 0)\n  });\n  print_result(r2);\n\n  let r3 = chain(parse_int(\"abc\"), func(n) {\n    divide_safe(n, 1)\n  });\n  print_result(r3)\n}",
  "first_attempt_ok": false,
  "repair_used": false,
  "repair_ok": false
}