{
  "id": "pattern_matching_complex",
  "lang": "python",
  "model": "gemini-2-5-pro",
  "seed": 42,
  "input_tokens": 293,
  "output_tokens": 478,
  "total_tokens": 771,
  "cost_usd": 0.00514625,
  "compile_ok": true,
  "runtime_ok": true,
  "stdout_ok": true,
  "duration_ms": 72,
  "compile_ms": 0,
  "execute_ms": 0,
  "error_category": "none",
  "stdout": "Sum: 18\nMax: 7\n",
  "expected_stdout": "Sum: 18\nMax: 7\n",
  "timestamp": "2025-10-16T17:16:10.716345+02:00",
  "code": "from dataclasses import dataclass\nfrom typing import TypeAlias\n\n# 1. Define a Tree type: Leaf(value: int) | Node(left: Tree, value: int, right: Tree)\n@dataclass\nclass Leaf:\n    value: int\n\n@dataclass\nclass Node:\n    left: 'Tree'\n    value: int\n    right: 'Tree'\n\nTree: TypeAlias = Leaf | Node\n\n# 2. Implement `tree_sum(tree: Tree) -\u003e int` using pattern matching\ndef tree_sum(tree: Tree) -\u003e int:\n    \"\"\"Calculates the sum of all values in a tree.\"\"\"\n    match tree:\n        case Leaf(value):\n            return value\n        case Node(left, value, right):\n            return tree_sum(left) + value + tree_sum(right)\n\n# 3. Implement `find_max(tree: Tree) -\u003e int` with nested patterns and guards\ndef find_max(tree: Tree) -\u003e int:\n    \"\"\"Finds the maximum value in a tree using complex patterns.\"\"\"\n    match tree:\n        case Leaf(value):\n            return value\n        # Nested constructor pattern with a guard for a specific optimization/case\n        case Node(Leaf(l_val), value, Leaf(r_val)) if value \u003e= l_val and value \u003e= r_val:\n            return value\n        # General recursive case that correctly handles all other Node types\n        case Node(left, value, right):\n            return max(value, find_max(left), find_max(right))\n\n# 4. Create a sample tree: Node(Leaf(1), 5, Node(Leaf(3), 7, Leaf(2)))\nsample_tree = Node(Leaf(1), 5, Node(Leaf(3), 7, Leaf(2)))\n\n# 5. Print results\nif __name__ == \"__main__\":\n    total_sum = tree_sum(sample_tree)\n    max_value = find_max(sample_tree)\n\n    print(f\"Sum: {total_sum}\")\n    print(f\"Max: {max_value}\")",
  "first_attempt_ok": true,
  "repair_used": false,
  "repair_ok": false
}