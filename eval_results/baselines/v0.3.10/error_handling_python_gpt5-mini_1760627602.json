{
  "id": "error_handling",
  "lang": "python",
  "model": "gpt5-mini",
  "seed": 42,
  "input_tokens": 270,
  "output_tokens": 540,
  "total_tokens": 810,
  "cost_usd": 0.0011475,
  "compile_ok": true,
  "runtime_ok": true,
  "stdout_ok": true,
  "duration_ms": 68,
  "compile_ms": 0,
  "execute_ms": 0,
  "error_category": "none",
  "stdout": "Result: 5\nError: Division by zero\nError: Invalid integer\n",
  "expected_stdout": "Result: 5\nError: Division by zero\nError: Invalid integer\n",
  "timestamp": "2025-10-16T17:13:22.363173+02:00",
  "code": "from typing import Generic, TypeVar, Callable, Union\nfrom dataclasses import dataclass\n\nT = TypeVar(\"T\")\nU = TypeVar(\"U\")\n\nclass Result(Generic[T]):\n    def is_ok(self) -\u003e bool:\n        return isinstance(self, Ok)\n\n    def is_err(self) -\u003e bool:\n        return isinstance(self, Err)\n\n    def map(self, fn: Callable[[T], U]) -\u003e \"Result[U]\":\n        if self.is_ok():\n            return Ok(fn(self.value))  # type: ignore[attr-defined]\n        return self  # type: ignore[return-value]\n\n    def and_then(self, fn: Callable[[T], \"Result[U]\"]) -\u003e \"Result[U]\":\n        if self.is_ok():\n            return fn(self.value)  # type: ignore[attr-defined]\n        return self  # type: ignore[return-value]\n\n@dataclass\nclass Ok(Result[T]):\n    value: T\n\n    def __repr__(self) -\u003e str:\n        return f\"Ok({self.value!r})\"\n\n@dataclass\nclass Err(Result[T]):\n    message: str\n\n    def __repr__(self) -\u003e str:\n        return f\"Err({self.message!r})\"\n\ndef parse_int(s: str) -\u003e Result[int]:\n    try:\n        n = int(s)\n        return Ok(n)\n    except ValueError:\n        return Err(\"Invalid integer\")\n\ndef divide_safe(a: int, b: int) -\u003e Result[int]:\n    if b == 0:\n        return Err(\"Division by zero\")\n    return Ok(a // b)\n\ndef print_result(r: Result[int]) -\u003e None:\n    if r.is_ok():\n        print(f\"Result: {r.value}\")  # type: ignore[attr-defined]\n    else:\n        print(f\"Error: {r.message}\")  # type: ignore[attr-defined]\n\ndef main() -\u003e None:\n    # Test 1: parse_int(\"10\") then divide by 2 -\u003e \"Result: 5\"\n    res1 = parse_int(\"10\").and_then(lambda n: divide_safe(n, 2))\n    print_result(res1)\n\n    # Test 2: parse_int(\"10\") then divide by 0 -\u003e \"Error: Division by zero\"\n    res2 = parse_int(\"10\").and_then(lambda n: divide_safe(n, 0))\n    print_result(res2)\n\n    # Test 3: parse_int(\"abc\") -\u003e \"Error: Invalid integer\"\n    res3 = parse_int(\"abc\")\n    print_result(res3)\n\nif __name__ == \"__main__\":\n    main()",
  "first_attempt_ok": true,
  "repair_used": false,
  "repair_ok": false
}