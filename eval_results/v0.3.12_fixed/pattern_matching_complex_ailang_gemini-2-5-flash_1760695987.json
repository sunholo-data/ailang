{
  "id": "pattern_matching_complex",
  "lang": "ailang",
  "model": "gemini-2-5-flash",
  "seed": 42,
  "input_tokens": 6242,
  "output_tokens": 479,
  "total_tokens": 6721,
  "cost_usd": 0.0030700999999999997,
  "compile_ok": true,
  "runtime_ok": true,
  "stdout_ok": true,
  "duration_ms": 17,
  "compile_ms": 0,
  "execute_ms": 0,
  "error_category": "none",
  "stdout": "Sum: 18\nMax: 7\n",
  "expected_stdout": "Sum: 18\nMax: 7\n",
  "timestamp": "2025-10-17T12:13:07.006548+02:00",
  "code": "module benchmark/solution\n\nimport std/io (println)\n\n-- 1. Define a Tree type\ntype Tree =\n  | Leaf(int)\n  | Node(Tree, int, Tree)\n\n-- Helper function to find the maximum of three integers\nfunc max_of_three(a: int, b: int, c: int) -\u003e int {\n  if a \u003e b then {\n    if a \u003e c then a else c\n  } else {\n    if b \u003e c then b else c\n  }\n}\n\n-- 2. Implement tree_sum(tree: Tree) -\u003e int using pattern matching\nexport func tree_sum(tree: Tree) -\u003e int {\n  match tree {\n    Leaf(v) =\u003e v,\n    Node(l, v, r) =\u003e tree_sum(l) + v + tree_sum(r)\n  }\n}\n\n-- 3. Implement find_max(tree: Tree) -\u003e int with nested patterns and guards\nexport func find_max(tree: Tree) -\u003e int {\n  match tree {\n    Leaf(v) =\u003e v,\n    Node(l, v_node, r) =\u003e {\n      let max_left_subtree = find_max(l);\n      let max_right_subtree = find_max(r);\n      max_of_three(v_node, max_left_subtree, max_right_subtree)\n    }\n  }\n}\n\n-- Main function to create a sample tree and print results\nexport func main() -\u003e () ! {IO} {\n  -- 4. Create a sample tree: Node(Leaf(1), 5, Node(Leaf(3), 7, Leaf(2)))\n  let sample_tree = Node(Leaf(1), 5, Node(Leaf(3), 7, Leaf(2)));\n\n  -- Calculate sum and max\n  let sum_result = tree_sum(sample_tree);\n  let max_result = find_max(sample_tree);\n\n  -- 5. Print results\n  println(\"Sum: \" ++ show(sum_result));\n  println(\"Max: \" ++ show(max_result))\n}",
  "first_attempt_ok": true,
  "repair_used": false,
  "repair_ok": false,
  "prompt_version": "v0.3.12"
}