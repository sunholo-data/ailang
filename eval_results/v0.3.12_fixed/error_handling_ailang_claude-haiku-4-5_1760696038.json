{
  "id": "error_handling",
  "lang": "ailang",
  "model": "claude-haiku-4-5",
  "seed": 42,
  "input_tokens": 6781,
  "output_tokens": 398,
  "total_tokens": 7179,
  "cost_usd": 0.008771,
  "compile_ok": true,
  "runtime_ok": true,
  "stdout_ok": true,
  "duration_ms": 17,
  "compile_ms": 0,
  "execute_ms": 0,
  "error_category": "none",
  "stdout": "Result: 5\nError: Division by zero\nError: Invalid integer\n",
  "expected_stdout": "Result: 5\nError: Division by zero\nError: Invalid integer\n",
  "timestamp": "2025-10-17T12:13:58.224838+02:00",
  "code": "module benchmark/solution\n\nimport std/io (println)\n\ntype Result[a] = Ok(a) | Err(string)\n\nexport func parse_int(s: string) -\u003e Result[int] {\n  if s == \"10\"\n  then Ok(10)\n  else if s == \"5\"\n  then Ok(5)\n  else if s == \"0\"\n  then Ok(0)\n  else if s == \"-5\"\n  then Ok(-5)\n  else Err(\"Invalid integer\")\n}\n\nexport func divide_safe(a: int, b: int) -\u003e Result[int] {\n  if b == 0\n  then Err(\"Division by zero\")\n  else Ok(a / b)\n}\n\nexport func chain_operations(s: string, divisor: int) -\u003e Result[int] {\n  match parse_int(s) {\n    Ok(value) =\u003e divide_safe(value, divisor),\n    Err(msg) =\u003e Err(msg)\n  }\n}\n\nexport func print_result(result: Result[int]) -\u003e () ! {IO} {\n  match result {\n    Ok(value) =\u003e println(\"Result: \" ++ show(value)),\n    Err(msg) =\u003e println(\"Error: \" ++ msg)\n  }\n}\n\nexport func main() -\u003e () ! {IO} {\n  let test1 = chain_operations(\"10\", 2);\n  print_result(test1);\n\n  let test2 = chain_operations(\"10\", 0);\n  print_result(test2);\n\n  let test3 = chain_operations(\"abc\", 2);\n  print_result(test3)\n}",
  "first_attempt_ok": true,
  "repair_used": false,
  "repair_ok": false,
  "prompt_version": "v0.3.12"
}