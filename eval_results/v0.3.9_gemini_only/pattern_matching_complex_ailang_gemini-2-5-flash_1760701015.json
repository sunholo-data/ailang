{
  "id": "pattern_matching_complex",
  "lang": "ailang",
  "model": "gemini-2-5-flash",
  "seed": 42,
  "input_tokens": 12092,
  "output_tokens": 658,
  "total_tokens": 12750,
  "cost_usd": 0.0025601,
  "compile_ok": true,
  "runtime_ok": true,
  "stdout_ok": true,
  "duration_ms": 19,
  "compile_ms": 0,
  "execute_ms": 0,
  "error_category": "compile_error",
  "stderr": "Error: type error in benchmark/solution (decl 2): type unification failed at [function application at benchmark/solution.ail:38:24]: failed to unify parameter 0: cannot unify type constructors: String vs string\n",
  "expected_stdout": "Sum: 18\nMax: 7\n",
  "timestamp": "2025-10-17T13:36:55.849935+02:00",
  "code": "module benchmark/solution\n\nimport std/io (println)\n\ntype Tree =\n  | Leaf(int)\n  | Node(Tree, int, Tree)\n\nexport func tree_sum(tree: Tree) -\u003e int {\n  match tree {\n    Leaf(v) =\u003e v,\n    Node(l, v, r) =\u003e tree_sum(l) + v + tree_sum(r)\n  }\n}\n\nexport func find_max(tree: Tree) -\u003e int {\n  match tree {\n    Leaf(v) =\u003e v,\n    Node(l, v_node, r) =\u003e {\n      let max_left = find_max(l);\n      let max_right = find_max(r);\n\n      if v_node \u003e max_left then {\n        if v_node \u003e max_right then v_node else max_right\n      } else {\n        if max_left \u003e max_right then max_left else max_right\n      }\n    }\n  }\n}\n\nexport func main() -\u003e () ! {IO} {\n  let sample_tree = Node(Leaf(1), 5, Node(Leaf(3), 7, Leaf(2)));\n\n  let sum_result = tree_sum(sample_tree);\n  let max_result = find_max(sample_tree);\n\n  println(\"Sum: \" ++ show(sum_result));\n  println(\"Max: \" ++ show(max_result))\n}",
  "first_attempt_ok": false,
  "repair_used": true,
  "repair_ok": true,
  "err_code": "WRONG_LANG",
  "repair_tokens_in": 6325,
  "repair_tokens_out": 326,
  "prompt_version": "v0.3.9"
}