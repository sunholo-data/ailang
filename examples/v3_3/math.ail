-- v3.3 Example: Recursive functions with tests
module math

export { factorial, fibonacci, gcd }

-- Recursive factorial with inline tests
func factorial(n: int) -> int
  tests [
    (0, 1),
    (1, 1),
    (5, 120),
    (10, 3628800)
  ]
{
  if n <= 1 then 1 else n * factorial(n - 1)
}

-- Fibonacci sequence
func fibonacci(n: int) -> int
  tests [
    (0, 0),
    (1, 1),
    (2, 1),
    (3, 2),
    (4, 3),
    (5, 5),
    (10, 55)
  ]
{
  if n <= 0 then 0
  else if n == 1 then 1
  else fibonacci(n - 1) + fibonacci(n - 2)
}

-- Greatest common divisor using Euclid's algorithm
func gcd(a: int, b: int) -> int
  tests [
    (48, 18, 6),
    (100, 35, 5),
    (17, 19, 1)
  ]
{
  if b == 0 then a else gcd(b, a % b)
}

-- Main function to demonstrate the math functions
func main() -> string {
  let fact5 = factorial(5) in
  let fib10 = fibonacci(10) in
  let gcd48_18 = gcd(48, 18) in
  "factorial(5) = " ++ show(fact5) ++ 
  ", fibonacci(10) = " ++ show(fib10) ++
  ", gcd(48,18) = " ++ show(gcd48_18)
}