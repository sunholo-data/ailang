-- Simple Type Inference Demo for AILANG v2.0
-- Uses only currently supported parser features

-- Polymorphic identity function
-- Inferred: ∀α. α -> α
let id = (x) => x in

-- Using polymorphic function at different types
-- Note: Our parser doesn't support tuples yet, so using separate lets
let test_int = id(42) in
let test_bool = id(true) in
let test_string = id("hello") in

-- Simple function with single parameter
-- Inferred: string -> string
let greet = (name) => "Hello, " ++ name in

-- Row polymorphic record access
-- Inferred: ∀α ρ. {name: α | ρ} -> α
let getName = (record) => record.name in

-- Using row polymorphism with records
let user = {name: "Alice", age: 30} in
let product = {name: "Widget", price: 19.99} in
let userName = getName(user) in
let productName = getName(product) in

-- Higher-order function (simplified)
-- Inferred: ∀α β. (α -> β) -> α -> β
let apply = (f) => (x) => f(x) in

-- Type class constraints with arithmetic
-- Inferred: ∀α. Num[α] => α -> α -> α
let add = (x) => (y) => x + y in
let sum = add(5)(3) in

-- Record field access chain
let data = {person: {name: "Bob", age: 25}} in
let personName = data.person.name in

-- List literals (parser supports these)
let numbers = [1, 2, 3, 4, 5] in
let strings = ["hello", "world"] in

-- Boolean operations
let checkAge = (age) => if age >= 18 then "adult" else "minor" in
let status = checkAge(21) in

-- Nested let expressions
let result = 
  let a = 10 in
  let b = 20 in
  let c = a + b in
  c * 2 in

-- Final expression to evaluate
print("Type inference demo completed!")