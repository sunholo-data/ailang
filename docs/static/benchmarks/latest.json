{
  "aggregates": {
    "avgDurationMs": 12.87719298245614,
    "finalSuccess": 0.3508771929824561,
    "repairSuccessRate": 0,
    "repairUsed": 0,
    "totalCostUSD": 5.602920000000001,
    "totalTokens": 186764,
    "zeroShotSuccess": 0.3508771929824561
  },
  "benchmarks": {
    "adt_option": {
      "avgTokens": 196.66666666666666,
      "codeSamples": {
        "ailang": "module benchmark/solution\n\nimport std/io (println)\n\ntype Option[a] = Some(a) | None\n\nexport func safeDivide(a: float, b: float) -\u003e Option[float] {\n  if b == 0.0\n  then None\n  else Some(a / b)\n}\n\nexport func printResult(result: Option[float]) -\u003e () ! {IO} {\n  match result {\n    Some(v) =\u003e println(\"Result: \" ++ show(v)),\n    None =\u003e println(\"Error: Division by zero\")\n  }\n}\n\nexport func main() -\u003e () ! {IO} {\n  let r1 = safeDivide(10.0, 2.0);\n  printResult(r1);\n  let r2 = safeDivide(10.0, 0.0);\n  printResult(r2)\n}"
      },
      "languageStats": {
        "ailang": {
          "avgTokens": 196.66666666666666,
          "successRate": 1,
          "totalRuns": 3
        }
      },
      "languages": [
        "ailang"
      ],
      "successRate": 1,
      "taskPrompt": "Write a program in \u003cLANG\u003e that:\n1. Defines an Option type (Some/None, or equivalent)\n2. Implements a safe division function that returns Option[Float]\n   - Returns Some(result) if divisor is non-zero\n   - Returns None if divisor is zero\n3. Tests the function with: divide(10, 2) and divide(10, 0)\n4. Prints the results:\n   - For Some(value): print \"Result: {value}\"\n   - For None: print \"Error: Division by zero\"\n\nOutput only the code, no explanations.\n",
      "totalRuns": 3
    },
    "cli_args": {
      "avgTokens": 113.66666666666667,
      "codeSamples": {
        "ailang": "let args = get_args();\nlet filename = args[1];\n\nlet file = open(filename, \"r\");\nlet content = file.read_all();\nfile.close();\n\nlet lines = content.split(\"\\n\");\nlet sum = 0;\n\nfor line in lines {\n    if line != \"\" {\n        let num = number(line);\n        sum = sum + num;\n    }\n}\n\nprint(sum);"
      },
      "languageStats": {
        "ailang": {
          "avgTokens": 113.66666666666667,
          "successRate": 0,
          "totalRuns": 3
        }
      },
      "languages": [
        "ailang"
      ],
      "successRate": 0,
      "taskPrompt": "Write a program in \u003cLANG\u003e that:\n1. Takes a filename as a command-line argument\n2. Reads the file contents (assume it contains numbers, one per line)\n3. Computes the sum of all numbers\n4. Prints the sum\n\nOutput only the code, no explanations.\n",
      "totalRuns": 3
    },
    "error_handling": {
      "avgTokens": 449.6666666666667,
      "codeSamples": {
        "ailang": "module benchmark/solution\n\nimport std/io (println)\n\ntype Result[a] = Ok(a) | Err(string)\n\nexport func parse_int(s: string) -\u003e Result[int] {\n  if s == \"10\" then Ok(10) else Err(\"Invalid integer\")\n}\n\nexport func divide_safe(a: int, b: int) -\u003e Result[int] {\n  if b == 0 then Err(\"Division by zero\") else Ok(a / b)\n}\n\nexport func printResult(res: Result[int]) -\u003e () ! {IO} {\n  match res {\n    Ok(v) =\u003e println(\"Result: \" ++ show(v)),\n    Err(msg) =\u003e println(\"Error: \" ++ msg)\n  }\n}\n\nexport func main() -\u003e () ! {IO} {\n  let r1 = match parse_int(\"10\") {\n    Ok(n) =\u003e divide_safe(n, 2),\n    Err(msg) =\u003e Err(msg)\n  };\n  printResult(r1);\n  let r2 = match parse_int(\"10\") {\n    Ok(n) =\u003e divide_safe(n, 0),\n    Err(msg) =\u003e Err(msg)\n  };\n  printResult(r2);\n  let r3 = parse_int(\"abc\");\n  printResult(r3)\n}"
      },
      "languageStats": {
        "ailang": {
          "avgTokens": 449.6666666666667,
          "successRate": 0.3333333333333333,
          "totalRuns": 3
        }
      },
      "languages": [
        "ailang"
      ],
      "successRate": 0.3333333333333333,
      "taskPrompt": "Write a program in \u003cLANG\u003e that:\n1. Defines a Result type with Ok(value) and Err(message) variants\n2. Implements a function `parse_int(s: string) -\u003e Result[int]`:\n   - Returns Ok(n) if string can be parsed as integer\n   - Returns Err(\"Invalid integer\") otherwise\n3. Implements a function `divide_safe(a: int, b: int) -\u003e Result[int]`:\n   - Returns Ok(a/b) if b != 0\n   - Returns Err(\"Division by zero\") if b == 0\n4. Chains operations: parse_int(\"10\") -\u003e divide_safe(result, 2)\n5. Prints the final result:\n   - For Ok(value): \"Result: {value}\"\n   - For Err(msg): \"Error: {msg}\"\n\nTest cases:\n- parse_int(\"10\") then divide by 2 -\u003e \"Result: 5\"\n- parse_int(\"10\") then divide by 0 -\u003e \"Error: Division by zero\"\n- parse_int(\"abc\") -\u003e \"Error: Invalid integer\"\n\nOutput only the code, no explanations.\n",
      "totalRuns": 3
    },
    "fizzbuzz": {
      "avgTokens": 169.33333333333334,
      "codeSamples": {
        "ailang": "module benchmark/solution\n\nimport std/io (println)\n\nexport func fizzBuzz(n: int) -\u003e string {\n  if n % 15 == 0\n  then \"FizzBuzz\"\n  else if n % 3 == 0\n  then \"Fizz\"\n  else if n % 5 == 0\n  then \"Buzz\"\n  else show(n)\n}\n\nexport func printRange(current: int, max: int) -\u003e () ! {IO} {\n  if current \u003e max\n  then ()\n  else {\n    println(fizzBuzz(current));\n    printRange(current + 1, max)\n  }\n}\n\nexport func main() -\u003e () ! {IO} {\n  printRange(1, 100)\n}"
      },
      "languageStats": {
        "ailang": {
          "avgTokens": 169.33333333333334,
          "successRate": 0.6666666666666666,
          "totalRuns": 3
        }
      },
      "languages": [
        "ailang"
      ],
      "successRate": 0.6666666666666666,
      "taskPrompt": "Write a program in \u003cLANG\u003e that prints FizzBuzz from 1 to 100.\n\nRequirements:\n- Print numbers 1-100, one per line\n- For multiples of 3, print \"Fizz\" instead of the number\n- For multiples of 5, print \"Buzz\" instead of the number\n- For multiples of both 3 and 5, print \"FizzBuzz\" instead of the number\n\nOutput only the code, no explanations.\n",
      "totalRuns": 3
    },
    "float_eq": {
      "avgTokens": 36,
      "codeSamples": {
        "ailang": "(print (= 0.0 0.0))"
      },
      "languageStats": {
        "ailang": {
          "avgTokens": 36,
          "successRate": 0,
          "totalRuns": 3
        }
      },
      "languages": [
        "ailang"
      ],
      "successRate": 0,
      "taskPrompt": "Write a \u003cLANG\u003e program that evaluates (0.0 == 0.0) and prints true or false.\n",
      "totalRuns": 3
    },
    "higher_order_functions": {
      "avgTokens": 218.66666666666666,
      "codeSamples": {
        "ailang": "module benchmark/solution\n\nimport std/io (println)\n\nexport func compose[a, b, c](f: func(b) -\u003e c, g: func(a) -\u003e b) -\u003e func(a) -\u003e c {\n  func(x: a) -\u003e c {\n    f(g(x))\n  }\n}\n\nfunc curriedAdd(x: int) -\u003e func(int) -\u003e int {\n  func(y: int) -\u003e int {\n    x + y\n  }\n}\n\nfunc curriedMultiply(x: int) -\u003e func(int) -\u003e int {\n  func(y: int) -\u003e int {\n    x * y\n  }\n}\n\nexport func main() -\u003e () ! {IO} {\n  let add5 = curriedAdd(5);\n  let double = curriedMultiply(2);\n\n  let add5_then_double = compose(double, add5);\n\n  let result = add5_then_double(10);\n\n  println(\"Result: \" ++ show(result));\n}"
      },
      "languageStats": {
        "ailang": {
          "avgTokens": 218.66666666666666,
          "successRate": 0,
          "totalRuns": 3
        }
      },
      "languages": [
        "ailang"
      ],
      "successRate": 0,
      "taskPrompt": "Write a program in \u003cLANG\u003e that demonstrates higher-order functions:\n\n1. Implement `compose(f, g)` - returns a function that computes f(g(x))\n2. Implement `add(x, y)` - adds two numbers\n3. Implement `multiply(x, y)` - multiplies two numbers\n4. Create `add5 = add(5, _)` using partial application (or lambda)\n5. Create `double = multiply(2, _)` using partial application (or lambda)\n6. Create `add5_then_double = compose(double, add5)`\n7. Apply the composed function to 10\n8. Print the result: \"Result: {value}\"\n\nExpected computation: (10 + 5) * 2 = 30\n\nRequirements:\n- Use first-class functions\n- Demonstrate function composition\n- Show currying or partial application\n\nOutput only the code, no explanations.\n",
      "totalRuns": 3
    },
    "json_parse": {
      "avgTokens": 82.66666666666667,
      "codeSamples": {
        "ailang": "let json_string = `[{\"name\":\"Alice\",\"age\":30},{\"name\":\"Bob\",\"age\":25},{\"name\":\"Charlie\",\"age\":35}]`;\nlet people = json.parse(json_string);\n\nfor person in people {\n    if person.age \u003e= 30 {\n        print(person.name);\n    }\n}"
      },
      "languageStats": {
        "ailang": {
          "avgTokens": 82.66666666666667,
          "successRate": 0,
          "totalRuns": 3
        }
      },
      "languages": [
        "ailang"
      ],
      "successRate": 0,
      "taskPrompt": "Write a program in \u003cLANG\u003e that:\n1. Parses this JSON array: [{\"name\":\"Alice\",\"age\":30},{\"name\":\"Bob\",\"age\":25},{\"name\":\"Charlie\",\"age\":35}]\n2. Filters to keep only people aged 30 or older\n3. Prints the names, one per line\n\nOutput only the code, no explanations.\n",
      "totalRuns": 3
    },
    "list_comprehension": {
      "avgTokens": 459.6666666666667,
      "codeSamples": {
        "ailang": "module benchmark/solution\n\nimport std/io (println)\n\ntype List[a] = Cons(a, List[a]) | Nil\n\nexport func fromRange(start: int, end: int) -\u003e List[int] {\n  if start \u003e end\n  then Nil\n  else Cons(start, fromRange(start + 1, end))\n}\n\nexport func mapList[a, b](f: func(a) -\u003e b, xs: List[a]) -\u003e List[b] {\n  match xs {\n    Nil =\u003e Nil,\n    Cons(h, t) =\u003e Cons(f(h), mapList(f, t))\n  }\n}\n\nexport func filterList[a](p: func(a) -\u003e bool, xs: List[a]) -\u003e List[a] {\n  match xs {\n    Nil =\u003e Nil,\n    Cons(h, t) =\u003e if p(h) then Cons(h, filterList(p, t)) else filterList(p, t)\n  }\n}\n\nexport func foldList[a, b](f: func(b, a) -\u003e b, acc: b, xs: List[a]) -\u003e b {\n  match xs {\n    Nil =\u003e acc,\n    Cons(h, t) =\u003e foldList(f, f(acc, h), t)\n  }\n}\n\nexport func showIntList(xs: List[int]) -\u003e string {\n  \"[\" ++ showIntListContents(xs) ++ \"]\"\n}\n\nexport func showIntListContents(xs: List[int]) -\u003e string {\n  match xs {\n    Nil =\u003e \"\",\n    Cons(h, Nil) =\u003e show(h),\n    Cons(h, t) =\u003e show(h) ++ \", \" ++ showIntListContents(t)\n  }\n}\n\nexport func main() -\u003e () ! {IO} {\n  {\n    let nums = fromRange(1, 10);\n    let evens = filterList(func(n: int) -\u003e bool { (n % 2) == 0 }, nums);\n    let squares = mapList(func(n: int) -\u003e int { n * n }, evens);\n    let sum = foldList(func(acc: int, n: int) -\u003e int { acc + n }, 0, squares);\n    println(\"Original: \" ++ showIntList(nums));\n    println(\"Evens: \" ++ showIntList(evens));\n    println(\"Squares: \" ++ showIntList(squares));\n    println(\"Sum of squares of evens: \" ++ show(sum))\n  }\n}"
      },
      "languageStats": {
        "ailang": {
          "avgTokens": 459.6666666666667,
          "successRate": 0,
          "totalRuns": 3
        }
      },
      "languages": [
        "ailang"
      ],
      "successRate": 0,
      "taskPrompt": "Write a program in \u003cLANG\u003e that:\n1. Creates a list of integers: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n2. Filters the list to keep only even numbers\n3. Maps the filtered list by squaring each number\n4. Computes the sum of the resulting list\n5. Prints the result: \"Sum of squares of evens: {result}\"\n\nRequirements:\n- For Python: Use list comprehensions or map/filter\n- For AILANG: Implement map/filter/fold as recursive functions\n- Show intermediate results if helpful for debugging\n\nExpected result: 2^2 + 4^2 + 6^2 + 8^2 + 10^2 = 4 + 16 + 36 + 64 + 100 = 220\n\nOutput only the code, no explanations.\n",
      "totalRuns": 3
    },
    "list_operations": {
      "avgTokens": 214.66666666666666,
      "codeSamples": {
        "ailang": "module benchmark/solution\n\nimport std/io (println)\n\ntype List[a] = Cons(a, List[a]) | Nil\n\nfunc sum_list(l: List[int]) -\u003e int {\n  match l {\n    Nil =\u003e 0,\n    Cons(x, xs) =\u003e x + sum_list(xs)\n  }\n}\n\nfunc length_list[a](l: List[a]) -\u003e int {\n  match l {\n    Nil =\u003e 0,\n    Cons(_, xs) =\u003e 1 + length_list(xs)\n  }\n}\n\nexport func main() -\u003e () ! {IO} {\n  let myList = Cons(1, Cons(2, Cons(3, Cons(4, Cons(5, Nil)))));\n  \n  let totalSum = sum_list(myList);\n  let totalLength = length_list(myList);\n  \n  println(\"Sum: \" ++ show(totalSum));\n  println(\"Length: \" ++ show(totalLength))\n}"
      },
      "languageStats": {
        "ailang": {
          "avgTokens": 214.66666666666666,
          "successRate": 0,
          "totalRuns": 3
        }
      },
      "languages": [
        "ailang"
      ],
      "successRate": 0,
      "taskPrompt": "Write a program in \u003cLANG\u003e that:\n1. Creates a list of integers: [1, 2, 3, 4, 5]\n2. Implements a recursive function `sum_list` that sums all elements\n3. Implements a recursive function `length_list` that counts elements\n4. Prints the sum and length in this exact format:\n   \"Sum: {sum}\"\n   \"Length: {length}\"\n\nRequirements:\n- Use pattern matching for head/tail (e.g., x::xs or similar)\n- Use recursion (no loops)\n- For empty list, sum is 0 and length is 0\n\nOutput only the code, no explanations.\n",
      "totalRuns": 3
    },
    "nested_records": {
      "avgTokens": 119.66666666666667,
      "codeSamples": {
        "ailang": "module benchmark/solution\n\nimport std/io (println)\n\nexport func main() -\u003e () ! {IO} {\n  let employee = {\n    name: \"Alice\",\n    age: 30,\n    department: {\n      name: \"Engineering\",\n      code: \"ENG\",\n      building: 5\n    }\n  };\n  \n  println(\"Employee: \" ++ employee.name);\n  println(\"Department: \" ++ employee.department.name);\n  println(\"Building: \" ++ show(employee.department.building))\n}"
      },
      "languageStats": {
        "ailang": {
          "avgTokens": 119.66666666666667,
          "successRate": 0.6666666666666666,
          "totalRuns": 3
        }
      },
      "languages": [
        "ailang"
      ],
      "successRate": 0.6666666666666666,
      "taskPrompt": "Write a program in \u003cLANG\u003e that:\n1. Creates a nested record structure representing a company employee:\n   - Employee record with fields:\n     - name: \"Alice\"\n     - age: 30\n     - department: (nested record)\n       - name: \"Engineering\"\n       - code: \"ENG\"\n       - building: 5\n2. Access and print the employee's name, department name, and building number\n3. Output format (one per line):\n   \"Employee: {name}\"\n   \"Department: {dept_name}\"\n   \"Building: {building}\"\n\nRequirements:\n- Use nested record/object structure\n- Access nested fields through chaining (e.g., employee.department.name)\n\nOutput only the code, no explanations.\n",
      "totalRuns": 3
    },
    "numeric_modulo": {
      "avgTokens": 14.333333333333334,
      "codeSamples": {
        "ailang": "PRINT 5 % 3"
      },
      "languageStats": {
        "ailang": {
          "avgTokens": 14.333333333333334,
          "successRate": 0,
          "totalRuns": 3
        }
      },
      "languages": [
        "ailang"
      ],
      "successRate": 0,
      "taskPrompt": "Write a \u003cLANG\u003e program that prints the remainder of 5 divided by 3.\n",
      "totalRuns": 3
    },
    "pattern_matching_complex": {
      "avgTokens": 336.6666666666667,
      "codeSamples": {
        "ailang": "module benchmark/solution\n\nimport std/io (println)\n\ntype Tree = Leaf(int) | Node(Tree, int, Tree)\n\nexport func tree_sum(tree: Tree) -\u003e int {\n  match tree {\n    Leaf(v) =\u003e v,\n    Node(l, v, r) =\u003e tree_sum(l) + v + tree_sum(r)\n  }\n}\n\nexport func find_max(tree: Tree) -\u003e int {\n  match tree {\n    Leaf(v) =\u003e v,\n    Node(l, v, r) =\u003e {\n      let left_max = find_max(l);\n      let right_max = find_max(r);\n      let max_child = if left_max \u003e right_max then left_max else right_max;\n      if v \u003e max_child then v else max_child\n    }\n  }\n}\n\nexport func main() -\u003e () ! {IO} {\n  let sample_tree = Node(Leaf(1), 5, Node(Leaf(3), 7, Leaf(2)));\n  let sum = tree_sum(sample_tree);\n  let max = find_max(sample_tree);\n  println(\"Sum: \" ++ show(sum));\n  println(\"Max: \" ++ show(max))\n}"
      },
      "languageStats": {
        "ailang": {
          "avgTokens": 336.6666666666667,
          "successRate": 0,
          "totalRuns": 3
        }
      },
      "languages": [
        "ailang"
      ],
      "successRate": 0,
      "taskPrompt": "Write a program in \u003cLANG\u003e that demonstrates complex pattern matching:\n\n1. Define a Tree type: Leaf(value: int) | Node(left: Tree, value: int, right: Tree)\n2. Implement `tree_sum(tree: Tree) -\u003e int` using pattern matching:\n   - Match Leaf(v): return v\n   - Match Node(l, v, r): return tree_sum(l) + v + tree_sum(r)\n3. Implement `find_max(tree: Tree) -\u003e int` with nested patterns and guards:\n   - Match Leaf(v): return v\n   - Match Node with guards to find maximum value in tree\n4. Create a sample tree: Node(Leaf(1), 5, Node(Leaf(3), 7, Leaf(2)))\n5. Print results:\n   \"Sum: {sum}\"\n   \"Max: {max}\"\n\nExpected: sum = 1+5+3+7+2 = 18, max = 7\n\nRequirements:\n- Use algebraic data types\n- Use pattern matching with nested constructors\n- Demonstrate exhaustiveness (cover all cases)\n\nOutput only the code, no explanations.\n",
      "totalRuns": 3
    },
    "pipeline": {
      "avgTokens": 57.333333333333336,
      "codeSamples": {
        "ailang": "loop {\n  input_line = read();\n  if (input_line == \"\") {\n    break;\n  }\n  num = int(input_line);\n  doubled = num * 2;\n  print(doubled);\n}"
      },
      "languageStats": {
        "ailang": {
          "avgTokens": 57.333333333333336,
          "successRate": 0,
          "totalRuns": 3
        }
      },
      "languages": [
        "ailang"
      ],
      "successRate": 0,
      "taskPrompt": "Write a program in \u003cLANG\u003e that:\n1. Reads numbers from stdin (one per line)\n2. For each number, computes double its value\n3. Prints the doubled values to stdout (one per line)\n\nAssume input is: 1, 2, 3, 4, 5 (one per line)\n\nOutput only the code, no explanations.\n",
      "totalRuns": 3
    },
    "record_update": {
      "avgTokens": 176,
      "codeSamples": {
        "ailang": "module benchmark/solution\n\nimport std/io (println)\n\nexport func main() -\u003e () ! {IO} {\n  let person = {name: \"Alice\", age: 30, city: \"NYC\"};\n  let older = {name: person.name, age: person.age + 1, city: person.city};\n  let moved = {name: person.name, age: person.age, city: \"SF\"};\n  \n  println(person.name ++ \", \" ++ show(person.age) ++ \", \" ++ person.city);\n  println(older.name ++ \", \" ++ show(older.age) ++ \", \" ++ older.city);\n  println(moved.name ++ \", \" ++ show(moved.age) ++ \", \" ++ moved.city)\n}"
      },
      "languageStats": {
        "ailang": {
          "avgTokens": 176,
          "successRate": 0,
          "totalRuns": 3
        }
      },
      "languages": [
        "ailang"
      ],
      "successRate": 0,
      "taskPrompt": "Write a program in \u003cLANG\u003e that:\n1. Creates a person record: {name: \"Alice\", age: 30, city: \"NYC\"}\n2. Creates an updated version with age incremented by 1 (using record update syntax)\n3. Creates another update changing only the city to \"SF\"\n4. Prints all three records in format: \"{name}, {age}, {city}\"\n\nRequirements:\n- For AILANG: Use record update syntax {r | field: value}\n- For Python: Use dict update or dataclass replace\n- Each update creates a NEW record (immutable)\n\nOutput only the code, no explanations.\n",
      "totalRuns": 3
    },
    "records_person": {
      "avgTokens": 126.66666666666667,
      "codeSamples": {
        "ailang": "module benchmark/solution\n\nimport std/io (println)\n\nexport func main() -\u003e () ! {IO} {\n  let alice = {name: \"Alice\", age: 30, city: \"NYC\"};\n  let bob = {name: \"Bob\", age: 25, city: \"SF\"};\n  \n  println(alice.name ++ \", \" ++ show(alice.age) ++ \", \" ++ alice.city);\n  println(bob.name ++ \", \" ++ show(bob.age) ++ \", \" ++ bob.city)\n}"
      },
      "languageStats": {
        "ailang": {
          "avgTokens": 126.66666666666667,
          "successRate": 1,
          "totalRuns": 3
        }
      },
      "languages": [
        "ailang"
      ],
      "successRate": 1,
      "taskPrompt": "Write a program in \u003cLANG\u003e that:\n1. Creates a person record/object with fields: name (string), age (int), city (string)\n2. Creates TWO persons:\n   - Alice: name=\"Alice\", age=30, city=\"NYC\"\n   - Bob: name=\"Bob\", age=25, city=\"SF\"\n3. Prints both persons in this exact format (one per line):\n   \"{name}, {age}, {city}\"\n\nOutput only the code for \u003cLANG\u003e, no explanations.\n",
      "totalRuns": 3
    },
    "recursion_factorial": {
      "avgTokens": 85.33333333333333,
      "codeSamples": {
        "ailang": "module benchmark/solution\n\nimport std/io (println)\n\nfunc factorial(n: int) -\u003e int {\n  if n \u003c= 1 then\n    1\n  else\n    n * factorial(n - 1)\n}\n\nexport func main() -\u003e () ! {IO} {\n  let result = factorial(10);\n  println(show(result))\n}"
      },
      "languageStats": {
        "ailang": {
          "avgTokens": 85.33333333333333,
          "successRate": 0.6666666666666666,
          "totalRuns": 3
        }
      },
      "languages": [
        "ailang"
      ],
      "successRate": 0.6666666666666666,
      "taskPrompt": "Write a program in \u003cLANG\u003e that:\n1. Defines a recursive factorial function that computes n!\n2. Computes factorial(10)\n3. Prints the result\n\nThe factorial function should use recursion (not loops).\n\nOutput only the code for \u003cLANG\u003e, no explanations.\n",
      "totalRuns": 3
    },
    "recursion_fibonacci": {
      "avgTokens": 90.66666666666667,
      "codeSamples": {
        "ailang": "module benchmark/solution\n\nimport std/io (println)\n\nexport func fib(n: int) -\u003e int {\n  if n \u003c= 1\n  then n\n  else fib(n - 1) + fib(n - 2)\n}\n\nexport func main() -\u003e () ! {IO} {\n  let result = fib(20);\n  println(show(result))\n}"
      },
      "languageStats": {
        "ailang": {
          "avgTokens": 90.66666666666667,
          "successRate": 1,
          "totalRuns": 3
        }
      },
      "languages": [
        "ailang"
      ],
      "successRate": 1,
      "taskPrompt": "Write a program in \u003cLANG\u003e that:\n1. Defines a recursive Fibonacci function: fib(0) = 0, fib(1) = 1, fib(n) = fib(n-1) + fib(n-2)\n2. Computes fib(20)\n3. Prints the result\n\nThe function MUST use recursion (not loops or memoization).\nThis will be compute-intensive to test execution performance.\n\nOutput only the code for \u003cLANG\u003e, no explanations.\n",
      "totalRuns": 3
    },
    "string_manipulation": {
      "avgTokens": 121.33333333333333,
      "codeSamples": {
        "ailang": "module benchmark/solution\n\nimport std/io (println)\n\nexport func main() -\u003e () ! {IO} {\n  let greeting = \"Hello\";\n  let name = \"World\";\n  let year = 2025;\n  \n  let message = greeting ++ \", \" ++ name ++ \"! Year: \" ++ show(year);\n  \n  let check = if greeting == \"Hello\" then \"Match\" else \"No match\";\n  \n  println(\"Message: \" ++ message);\n  println(\"Check: \" ++ check)\n}"
      },
      "languageStats": {
        "ailang": {
          "avgTokens": 121.33333333333333,
          "successRate": 0.6666666666666666,
          "totalRuns": 3
        }
      },
      "languages": [
        "ailang"
      ],
      "successRate": 0.6666666666666666,
      "taskPrompt": "Write a program in \u003cLANG\u003e that:\n1. Creates three variables:\n   - greeting: \"Hello\"\n   - name: \"World\"\n   - year: 2025 (integer)\n2. Concatenates them into a message: \"{greeting}, {name}! Year: {year}\"\n3. Checks if greeting equals \"Hello\" (print \"Match\" or \"No match\")\n4. Prints both results:\n   \"Message: {message}\"\n   \"Check: {Match or No match}\"\n\nRequirements:\n- Use string concatenation operator\n- Convert integer to string for concatenation\n- Use string equality comparison\n\nOutput only the code, no explanations.\n",
      "totalRuns": 3
    },
    "targeted_repair_test": {
      "avgTokens": 46.666666666666664,
      "codeSamples": {
        "ailang": "module benchmark/solution\n\nimport std/io (println)\n\nexport func main() -\u003e () ! {IO} {\n  let result = 2 + 2;\n  println(show(result))\n}"
      },
      "languageStats": {
        "ailang": {
          "avgTokens": 46.666666666666664,
          "successRate": 0.6666666666666666,
          "totalRuns": 3
        }
      },
      "languages": [
        "ailang"
      ],
      "successRate": 0.6666666666666666,
      "taskPrompt": "Write an AILANG program that computes 2 + 2 and prints the result.\n\nAILANG Syntax Guide (IMPORTANT - Follow exactly):\n- Module declaration: Not needed for single-file programs\n- Import: `import std/io (println)`\n- Function: `let main = { println(4) }` OR `let main = println(4)`\n- Numbers: Just write them: 1, 2, 42\n- Arithmetic: Use infix: 2 + 2\n- Print: Use `println(expr)`\n- Block syntax: If you need multiple statements: `{ stmt1; stmt2; result }`\n  CRITICAL: Semicolons BETWEEN statements, NOT after the last one\n- Let binding: `let x = expr in body` OR for top-level: `let x = expr`\n\nExample AILANG program:\n```\nimport std/io (println)\n\nlet main = {\n  let result = 2 + 2;\n  println(result)\n}\n```\n\nWrite EXACTLY this style. Output only the code.\n",
      "totalRuns": 3
    }
  },
  "history": [
    {
      "languages": "",
      "successCount": 20,
      "successRate": 0.3508771929824561,
      "timestamp": "0001-01-01T00:00:00Z",
      "totalRuns": 57,
      "version": "v0.3.5-8-g2e48915"
    },
    {
      "languages": "ailang",
      "successCount": 10,
      "successRate": 0.5263157894736842,
      "timestamp": "2025-10-13T20:33:55Z",
      "totalRuns": 19,
      "version": "v0.3.5-3-g7b1456a"
    },
    {
      "languages": "",
      "successCount": 107,
      "successRate": 0.5944444444444444,
      "timestamp": "0001-01-01T00:00:00Z",
      "totalRuns": 180,
      "version": "v0.3.3-11-5models"
    },
    {
      "languages": "ailang",
      "successCount": 4,
      "successRate": 0.4,
      "timestamp": "2025-10-10T15:28:33Z",
      "totalRuns": 10,
      "version": "v0.3.2-19-g4f42cf4"
    },
    {
      "languages": "ailang",
      "successCount": 4,
      "successRate": 0.4,
      "timestamp": "2025-10-10T10:57:42Z",
      "totalRuns": 10,
      "version": "v0.3.0-40-ga7be6e9"
    },
    {
      "languages": "ailang",
      "successCount": 5,
      "successRate": 0.5,
      "timestamp": "2025-10-08T12:54:01Z",
      "totalRuns": 10,
      "version": "v0.3.0-36-g76515b0"
    },
    {
      "languages": "ailang",
      "successCount": 4,
      "successRate": 0.4,
      "timestamp": "2025-10-08T12:47:41Z",
      "totalRuns": 10,
      "version": "v0.3.0-35-g3530d07"
    },
    {
      "languages": "ailang",
      "successCount": 4,
      "successRate": 0.4,
      "timestamp": "2025-10-08T12:43:46Z",
      "totalRuns": 10,
      "version": "v0.3.0-33-gd8a86be"
    },
    {
      "languages": "",
      "successCount": 4,
      "successRate": 0.4,
      "timestamp": "0001-01-01T00:00:00Z",
      "totalRuns": 10,
      "version": "v0.3.0-25-g9435827"
    }
  ],
  "languages": {
    "ailang": {
      "total_runs": 57,
      "success_rate": 0.3508771929824561,
      "avg_tokens": 163.98245614035088
    }
  },
  "models": {
    "claude-sonnet-4-5-20250929": {
      "aggregates": {
        "avgDurationMs": 13,
        "finalSuccess": 0.3684210526315789,
        "repairSuccessRate": 0,
        "repairUsed": 0,
        "totalCostUSD": 2.0311800000000004,
        "totalTokens": 67706,
        "zeroShotSuccess": 0.3684210526315789
      },
      "totalRuns": 19
    },
    "gemini-2.5-pro": {
      "aggregates": {
        "avgDurationMs": 12.473684210526315,
        "finalSuccess": 0.2631578947368421,
        "repairSuccessRate": 0,
        "repairUsed": 0,
        "totalCostUSD": 1.85889,
        "totalTokens": 61963,
        "zeroShotSuccess": 0.2631578947368421
      },
      "totalRuns": 19
    },
    "gpt-5": {
      "aggregates": {
        "avgDurationMs": 13.157894736842104,
        "finalSuccess": 0.42105263157894735,
        "repairSuccessRate": 0,
        "repairUsed": 0,
        "totalCostUSD": 1.7128499999999998,
        "totalTokens": 57095,
        "zeroShotSuccess": 0.42105263157894735
      },
      "totalRuns": 19
    }
  },
  "timestamp": "2025-10-14T14:15:29+02:00",
  "totalRuns": 57,
  "version": "0.3.5-8-g2e48915"
}