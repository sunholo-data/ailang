{
  "aggregates": {
    "avgDurationMs": 27.38421052631579,
    "finalSuccess": 0.6421052631578947,
    "repairSuccessRate": 0,
    "repairUsed": 0,
    "totalCostUSD": 0.6091448000000006,
    "totalTokens": 333771,
    "zeroShotSuccess": 0.6421052631578947
  },
  "benchmarks": {
    "adt_option": {
      "avgTokens": 203,
      "codeSamples": {
        "ailang": "module benchmark/solution\n\nimport std/io (println)\n\ntype Option[a] = Some(a) | None\n\nexport func safeDivide(a: float, b: float) -\u003e Option[float] {\n  if b == 0.0\n  then None\n  else Some(a / b)\n}\n\nexport func printResult(result: Option[float]) -\u003e () ! {IO} {\n  match result {\n    Some(v) =\u003e println(\"Result: \" ++ show(v)),\n    None =\u003e println(\"Error: Division by zero\")\n  }\n}\n\nexport func main() -\u003e () ! {IO} {\n  let r1 = safeDivide(10.0, 2.0);\n  printResult(r1);\n  let r2 = safeDivide(10.0, 0.0);\n  printResult(r2)\n}",
        "python": "import typing\nfrom dataclasses import dataclass\n\nT = typing.TypeVar('T')\n\nclass Option(typing.Generic[T]):\n    pass\n\n@dataclass(frozen=True)\nclass Some(Option[T]):\n    value: T\n\n@dataclass(frozen=True)\nclass Nothing(Option[T]):\n    pass\n\nNONE = Nothing()\n\ndef safe_division(dividend: float, divisor: float) -\u003e Option[float]:\n    if divisor == 0:\n        return NONE\n    return Some(dividend / divisor)\n\ndef main():\n    # Test case 1: divide(10, 2)\n    result1 = safe_division(10, 2)\n    if isinstance(result1, Some):\n        print(f\"Result: {result1.value}\")\n    elif isinstance(result1, Nothing):\n        print(\"Error: Division by zero\")\n\n    # Test case 2: divide(10, 0)\n    result2 = safe_division(10, 0)\n    if isinstance(result2, Some):\n        print(f\"Result: {result2.value}\")\n    elif isinstance(result2, Nothing):\n        print(\"Error: Division by zero\")\n\nif __name__ == \"__main__\":\n    main()"
      },
      "languageStats": {
        "ailang": {
          "avgTokens": 196.8,
          "successRate": 1,
          "totalRuns": 5
        },
        "python": {
          "avgTokens": 209.2,
          "successRate": 1,
          "totalRuns": 5
        }
      },
      "languages": [
        "ailang",
        "python"
      ],
      "successRate": 1,
      "taskPrompt": "Write a program in \u003cLANG\u003e that:\n1. Defines an Option type (Some/None, or equivalent)\n2. Implements a safe division function that returns Option[Float]\n   - Returns Some(result) if divisor is non-zero\n   - Returns None if divisor is zero\n3. Tests the function with: divide(10, 2) and divide(10, 0)\n4. Prints the results:\n   - For Some(value): print \"Result: {value}\"\n   - For None: print \"Error: Division by zero\"\n\nOutput only the code, no explanations.\n",
      "totalRuns": 10
    },
    "cli_args": {
      "avgTokens": 128.6,
      "codeSamples": {
        "ailang": "if len(args) \u003c 2 {\n    print(\"Error: No filename provided.\")\n    return\n}\n\nlet filename = args[1]\nlet file_handle = open(filename, \"r\")\n\nif file_handle == null {\n    print(\"Error: Could not open file '\" + filename + \"'\")\n    return\n}\n\nlet total_sum = 0\nlet current_line = read_line(file_handle)\n\nwhile current_line != null {\n    let number = to_number(current_line)\n    total_sum = total_sum + number\n    current_line = read_line(file_handle)\n}\n\nclose(file_handle)\nprint(total_sum)",
        "python": "import sys\n\nfilename = sys.argv[1]\ntotal = 0\n\nwith open(filename, 'r') as f:\n    for line in f:\n        total += float(line.strip())\n\nprint(total)"
      },
      "languageStats": {
        "ailang": {
          "avgTokens": 128.2,
          "successRate": 0,
          "totalRuns": 5
        },
        "python": {
          "avgTokens": 129,
          "successRate": 0,
          "totalRuns": 5
        }
      },
      "languages": [
        "ailang",
        "python"
      ],
      "successRate": 0,
      "taskPrompt": "Write a program in \u003cLANG\u003e that:\n1. Takes a filename as a command-line argument\n2. Reads the file contents (assume it contains numbers, one per line)\n3. Computes the sum of all numbers\n4. Prints the sum\n\nOutput only the code, no explanations.\n",
      "totalRuns": 10
    },
    "error_handling": {
      "avgTokens": 552.1,
      "codeSamples": {
        "ailang": "module benchmark/solution\n\nimport std/io (println)\n\ntype Result[a] = Ok(a) | Err(string)\n\nfunc isDigit(c: char) -\u003e bool {\n  c \u003e= '0' \u0026\u0026 c \u003c= '9'\n}\n\nfunc digitToInt(c: char) -\u003e int {\n  match c {\n    '0' =\u003e 0, '1' =\u003e 1, '2' =\u003e 2, '3' =\u003e 3, '4' =\u003e 4,\n    '5' =\u003e 5, '6' =\u003e 6, '7' =\u003e 7, '8' =\u003e 8, '9' =\u003e 9,\n    _ =\u003e -1\n  }\n}\n\nfunc parseNat(chars: [char], acc: int) -\u003e Result[int] {\n  match chars {\n    [] =\u003e Ok(acc),\n    Cons(h, t) =\u003e\n      if isDigit(h) then\n        parseNat(t, acc * 10 + digitToInt(h))\n      else\n        Err(\"Invalid integer\")\n  }\n}\n\nexport func parse_int(s: string) -\u003e Result[int] {\n  let chars = stringToList(s);\n  match chars {\n    [] =\u003e Err(\"Invalid integer\"),\n    Cons('-', t) =\u003e\n      if t == [] then\n        Err(\"Invalid integer\")\n      else\n        match parseNat(t, 0) {\n          Ok(n) =\u003e Ok(-n),\n          Err(msg) =\u003e Err(msg)\n        },\n    _ =\u003e parseNat(chars, 0)\n  }\n}\n\nexport func divide_safe(a: int, b: int) -\u003e Result[int] {\n  if b == 0 then\n    Err(\"Division by zero\")\n  else\n    Ok(a / b)\n}\n\nfunc bind[a, b](res: Result[a], f: func(a) -\u003e Result[b]) -\u003e Result[b] {\n  match res {\n    Ok(val) =\u003e f(val),\n    Err(msg) =\u003e Err(msg)\n  }\n}\n\nfunc print_result(res: Result[int]) -\u003e () ! {IO} {\n  match res {\n    Ok(val) =\u003e println(\"Result: \" ++ show(val)),\n    Err(msg) =\u003e println(\"Error: \" ++ msg)\n  }\n}\n\nfunc run_test_case(s: string, divisor: int) -\u003e () ! {IO} {\n  let result = bind(parse_int(s), func(n) { divide_safe(n, divisor) });\n  print_result(result);\n}\n\nexport func main() -\u003e () ! {IO} {\n  run_test_case(\"10\", 2);\n  run_test_case(\"10\", 0);\n  run_test_case(\"abc\", 2);\n}",
        "python": "import sys\nfrom dataclasses import dataclass\nfrom typing import Generic, TypeVar, Union\n\nT = TypeVar('T')\n\n@dataclass(frozen=True)\nclass Ok(Generic[T]):\n    value: T\n\n@dataclass(frozen=True)\nclass Err:\n    message: str\n\nResult = Union[Ok[T], Err]\n\ndef parse_int(s: str) -\u003e Result[int]:\n    \"\"\"Parses a string into an integer, returning a Result.\"\"\"\n    try:\n        return Ok(int(s))\n    except ValueError:\n        return Err(\"Invalid integer\")\n\ndef divide_safe(a: int, b: int) -\u003e Result[int]:\n    \"\"\"Performs integer division, returning a Result.\"\"\"\n    if b == 0:\n        return Err(\"Division by zero\")\n    return Ok(a // b)\n\ndef run_operation(s: str, divisor: int):\n    \"\"\"Chains parsing and division, then prints the outcome.\"\"\"\n    parse_result = parse_int(s)\n\n    final_result: Result[int]\n    if isinstance(parse_result, Ok):\n        final_result = divide_safe(parse_result.value, divisor)\n    else:\n        final_result = parse_result\n\n    if isinstance(final_result, Ok):\n        print(f\"Result: {final_result.value}\")\n    else:\n        print(f\"Error: {final_result.message}\")\n\ndef run_operation_with_match(s: str, divisor: int):\n    \"\"\"Chains parsing and division using match, then prints the outcome.\"\"\"\n    parse_result = parse_int(s)\n\n    final_result: Result[int]\n    match parse_result:\n        case Ok(value):\n            final_result = divide_safe(value, divisor)\n        case Err(message):\n            final_result = Err(message)\n\n    match final_result:\n        case Ok(value):\n            print(f\"Result: {value}\")\n        case Err(message):\n            print(f\"Error: {message}\")\n\n\ndef main():\n    # Using match statement (Python 3.10+)\n    if sys.version_info \u003e= (3, 10):\n        run_operation_with_match(\"10\", 2)\n        run_operation_with_match(\"10\", 0)\n        run_operation_with_match(\"abc\", 2)\n    else:\n        # Fallback for older Python versions\n        run_operation(\"10\", 2)\n        run_operation(\"10\", 0)\n        run_operation(\"abc\", 2)\n\n\nif __name__ == \"__main__\":\n    main()"
      },
      "languageStats": {
        "ailang": {
          "avgTokens": 633.8,
          "successRate": 0,
          "totalRuns": 5
        },
        "python": {
          "avgTokens": 470.4,
          "successRate": 1,
          "totalRuns": 5
        }
      },
      "languages": [
        "ailang",
        "python"
      ],
      "successRate": 0.5,
      "taskPrompt": "Write a program in \u003cLANG\u003e that:\n1. Defines a Result type with Ok(value) and Err(message) variants\n2. Implements a function `parse_int(s: string) -\u003e Result[int]`:\n   - Returns Ok(n) if string can be parsed as integer\n   - Returns Err(\"Invalid integer\") otherwise\n3. Implements a function `divide_safe(a: int, b: int) -\u003e Result[int]`:\n   - Returns Ok(a/b) if b != 0\n   - Returns Err(\"Division by zero\") if b == 0\n4. Chains operations: parse_int(\"10\") -\u003e divide_safe(result, 2)\n5. Prints the final result:\n   - For Ok(value): \"Result: {value}\"\n   - For Err(msg): \"Error: {msg}\"\n\nTest cases:\n- parse_int(\"10\") then divide by 2 -\u003e \"Result: 5\"\n- parse_int(\"10\") then divide by 0 -\u003e \"Error: Division by zero\"\n- parse_int(\"abc\") -\u003e \"Error: Invalid integer\"\n\nOutput only the code, no explanations.\n",
      "totalRuns": 10
    },
    "fizzbuzz": {
      "avgTokens": 119.2,
      "codeSamples": {
        "ailang": "module benchmark/solution\n\nimport std/io (println)\n\nfunc fizzBuzzRec(n: int) -\u003e () ! {IO} {\n  if n \u003e 100 then\n    ()\n  else if n % 15 == 0 then {\n    println(\"FizzBuzz\");\n    fizzBuzzRec(n + 1)\n  } else if n % 3 == 0 then {\n    println(\"Fizz\");\n    fizzBuzzRec(n + 1)\n  } else if n % 5 == 0 then {\n    println(\"Buzz\");\n    fizzBuzzRec(n + 1)\n  } else {\n    println(show(n));\n    fizzBuzzRec(n + 1)\n  }\n}\n\nexport func main() -\u003e () ! {IO} {\n  fizzBuzzRec(1)\n}",
        "python": "for i in range(1, 101):\n    if i % 15 == 0:\n        print(\"FizzBuzz\")\n    elif i % 3 == 0:\n        print(\"Fizz\")\n    elif i % 5 == 0:\n        print(\"Buzz\")\n    else:\n        print(i)"
      },
      "languageStats": {
        "ailang": {
          "avgTokens": 163.2,
          "successRate": 1,
          "totalRuns": 5
        },
        "python": {
          "avgTokens": 75.2,
          "successRate": 1,
          "totalRuns": 5
        }
      },
      "languages": [
        "ailang",
        "python"
      ],
      "successRate": 1,
      "taskPrompt": "Write a program in \u003cLANG\u003e that prints FizzBuzz from 1 to 100.\n\nRequirements:\n- Print numbers 1-100, one per line\n- For multiples of 3, print \"Fizz\" instead of the number\n- For multiples of 5, print \"Buzz\" instead of the number\n- For multiples of both 3 and 5, print \"FizzBuzz\" instead of the number\n\nOutput only the code, no explanations.\n",
      "totalRuns": 10
    },
    "float_eq": {
      "avgTokens": 21,
      "codeSamples": {
        "ailang": "print(0.0 == 0.0)",
        "python": "print(0.0 == 0.0)"
      },
      "languageStats": {
        "ailang": {
          "avgTokens": 20.6,
          "successRate": 0,
          "totalRuns": 5
        },
        "python": {
          "avgTokens": 21.4,
          "successRate": 0.6,
          "totalRuns": 5
        }
      },
      "languages": [
        "ailang",
        "python"
      ],
      "successRate": 0.3,
      "taskPrompt": "Write a \u003cLANG\u003e program that evaluates (0.0 == 0.0) and prints true or false.\n",
      "totalRuns": 10
    },
    "higher_order_functions": {
      "avgTokens": 161.1,
      "codeSamples": {
        "ailang": "module benchmark/solution\n\nimport std/io (println)\n\nexport func compose[a, b, c](f: func(b) -\u003e c, g: func(a) -\u003e b) -\u003e func(a) -\u003e c {\n  func(x: a) -\u003e c { f(g(x)) }\n}\n\nexport func add(x: int, y: int) -\u003e int {\n  x + y\n}\n\nexport func multiply(x: int, y: int) -\u003e int {\n  x * y\n}\n\nexport func main() -\u003e () ! {IO} {\n  let add5 = func(n: int) -\u003e int { add(5, n) };\n\n  let double = func(n: int) -\u003e int { multiply(2, n) };\n\n  let add5_then_double = compose(double, add5);\n\n  let result = add5_then_double(10);\n\n  println(\"Result: \" ++ show(result));\n}",
        "python": "from functools import partial\n\ndef compose(f, g):\n    return lambda x: f(g(x))\n\ndef add(x, y):\n    return x + y\n\ndef multiply(x, y):\n    return x * y\n\nadd5 = partial(add, 5)\n\ndouble = partial(multiply, 2)\n\nadd5_then_double = compose(double, add5)\n\nresult = add5_then_double(10)\n\nprint(f\"Result: {result}\")"
      },
      "languageStats": {
        "ailang": {
          "avgTokens": 210,
          "successRate": 0,
          "totalRuns": 5
        },
        "python": {
          "avgTokens": 112.2,
          "successRate": 1,
          "totalRuns": 5
        }
      },
      "languages": [
        "ailang",
        "python"
      ],
      "successRate": 0.5,
      "taskPrompt": "Write a program in \u003cLANG\u003e that demonstrates higher-order functions:\n\n1. Implement `compose(f, g)` - returns a function that computes f(g(x))\n2. Implement `add(x, y)` - adds two numbers\n3. Implement `multiply(x, y)` - multiplies two numbers\n4. Create `add5 = add(5, _)` using partial application (or lambda)\n5. Create `double = multiply(2, _)` using partial application (or lambda)\n6. Create `add5_then_double = compose(double, add5)`\n7. Apply the composed function to 10\n8. Print the result: \"Result: {value}\"\n\nExpected computation: (10 + 5) * 2 = 30\n\nRequirements:\n- Use first-class functions\n- Demonstrate function composition\n- Show currying or partial application\n\nOutput only the code, no explanations.\n",
      "totalRuns": 10
    },
    "json_parse": {
      "avgTokens": 81.4,
      "codeSamples": {
        "ailang": "let json_data = '[{\"name\":\"Alice\",\"age\":30},{\"name\":\"Bob\",\"age\":25},{\"name\":\"Charlie\",\"age\":35}]';\nlet people = json.parse(json_data);\n\nfor person in people {\n    if person.age \u003e= 30 {\n        print(person.name);\n    }\n}",
        "python": "data = [{\"name\": \"Alice\", \"age\": 30}, {\"name\": \"Bob\", \"age\": 25}, {\"name\": \"Charlie\", \"age\": 35}]\n\nfor person in data:\n    if person[\"age\"] \u003e= 30:\n        print(person[\"name\"])"
      },
      "languageStats": {
        "ailang": {
          "avgTokens": 84.4,
          "successRate": 0,
          "totalRuns": 5
        },
        "python": {
          "avgTokens": 78.4,
          "successRate": 1,
          "totalRuns": 5
        }
      },
      "languages": [
        "ailang",
        "python"
      ],
      "successRate": 0.5,
      "taskPrompt": "Write a program in \u003cLANG\u003e that:\n1. Parses this JSON array: [{\"name\":\"Alice\",\"age\":30},{\"name\":\"Bob\",\"age\":25},{\"name\":\"Charlie\",\"age\":35}]\n2. Filters to keep only people aged 30 or older\n3. Prints the names, one per line\n\nOutput only the code, no explanations.\n",
      "totalRuns": 10
    },
    "list_comprehension": {
      "avgTokens": 277.3,
      "codeSamples": {
        "ailang": "module benchmark/solution\n\nimport std/io (println)\n\ntype List[a] = Cons(a, List[a]) | Nil\n\nfunc map[a, b](f: func(a) -\u003e b, xs: List[a]) -\u003e List[b] {\n  match xs {\n    Nil =\u003e Nil,\n    Cons(h, t) =\u003e Cons(f(h), map(f, t))\n  }\n}\n\nfunc filter[a](p: func(a) -\u003e bool, xs: List[a]) -\u003e List[a] {\n  match xs {\n    Nil =\u003e Nil,\n    Cons(h, t) =\u003e\n      if p(h)\n      then Cons(h, filter(p, t))\n      else filter(p, t)\n  }\n}\n\nfunc foldl[a, b](f: func(b, a) -\u003e b, acc: b, xs: List[a]) -\u003e b {\n  match xs {\n    Nil =\u003e acc,\n    Cons(h, t) =\u003e foldl(f, f(acc, h), t)\n  }\n}\n\nexport func main() -\u003e () ! {IO} {\n  let numbers = Cons(1, Cons(2, Cons(3, Cons(4, Cons(5, Cons(6, Cons(7, Cons(8, Cons(9, Cons(10, Nil))))))))));\n\n  let isEven = func(n: int) -\u003e bool { n % 2 == 0 };\n  let square = func(n: int) -\u003e int { n * n };\n  let add = func(a: int, b: int) -\u003e int { a + b };\n\n  let evens = filter(isEven, numbers);\n  let squaresOfEvens = map(square, evens);\n  let result = foldl(add, 0, squaresOfEvens);\n\n  println(\"Sum of squares of evens: \" ++ show(result));\n}",
        "python": "def main():\n    # 1. Creates a list of integers\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n    # 2. Filters the list to keep only even numbers\n    evens = [n for n in numbers if n % 2 == 0]\n\n    # 3. Maps the filtered list by squaring each number\n    squares_of_evens = [n**2 for n in evens]\n\n    # 4. Computes the sum of the resulting list\n    result = sum(squares_of_evens)\n\n    # 5. Prints the result\n    print(f\"Sum of squares of evens: {result}\")\n\n\nif __name__ == \"__main__\":\n    main()"
      },
      "languageStats": {
        "ailang": {
          "avgTokens": 438.6,
          "successRate": 0,
          "totalRuns": 5
        },
        "python": {
          "avgTokens": 116,
          "successRate": 0.8,
          "totalRuns": 5
        }
      },
      "languages": [
        "ailang",
        "python"
      ],
      "successRate": 0.4,
      "taskPrompt": "Write a program in \u003cLANG\u003e that:\n1. Creates a list of integers: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n2. Filters the list to keep only even numbers\n3. Maps the filtered list by squaring each number\n4. Computes the sum of the resulting list\n5. Prints the result: \"Sum of squares of evens: {result}\"\n\nRequirements:\n- For Python: Use list comprehensions or map/filter\n- For AILANG: Implement map/filter/fold as recursive functions\n- Show intermediate results if helpful for debugging\n\nExpected result: 2^2 + 4^2 + 6^2 + 8^2 + 10^2 = 4 + 16 + 36 + 64 + 100 = 220\n\nOutput only the code, no explanations.\n",
      "totalRuns": 10
    },
    "list_operations": {
      "avgTokens": 194.3,
      "codeSamples": {
        "ailang": "module benchmark/solution\n\nimport std/io (println)\n\ntype List[a] = Cons(a, List[a]) | Nil\n\nfunc sum_list(list: List[int]) -\u003e int {\n  match list {\n    Nil =\u003e 0,\n    Cons(x, xs) =\u003e x + sum_list(xs)\n  }\n}\n\nfunc length_list[a](list: List[a]) -\u003e int {\n  match list {\n    Nil =\u003e 0,\n    Cons(_, xs) =\u003e 1 + length_list(xs)\n  }\n}\n\nexport func main() -\u003e () ! {IO} {\n  let my_list = Cons(1, Cons(2, Cons(3, Cons(4, Cons(5, Nil)))));\n  let list_sum = sum_list(my_list);\n  let list_length = length_list(my_list);\n  println(\"Sum: \" ++ show(list_sum));\n  println(\"Length: \" ++ show(list_length))\n}",
        "python": "def sum_list(lst):\n    match lst:\n        case []:\n            return 0\n        case [head, *tail]:\n            return head + sum_list(tail)\n\ndef length_list(lst):\n    match lst:\n        case []:\n            return 0\n        case [_, *tail]:\n            return 1 + length_list(tail)\n\nlst = [1, 2, 3, 4, 5]\nprint(f\"Sum: {sum_list(lst)}\")\nprint(f\"Length: {length_list(lst)}\")"
      },
      "languageStats": {
        "ailang": {
          "avgTokens": 209.8,
          "successRate": 0,
          "totalRuns": 5
        },
        "python": {
          "avgTokens": 178.8,
          "successRate": 1,
          "totalRuns": 5
        }
      },
      "languages": [
        "ailang",
        "python"
      ],
      "successRate": 0.5,
      "taskPrompt": "Write a program in \u003cLANG\u003e that:\n1. Creates a list of integers: [1, 2, 3, 4, 5]\n2. Implements a recursive function `sum_list` that sums all elements\n3. Implements a recursive function `length_list` that counts elements\n4. Prints the sum and length in this exact format:\n   \"Sum: {sum}\"\n   \"Length: {length}\"\n\nRequirements:\n- Use pattern matching for head/tail (e.g., x::xs or similar)\n- Use recursion (no loops)\n- For empty list, sum is 0 and length is 0\n\nOutput only the code, no explanations.\n",
      "totalRuns": 10
    },
    "nested_records": {
      "avgTokens": 128.7,
      "codeSamples": {
        "ailang": "module benchmark/solution\n\nimport std/io (println)\n\nexport func main() -\u003e () ! {IO} {\n  let employee = {name: \"Alice\", age: 30, department: {name: \"Engineering\", code: \"ENG\", building: 5}};\n  println(\"Employee: \" ++ employee.name);\n  println(\"Department: \" ++ employee.department.name);\n  println(\"Building: \" ++ show(employee.department.building))\n}",
        "python": "from dataclasses import dataclass\n\n@dataclass\nclass Department:\n    name: str\n    code: str\n    building: int\n\n@dataclass\nclass Employee:\n    name: str\n    age: int\n    department: Department\n\ndef main():\n    engineering_dept = Department(\n        name=\"Engineering\",\n        code=\"ENG\",\n        building=5\n    )\n\n    employee = Employee(\n        name=\"Alice\",\n        age=30,\n        department=engineering_dept\n    )\n\n    print(f\"Employee: {employee.name}\")\n    print(f\"Department: {employee.department.name}\")\n    print(f\"Building: {employee.department.building}\")\n\nif __name__ == \"__main__\":\n    main()"
      },
      "languageStats": {
        "ailang": {
          "avgTokens": 115.6,
          "successRate": 1,
          "totalRuns": 5
        },
        "python": {
          "avgTokens": 141.8,
          "successRate": 0.8,
          "totalRuns": 5
        }
      },
      "languages": [
        "ailang",
        "python"
      ],
      "successRate": 0.9,
      "taskPrompt": "Write a program in \u003cLANG\u003e that:\n1. Creates a nested record structure representing a company employee:\n   - Employee record with fields:\n     - name: \"Alice\"\n     - age: 30\n     - department: (nested record)\n       - name: \"Engineering\"\n       - code: \"ENG\"\n       - building: 5\n2. Access and print the employee's name, department name, and building number\n3. Output format (one per line):\n   \"Employee: {name}\"\n   \"Department: {dept_name}\"\n   \"Building: {building}\"\n\nRequirements:\n- Use nested record/object structure\n- Access nested fields through chaining (e.g., employee.department.name)\n\nOutput only the code, no explanations.\n",
      "totalRuns": 10
    },
    "numeric_modulo": {
      "avgTokens": 14.7,
      "codeSamples": {
        "ailang": "print 5 % 3",
        "python": "print(5 % 3)"
      },
      "languageStats": {
        "ailang": {
          "avgTokens": 15.6,
          "successRate": 0,
          "totalRuns": 5
        },
        "python": {
          "avgTokens": 13.8,
          "successRate": 1,
          "totalRuns": 5
        }
      },
      "languages": [
        "ailang",
        "python"
      ],
      "successRate": 0.5,
      "taskPrompt": "Write a \u003cLANG\u003e program that prints the remainder of 5 divided by 3.\n",
      "totalRuns": 10
    },
    "pattern_matching_complex": {
      "avgTokens": 329.7,
      "codeSamples": {
        "ailang": "module benchmark/solution\n\nimport std/io (println)\n\ntype Tree = Leaf(int) | Node(Tree, int, Tree)\n\nexport func tree_sum(t: Tree) -\u003e int {\n  match t {\n    Leaf(v) =\u003e v,\n    Node(l, v, r) =\u003e tree_sum(l) + v + tree_sum(r)\n  }\n}\n\nexport func find_max(t: Tree) -\u003e int {\n  match t {\n    Leaf(v) =\u003e v,\n    Node(Leaf(lv), v, r) if lv \u003e v \u0026\u0026 lv \u003e= find_max(r) =\u003e lv,\n    Node(l, v, Leaf(rv)) if rv \u003e v \u0026\u0026 rv \u003e find_max(l) =\u003e rv,\n    Node(l, v, r) =\u003e {\n      let ml = find_max(l);\n      let mr = find_max(r);\n      if ml \u003e= mr \u0026\u0026 ml \u003e= v then ml else if mr \u003e= v then mr else v\n    }\n  }\n}\n\nexport func main() -\u003e () ! {IO} {\n  let sample = Node(Leaf(1), 5, Node(Leaf(3), 7, Leaf(2)));\n  let s = tree_sum(sample);\n  let m = find_max(sample);\n  println(\"Sum: \" ++ show(s));\n  println(\"Max: \" ++ show(m))\n}",
        "python": "from __future__ import annotations\nfrom dataclasses import dataclass\nfrom typing import Union\n\n@dataclass(frozen=True)\nclass Leaf:\n    value: int\n    __match_args__ = (\"value\",)\n\n@dataclass(frozen=True)\nclass Node:\n    left: 'Tree'\n    value: int\n    right: 'Tree'\n    __match_args__ = (\"left\", \"value\", \"right\")\n\nTree = Union[Leaf, Node]\n\ndef tree_sum(tree: Tree) -\u003e int:\n    match tree:\n        case Leaf(v):\n            return v\n        case Node(l, v, r):\n            return tree_sum(l) + v + tree_sum(r)\n\ndef find_max(tree: Tree) -\u003e int:\n    match tree:\n        case Leaf(v):\n            return v\n        case Node(Leaf(lv), v, Leaf(rv)):\n            return max(lv, v, rv)\n        case Node(Leaf(lv), v, r):\n            return max(lv, v, find_max(r))\n        case Node(l, v, Leaf(rv)):\n            return max(find_max(l), v, rv)\n        case Node(l, v, r):\n            return max(find_max(l), v, find_max(r))\n\ntree = Node(Leaf(1), 5, Node(Leaf(3), 7, Leaf(2)))\n\nprint(f\"Sum: {tree_sum(tree)}\")\nprint(f\"Max: {find_max(tree)}\")"
      },
      "languageStats": {
        "ailang": {
          "avgTokens": 303.8,
          "successRate": 0.8,
          "totalRuns": 5
        },
        "python": {
          "avgTokens": 355.6,
          "successRate": 1,
          "totalRuns": 5
        }
      },
      "languages": [
        "ailang",
        "python"
      ],
      "successRate": 0.9,
      "taskPrompt": "Write a program in \u003cLANG\u003e that demonstrates complex pattern matching:\n\n1. Define a Tree type: Leaf(value: int) | Node(left: Tree, value: int, right: Tree)\n2. Implement `tree_sum(tree: Tree) -\u003e int` using pattern matching:\n   - Match Leaf(v): return v\n   - Match Node(l, v, r): return tree_sum(l) + v + tree_sum(r)\n3. Implement `find_max(tree: Tree) -\u003e int` with nested patterns and guards:\n   - Match Leaf(v): return v\n   - Match Node with guards to find maximum value in tree\n4. Create a sample tree: Node(Leaf(1), 5, Node(Leaf(3), 7, Leaf(2)))\n5. Print results:\n   \"Sum: {sum}\"\n   \"Max: {max}\"\n\nExpected: sum = 1+5+3+7+2 = 18, max = 7\n\nRequirements:\n- Use algebraic data types\n- Use pattern matching with nested constructors\n- Demonstrate exhaustiveness (cover all cases)\n\nOutput only the code, no explanations.\n",
      "totalRuns": 10
    },
    "pipeline": {
      "avgTokens": 59.8,
      "codeSamples": {
        "ailang": "LOOP READ num\n    doubled = num * 2\n    PRINT doubled\nENDLOOP",
        "python": "import sys\n\nfor line in sys.stdin:\n    s = line.strip()\n    if not s:\n        continue\n    try:\n        n = int(s)\n        out = n * 2\n    except ValueError:\n        try:\n            n = float(s)\n            out = n * 2\n        except ValueError:\n            continue\n    if isinstance(out, float) and out.is_integer():\n        print(int(out))\n    else:\n        print(out)"
      },
      "languageStats": {
        "ailang": {
          "avgTokens": 47.8,
          "successRate": 0,
          "totalRuns": 5
        },
        "python": {
          "avgTokens": 71.8,
          "successRate": 0,
          "totalRuns": 5
        }
      },
      "languages": [
        "ailang",
        "python"
      ],
      "successRate": 0,
      "taskPrompt": "Write a program in \u003cLANG\u003e that:\n1. Reads numbers from stdin (one per line)\n2. For each number, computes double its value\n3. Prints the doubled values to stdout (one per line)\n\nAssume input is: 1, 2, 3, 4, 5 (one per line)\n\nOutput only the code, no explanations.\n",
      "totalRuns": 10
    },
    "record_update": {
      "avgTokens": 168.1,
      "codeSamples": {
        "ailang": "module benchmark/solution\n\nimport std/io (println)\n\nexport func main() -\u003e () ! {IO} {\n  let alice = {name: \"Alice\", age: 30, city: \"NYC\"};\n  let aliceOlder = {alice | age: alice.age + 1};\n  let aliceSF = {aliceOlder | city: \"SF\"};\n  println(alice.name ++ \", \" ++ show(alice.age) ++ \", \" ++ alice.city);\n  println(aliceOlder.name ++ \", \" ++ show(aliceOlder.age) ++ \", \" ++ aliceOlder.city);\n  println(aliceSF.name ++ \", \" ++ show(aliceSF.age) ++ \", \" ++ aliceSF.city)\n}",
        "python": "from dataclasses import dataclass, replace\n\n@dataclass(frozen=True)\nclass Person:\n    name: str\n    age: int\n    city: str\n\ndef main():\n    # 1. Creates a person record\n    person1 = Person(name=\"Alice\", age=30, city=\"NYC\")\n\n    # 2. Creates an updated version with age incremented by 1\n    person2 = replace(person1, age=person1.age + 1)\n\n    # 3. Creates another update changing only the city to \"SF\"\n    person3 = replace(person1, city=\"SF\")\n\n    # 4. Prints all three records\n    records = [person1, person2, person3]\n    for record in records:\n        print(f\"{record.name}, {record.age}, {record.city}\")\n\nif __name__ == \"__main__\":\n    main()"
      },
      "languageStats": {
        "ailang": {
          "avgTokens": 177.6,
          "successRate": 0.8,
          "totalRuns": 5
        },
        "python": {
          "avgTokens": 158.6,
          "successRate": 0.4,
          "totalRuns": 5
        }
      },
      "languages": [
        "ailang",
        "python"
      ],
      "successRate": 0.6,
      "taskPrompt": "Write a program in \u003cLANG\u003e that:\n1. Creates a person record: {name: \"Alice\", age: 30, city: \"NYC\"}\n2. Creates an updated version with age incremented by 1 (using record update syntax)\n3. Creates another update changing only the city to \"SF\"\n4. Prints all three records in format: \"{name}, {age}, {city}\"\n\nRequirements:\n- For AILANG: Use record update syntax {r | field: value}\n- For Python: Use dict update or dataclass replace\n- Each update creates a NEW record (immutable)\n\nOutput only the code, no explanations.\n",
      "totalRuns": 10
    },
    "records_person": {
      "avgTokens": 111.5,
      "codeSamples": {
        "ailang": "module benchmark/solution\n\nimport std/io (println)\n\nexport func main() -\u003e () ! {IO} {\n  let alice = {name: \"Alice\", age: 30, city: \"NYC\"};\n  let bob = {name: \"Bob\", age: 25, city: \"SF\"};\n  println(alice.name ++ \", \" ++ show(alice.age) ++ \", \" ++ alice.city);\n  println(bob.name ++ \", \" ++ show(bob.age) ++ \", \" ++ bob.city)\n}",
        "python": "from dataclasses import dataclass\n\n@dataclass\nclass Person:\n    name: str\n    age: int\n    city: str\n\nalice = Person(name=\"Alice\", age=30, city=\"NYC\")\nbob = Person(name=\"Bob\", age=25, city=\"SF\")\n\nprint(f\"{alice.name}, {alice.age}, {alice.city}\")\nprint(f\"{bob.name}, {bob.age}, {bob.city}\")"
      },
      "languageStats": {
        "ailang": {
          "avgTokens": 123,
          "successRate": 1,
          "totalRuns": 5
        },
        "python": {
          "avgTokens": 100,
          "successRate": 1,
          "totalRuns": 5
        }
      },
      "languages": [
        "ailang",
        "python"
      ],
      "successRate": 1,
      "taskPrompt": "Write a program in \u003cLANG\u003e that:\n1. Creates a person record/object with fields: name (string), age (int), city (string)\n2. Creates TWO persons:\n   - Alice: name=\"Alice\", age=30, city=\"NYC\"\n   - Bob: name=\"Bob\", age=25, city=\"SF\"\n3. Prints both persons in this exact format (one per line):\n   \"{name}, {age}, {city}\"\n\nOutput only the code for \u003cLANG\u003e, no explanations.\n",
      "totalRuns": 10
    },
    "recursion_factorial": {
      "avgTokens": 70.1,
      "codeSamples": {
        "ailang": "module benchmark/solution\n\nimport std/io (println)\n\nexport func factorial(n: int) -\u003e int {\n  if n \u003c= 1 then 1 else n * factorial(n - 1)\n}\n\nexport func main() -\u003e () ! {IO} {\n  let r = factorial(10);\n  println(show(r))\n}",
        "python": "def factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\nresult = factorial(10)\nprint(result)"
      },
      "languageStats": {
        "ailang": {
          "avgTokens": 83.4,
          "successRate": 0.8,
          "totalRuns": 5
        },
        "python": {
          "avgTokens": 56.8,
          "successRate": 1,
          "totalRuns": 5
        }
      },
      "languages": [
        "ailang",
        "python"
      ],
      "successRate": 0.9,
      "taskPrompt": "Write a program in \u003cLANG\u003e that:\n1. Defines a recursive factorial function that computes n!\n2. Computes factorial(10)\n3. Prints the result\n\nThe factorial function should use recursion (not loops).\n\nOutput only the code for \u003cLANG\u003e, no explanations.\n",
      "totalRuns": 10
    },
    "recursion_fibonacci": {
      "avgTokens": 78.9,
      "codeSamples": {
        "ailang": "module benchmark/solution\n\nimport std/io (println)\n\nexport func fib(n: int) -\u003e int {\n  if n \u003c 2 then n else fib(n - 1) + fib(n - 2)\n}\n\nexport func main() -\u003e () ! {IO} {\n  let result = fib(20);\n  println(show(result))\n}",
        "python": "def fib(n):\n    if n \u003c= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\nif __name__ == \"__main__\":\n    result = fib(20)\n    print(result)"
      },
      "languageStats": {
        "ailang": {
          "avgTokens": 90,
          "successRate": 1,
          "totalRuns": 5
        },
        "python": {
          "avgTokens": 67.8,
          "successRate": 1,
          "totalRuns": 5
        }
      },
      "languages": [
        "ailang",
        "python"
      ],
      "successRate": 1,
      "taskPrompt": "Write a program in \u003cLANG\u003e that:\n1. Defines a recursive Fibonacci function: fib(0) = 0, fib(1) = 1, fib(n) = fib(n-1) + fib(n-2)\n2. Computes fib(20)\n3. Prints the result\n\nThe function MUST use recursion (not loops or memoization).\nThis will be compute-intensive to test execution performance.\n\nOutput only the code for \u003cLANG\u003e, no explanations.\n",
      "totalRuns": 10
    },
    "simple_print": {
      "avgTokens": 20.2,
      "codeSamples": {
        "python": "print(\"Hello World\")\nprint(\"The answer is 42\")"
      },
      "languageStats": {
        "python": {
          "avgTokens": 20.2,
          "successRate": 1,
          "totalRuns": 5
        }
      },
      "languages": [
        "python"
      ],
      "successRate": 1,
      "taskPrompt": "Write a Python program that prints exactly:\nHello World\nThe answer is 42\n\nRequirements:\n- Two lines of output\n- First line: \"Hello World\"\n- Second line: \"The answer is 42\"\n\nOutput only the code, no explanations.\n",
      "totalRuns": 5
    },
    "string_manipulation": {
      "avgTokens": 102,
      "codeSamples": {
        "ailang": "module benchmark/solution\n\nimport std/io (println)\n\nexport func main() -\u003e () ! {IO} {\n  let greeting = \"Hello\";\n  let name = \"World\";\n  let year = 2025;\n  let message = greeting ++ \", \" ++ name ++ \"! Year: \" ++ show(year);\n  let check = if greeting == \"Hello\" then \"Match\" else \"No match\";\n  println(\"Message: \" ++ message);\n  println(\"Check: \" ++ check)\n}",
        "python": "greeting = \"Hello\"\nname = \"World\"\nyear = 2025\n\nmessage = greeting + \", \" + name + \"! Year: \" + str(year)\n\nif greeting == \"Hello\":\n    check = \"Match\"\nelse:\n    check = \"No match\"\n\nprint(\"Message: \" + message)\nprint(\"Check: \" + check)"
      },
      "languageStats": {
        "ailang": {
          "avgTokens": 119.6,
          "successRate": 1,
          "totalRuns": 5
        },
        "python": {
          "avgTokens": 84.4,
          "successRate": 1,
          "totalRuns": 5
        }
      },
      "languages": [
        "ailang",
        "python"
      ],
      "successRate": 1,
      "taskPrompt": "Write a program in \u003cLANG\u003e that:\n1. Creates three variables:\n   - greeting: \"Hello\"\n   - name: \"World\"\n   - year: 2025 (integer)\n2. Concatenates them into a message: \"{greeting}, {name}! Year: {year}\"\n3. Checks if greeting equals \"Hello\" (print \"Match\" or \"No match\")\n4. Prints both results:\n   \"Message: {message}\"\n   \"Check: {Match or No match}\"\n\nRequirements:\n- Use string concatenation operator\n- Convert integer to string for concatenation\n- Use string equality comparison\n\nOutput only the code, no explanations.\n",
      "totalRuns": 10
    },
    "targeted_repair_test": {
      "avgTokens": 41,
      "codeSamples": {
        "ailang": "module benchmark/solution\n\nimport std/io (println)\n\nexport func main() -\u003e () ! {IO} {\n  let result = 2 + 2;\n  println(show(result))\n}"
      },
      "languageStats": {
        "ailang": {
          "avgTokens": 41,
          "successRate": 0.4,
          "totalRuns": 5
        }
      },
      "languages": [
        "ailang"
      ],
      "successRate": 0.4,
      "taskPrompt": "Write an AILANG program that computes 2 + 2 and prints the result.\n\nAILANG Syntax Guide (IMPORTANT - Follow exactly):\n- Module declaration: Not needed for single-file programs\n- Import: `import std/io (println)`\n- Function: `let main = { println(4) }` OR `let main = println(4)`\n- Numbers: Just write them: 1, 2, 42\n- Arithmetic: Use infix: 2 + 2\n- Print: Use `println(expr)`\n- Block syntax: If you need multiple statements: `{ stmt1; stmt2; result }`\n  CRITICAL: Semicolons BETWEEN statements, NOT after the last one\n- Let binding: `let x = expr in body` OR for top-level: `let x = expr`\n\nExample AILANG program:\n```\nimport std/io (println)\n\nlet main = {\n  let result = 2 + 2;\n  println(result)\n}\n```\n\nWrite EXACTLY this style. Output only the code.\n",
      "totalRuns": 5
    }
  },
  "history": [
    {
      "languages": "python,ailang",
      "successCount": 75,
      "successRate": 0.6578947368421053,
      "timestamp": "2025-10-15T09:10:51Z",
      "totalRuns": 114,
      "version": "v0.3.8"
    },
    {
      "languages": "python,ailang",
      "successCount": 67,
      "successRate": 0.5877192982456141,
      "timestamp": "2025-10-15T06:37:44Z",
      "totalRuns": 114,
      "version": "v0.3.7-1-gd24a7dc"
    },
    {
      "languages": "",
      "successCount": 47,
      "successRate": 0.618421052631579,
      "timestamp": "0001-01-01T00:00:00Z",
      "totalRuns": 76,
      "version": "v0.3.6-24-mini"
    },
    {
      "languages": "",
      "successCount": 42,
      "successRate": 0.6176470588235294,
      "timestamp": "0001-01-01T00:00:00Z",
      "totalRuns": 68,
      "version": "v0.3.6-24"
    }
  ],
  "languages": {
    "ailang": {
      "total_runs": 95,
      "success_rate": 0.4631578947368421,
      "avg_tokens": 168.56842105263158
    },
    "python": {
      "total_runs": 95,
      "success_rate": 0.8210526315789474,
      "avg_tokens": 129.54736842105262
    }
  },
  "models": {
    "claude-sonnet-4-5": {
      "aggregates": {
        "avgDurationMs": 26.57894736842105,
        "finalSuccess": 0.6842105263157895,
        "repairSuccessRate": 0,
        "repairUsed": 0,
        "totalCostUSD": 0.2904779999999999,
        "totalTokens": 73354,
        "zeroShotSuccess": 0.6842105263157895
      },
      "baselineVersion": "v0.3.8",
      "benchmarks": {
        "adt_option": {
          "firstAttemptOk": true,
          "repairUsed": false,
          "success": true,
          "tokens": 4739
        },
        "cli_args": {
          "firstAttemptOk": false,
          "repairUsed": false,
          "success": false,
          "tokens": 153
        },
        "error_handling": {
          "firstAttemptOk": false,
          "repairUsed": false,
          "success": false,
          "tokens": 5563
        },
        "fizzbuzz": {
          "firstAttemptOk": true,
          "repairUsed": false,
          "success": true,
          "tokens": 4690
        },
        "float_eq": {
          "firstAttemptOk": false,
          "repairUsed": false,
          "success": false,
          "tokens": 70
        },
        "higher_order_functions": {
          "firstAttemptOk": false,
          "repairUsed": false,
          "success": false,
          "tokens": 4832
        },
        "json_parse": {
          "firstAttemptOk": false,
          "repairUsed": false,
          "success": false,
          "tokens": 206
        },
        "list_comprehension": {
          "firstAttemptOk": false,
          "repairUsed": false,
          "success": false,
          "tokens": 5079
        },
        "list_operations": {
          "firstAttemptOk": false,
          "repairUsed": false,
          "success": false,
          "tokens": 4792
        },
        "nested_records": {
          "firstAttemptOk": true,
          "repairUsed": false,
          "success": true,
          "tokens": 4698
        },
        "numeric_modulo": {
          "firstAttemptOk": false,
          "repairUsed": false,
          "success": false,
          "tokens": 57
        },
        "pattern_matching_complex": {
          "firstAttemptOk": true,
          "repairUsed": false,
          "success": true,
          "tokens": 4972
        },
        "pipeline": {
          "firstAttemptOk": false,
          "repairUsed": false,
          "success": false,
          "tokens": 144
        },
        "record_update": {
          "firstAttemptOk": true,
          "repairUsed": false,
          "success": true,
          "tokens": 4753
        },
        "records_person": {
          "firstAttemptOk": true,
          "repairUsed": false,
          "success": true,
          "tokens": 4648
        },
        "recursion_factorial": {
          "firstAttemptOk": true,
          "repairUsed": false,
          "success": true,
          "tokens": 4549
        },
        "recursion_fibonacci": {
          "firstAttemptOk": true,
          "repairUsed": false,
          "success": true,
          "tokens": 4611
        },
        "simple_print": {
          "firstAttemptOk": true,
          "repairUsed": false,
          "success": true,
          "tokens": 123
        },
        "string_manipulation": {
          "firstAttemptOk": true,
          "repairUsed": false,
          "success": true,
          "tokens": 4679
        },
        "targeted_repair_test": {
          "firstAttemptOk": true,
          "repairUsed": false,
          "success": true,
          "tokens": 4693
        }
      },
      "languages": {
        "ailang": {
          "avgTokens": 194.89473684210526,
          "successRate": 0.5263157894736842,
          "totalRuns": 19
        },
        "python": {
          "avgTokens": 113.94736842105263,
          "successRate": 0.8421052631578947,
          "totalRuns": 19
        }
      },
      "totalRuns": 38
    },
    "gemini-2-5-flash": {
      "aggregates": {
        "avgDurationMs": 23.68421052631579,
        "finalSuccess": 0.5789473684210527,
        "repairSuccessRate": 0,
        "repairUsed": 0,
        "totalCostUSD": 0.03364529999999999,
        "totalTokens": 67777,
        "zeroShotSuccess": 0.5789473684210527
      },
      "baselineVersion": "v0.3.6-24-mini",
      "benchmarks": {
        "adt_option": {
          "firstAttemptOk": true,
          "repairUsed": false,
          "success": true,
          "tokens": 4337
        },
        "cli_args": {
          "firstAttemptOk": false,
          "repairUsed": false,
          "success": false,
          "tokens": 229
        },
        "error_handling": {
          "firstAttemptOk": false,
          "repairUsed": false,
          "success": false,
          "tokens": 5268
        },
        "fizzbuzz": {
          "firstAttemptOk": true,
          "repairUsed": false,
          "success": true,
          "tokens": 4297
        },
        "float_eq": {
          "firstAttemptOk": false,
          "repairUsed": false,
          "success": false,
          "tokens": 52
        },
        "higher_order_functions": {
          "firstAttemptOk": false,
          "repairUsed": false,
          "success": false,
          "tokens": 4433
        },
        "json_parse": {
          "firstAttemptOk": false,
          "repairUsed": false,
          "success": false,
          "tokens": 185
        },
        "list_comprehension": {
          "firstAttemptOk": false,
          "repairUsed": false,
          "success": false,
          "tokens": 4610
        },
        "list_operations": {
          "firstAttemptOk": false,
          "repairUsed": false,
          "success": false,
          "tokens": 4388
        },
        "nested_records": {
          "firstAttemptOk": true,
          "repairUsed": false,
          "success": true,
          "tokens": 369
        },
        "numeric_modulo": {
          "firstAttemptOk": false,
          "repairUsed": false,
          "success": false,
          "tokens": 41
        },
        "pattern_matching_complex": {
          "firstAttemptOk": true,
          "repairUsed": false,
          "success": true,
          "tokens": 653
        },
        "pipeline": {
          "firstAttemptOk": false,
          "repairUsed": false,
          "success": false,
          "tokens": 150
        },
        "record_update": {
          "firstAttemptOk": false,
          "repairUsed": false,
          "success": false,
          "tokens": 340
        },
        "records_person": {
          "firstAttemptOk": true,
          "repairUsed": false,
          "success": true,
          "tokens": 4246
        },
        "recursion_factorial": {
          "firstAttemptOk": false,
          "repairUsed": false,
          "success": false,
          "tokens": 4164
        },
        "recursion_fibonacci": {
          "firstAttemptOk": true,
          "repairUsed": false,
          "success": true,
          "tokens": 4214
        },
        "simple_print": {
          "firstAttemptOk": true,
          "repairUsed": false,
          "success": true,
          "tokens": 109
        },
        "string_manipulation": {
          "firstAttemptOk": true,
          "repairUsed": false,
          "success": true,
          "tokens": 272
        },
        "targeted_repair_test": {
          "firstAttemptOk": false,
          "repairUsed": false,
          "success": false,
          "tokens": 4274
        }
      },
      "languages": {
        "ailang": {
          "avgTokens": 190,
          "successRate": 0.3684210526315789,
          "totalRuns": 19
        },
        "python": {
          "avgTokens": 128.47368421052633,
          "successRate": 0.7894736842105263,
          "totalRuns": 19
        }
      },
      "totalRuns": 38
    },
    "gemini-2-5-pro": {
      "aggregates": {
        "avgDurationMs": 29.605263157894736,
        "finalSuccess": 0.6578947368421053,
        "repairSuccessRate": 0,
        "repairUsed": 0,
        "totalCostUSD": 0.14049750000000003,
        "totalTokens": 68060,
        "zeroShotSuccess": 0.6578947368421053
      },
      "baselineVersion": "v0.3.8",
      "benchmarks": {
        "adt_option": {
          "firstAttemptOk": true,
          "repairUsed": false,
          "success": true,
          "tokens": 456
        },
        "cli_args": {
          "firstAttemptOk": false,
          "repairUsed": false,
          "success": false,
          "tokens": 244
        },
        "error_handling": {
          "firstAttemptOk": false,
          "repairUsed": false,
          "success": false,
          "tokens": 4925
        },
        "fizzbuzz": {
          "firstAttemptOk": true,
          "repairUsed": false,
          "success": true,
          "tokens": 4283
        },
        "float_eq": {
          "firstAttemptOk": false,
          "repairUsed": false,
          "success": false,
          "tokens": 58
        },
        "higher_order_functions": {
          "firstAttemptOk": false,
          "repairUsed": false,
          "success": false,
          "tokens": 4435
        },
        "json_parse": {
          "firstAttemptOk": false,
          "repairUsed": false,
          "success": false,
          "tokens": 184
        },
        "list_comprehension": {
          "firstAttemptOk": false,
          "repairUsed": false,
          "success": false,
          "tokens": 4658
        },
        "list_operations": {
          "firstAttemptOk": false,
          "repairUsed": false,
          "success": false,
          "tokens": 4404
        },
        "nested_records": {
          "firstAttemptOk": true,
          "repairUsed": false,
          "success": true,
          "tokens": 4307
        },
        "numeric_modulo": {
          "firstAttemptOk": false,
          "repairUsed": false,
          "success": false,
          "tokens": 42
        },
        "pattern_matching_complex": {
          "firstAttemptOk": true,
          "repairUsed": false,
          "success": true,
          "tokens": 4586
        },
        "pipeline": {
          "firstAttemptOk": false,
          "repairUsed": false,
          "success": false,
          "tokens": 115
        },
        "record_update": {
          "firstAttemptOk": true,
          "repairUsed": false,
          "success": true,
          "tokens": 4318
        },
        "records_person": {
          "firstAttemptOk": true,
          "repairUsed": false,
          "success": true,
          "tokens": 253
        },
        "recursion_factorial": {
          "firstAttemptOk": true,
          "repairUsed": false,
          "success": true,
          "tokens": 4159
        },
        "recursion_fibonacci": {
          "firstAttemptOk": true,
          "repairUsed": false,
          "success": true,
          "tokens": 4211
        },
        "simple_print": {
          "firstAttemptOk": true,
          "repairUsed": false,
          "success": true,
          "tokens": 114
        },
        "string_manipulation": {
          "firstAttemptOk": true,
          "repairUsed": false,
          "success": true,
          "tokens": 4277
        },
        "targeted_repair_test": {
          "firstAttemptOk": true,
          "repairUsed": false,
          "success": true,
          "tokens": 4294
        }
      },
      "languages": {
        "ailang": {
          "avgTokens": 174.8421052631579,
          "successRate": 0.5263157894736842,
          "totalRuns": 19
        },
        "python": {
          "avgTokens": 158.52631578947367,
          "successRate": 0.7894736842105263,
          "totalRuns": 19
        }
      },
      "totalRuns": 38
    },
    "gpt5": {
      "aggregates": {
        "avgDurationMs": 26.92105263157895,
        "finalSuccess": 0.631578947368421,
        "repairSuccessRate": 0,
        "repairUsed": 0,
        "totalCostUSD": 0.1197,
        "totalTokens": 62069,
        "zeroShotSuccess": 0.631578947368421
      },
      "baselineVersion": "v0.3.8",
      "benchmarks": {
        "adt_option": {
          "firstAttemptOk": true,
          "repairUsed": false,
          "success": true,
          "tokens": 340
        },
        "cli_args": {
          "firstAttemptOk": false,
          "repairUsed": false,
          "success": false,
          "tokens": 184
        },
        "error_handling": {
          "firstAttemptOk": false,
          "repairUsed": false,
          "success": false,
          "tokens": 4268
        },
        "fizzbuzz": {
          "firstAttemptOk": true,
          "repairUsed": false,
          "success": true,
          "tokens": 198
        },
        "float_eq": {
          "firstAttemptOk": false,
          "repairUsed": false,
          "success": false,
          "tokens": 84
        },
        "higher_order_functions": {
          "firstAttemptOk": false,
          "repairUsed": false,
          "success": false,
          "tokens": 4084
        },
        "json_parse": {
          "firstAttemptOk": false,
          "repairUsed": false,
          "success": false,
          "tokens": 161
        },
        "list_comprehension": {
          "firstAttemptOk": true,
          "repairUsed": false,
          "success": true,
          "tokens": 301
        },
        "list_operations": {
          "firstAttemptOk": false,
          "repairUsed": false,
          "success": false,
          "tokens": 4013
        },
        "nested_records": {
          "firstAttemptOk": true,
          "repairUsed": false,
          "success": true,
          "tokens": 312
        },
        "numeric_modulo": {
          "firstAttemptOk": true,
          "repairUsed": false,
          "success": true,
          "tokens": 59
        },
        "pattern_matching_complex": {
          "firstAttemptOk": true,
          "repairUsed": false,
          "success": true,
          "tokens": 582
        },
        "pipeline": {
          "firstAttemptOk": false,
          "repairUsed": false,
          "success": false,
          "tokens": 171
        },
        "record_update": {
          "firstAttemptOk": false,
          "repairUsed": false,
          "success": false,
          "tokens": 4008
        },
        "records_person": {
          "firstAttemptOk": true,
          "repairUsed": false,
          "success": true,
          "tokens": 3930
        },
        "recursion_factorial": {
          "firstAttemptOk": true,
          "repairUsed": false,
          "success": true,
          "tokens": 3838
        },
        "recursion_fibonacci": {
          "firstAttemptOk": true,
          "repairUsed": false,
          "success": true,
          "tokens": 201
        },
        "simple_print": {
          "firstAttemptOk": true,
          "repairUsed": false,
          "success": true,
          "tokens": 117
        },
        "string_manipulation": {
          "firstAttemptOk": true,
          "repairUsed": false,
          "success": true,
          "tokens": 3954
        },
        "targeted_repair_test": {
          "firstAttemptOk": false,
          "repairUsed": false,
          "success": false,
          "tokens": 3957
        }
      },
      "languages": {
        "ailang": {
          "avgTokens": 146.1578947368421,
          "successRate": 0.42105263157894735,
          "totalRuns": 19
        },
        "python": {
          "avgTokens": 107.15789473684211,
          "successRate": 0.8421052631578947,
          "totalRuns": 19
        }
      },
      "totalRuns": 38
    },
    "gpt5-mini": {
      "aggregates": {
        "avgDurationMs": 30.13157894736842,
        "finalSuccess": 0.6578947368421053,
        "repairSuccessRate": 0,
        "repairUsed": 0,
        "totalCostUSD": 0.024823999999999995,
        "totalTokens": 62511,
        "zeroShotSuccess": 0.6578947368421053
      },
      "baselineVersion": "v0.3.6-24-mini",
      "benchmarks": {
        "adt_option": {
          "firstAttemptOk": true,
          "repairUsed": false,
          "success": true,
          "tokens": 404
        },
        "cli_args": {
          "firstAttemptOk": false,
          "repairUsed": false,
          "success": false,
          "tokens": 206
        },
        "error_handling": {
          "firstAttemptOk": false,
          "repairUsed": false,
          "success": false,
          "tokens": 4215
        },
        "fizzbuzz": {
          "firstAttemptOk": true,
          "repairUsed": false,
          "success": true,
          "tokens": 3941
        },
        "float_eq": {
          "firstAttemptOk": false,
          "repairUsed": false,
          "success": false,
          "tokens": 69
        },
        "higher_order_functions": {
          "firstAttemptOk": false,
          "repairUsed": false,
          "success": false,
          "tokens": 4082
        },
        "json_parse": {
          "firstAttemptOk": true,
          "repairUsed": false,
          "success": true,
          "tokens": 172
        },
        "list_comprehension": {
          "firstAttemptOk": false,
          "repairUsed": false,
          "success": false,
          "tokens": 325
        },
        "list_operations": {
          "firstAttemptOk": true,
          "repairUsed": false,
          "success": true,
          "tokens": 317
        },
        "nested_records": {
          "firstAttemptOk": true,
          "repairUsed": false,
          "success": true,
          "tokens": 3958
        },
        "numeric_modulo": {
          "firstAttemptOk": false,
          "repairUsed": false,
          "success": false,
          "tokens": 68
        },
        "pattern_matching_complex": {
          "firstAttemptOk": true,
          "repairUsed": false,
          "success": true,
          "tokens": 743
        },
        "pipeline": {
          "firstAttemptOk": false,
          "repairUsed": false,
          "success": false,
          "tokens": 159
        },
        "record_update": {
          "firstAttemptOk": true,
          "repairUsed": false,
          "success": true,
          "tokens": 3993
        },
        "records_person": {
          "firstAttemptOk": true,
          "repairUsed": false,
          "success": true,
          "tokens": 3930
        },
        "recursion_factorial": {
          "firstAttemptOk": true,
          "repairUsed": false,
          "success": true,
          "tokens": 3838
        },
        "recursion_fibonacci": {
          "firstAttemptOk": true,
          "repairUsed": false,
          "success": true,
          "tokens": 205
        },
        "simple_print": {
          "firstAttemptOk": true,
          "repairUsed": false,
          "success": true,
          "tokens": 117
        },
        "string_manipulation": {
          "firstAttemptOk": true,
          "repairUsed": false,
          "success": true,
          "tokens": 3954
        },
        "targeted_repair_test": {
          "firstAttemptOk": false,
          "repairUsed": false,
          "success": false,
          "tokens": 3957
        }
      },
      "languages": {
        "ailang": {
          "avgTokens": 136.94736842105263,
          "successRate": 0.47368421052631576,
          "totalRuns": 19
        },
        "python": {
          "avgTokens": 139.6315789473684,
          "successRate": 0.8421052631578947,
          "totalRuns": 19
        }
      },
      "totalRuns": 38
    }
  },
  "timestamp": "2025-10-15T11:12:07+02:00",
  "totalRuns": 190,
  "version": "v0.3.8"
}