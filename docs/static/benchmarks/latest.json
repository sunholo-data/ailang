{
  "aggregates": {
    "avgDurationMs": 28.133333333333333,
    "finalSuccess": 0.5944444444444444,
    "repairSuccessRate": 0,
    "repairUsed": 0,
    "totalCostUSD": 13.270470000000003,
    "totalTokens": 442349,
    "zeroShotSuccess": 0.5944444444444444
  },
  "benchmarks": {
    "adt_option": {
      "avgTokens": 519.8,
      "codeSamples": {
        "ailang": "module benchmark/solution\n\nimport std/io (println)\n\ntype Option[a] = Some(a) | None\n\nexport func divide(a: float, b: float) -\u003e Option[float] {\n  if b == 0.0\n  then None\n  else Some(a / b)\n}\n\nexport func printResult(r: Option[float]) -\u003e () ! {IO} {\n  match r {\n    Some(v) =\u003e println(\"Result: \" ++ show(v)),\n    None =\u003e println(\"Error: Division by zero\")\n  }\n}\n\nexport func main() -\u003e () ! {IO} {\n  let r1 = divide(10.0, 2.0);\n  printResult(r1);\n  let r2 = divide(10.0, 0.0);\n  printResult(r2)\n}",
        "python": "from dataclasses import dataclass\nfrom typing import TypeVar, Generic, Union\n\nT = TypeVar('T')\n\n@dataclass(frozen=True)\nclass Some(Generic[T]):\n    value: T\n\nOption = Union[Some[T], None]\n\ndef safe_divide(numerator: float, divisor: float) -\u003e Option[float]:\n    \"\"\"\n    Safely divides two numbers, returning an Option type.\n    \"\"\"\n    if divisor == 0:\n        return None\n    return Some(numerator / divisor)\n\ndef process_result(result: Option[float]) -\u003e None:\n    \"\"\"\n    Processes and prints the result of a safe division.\n    \"\"\"\n    if isinstance(result, Some):\n        print(f\"Result: {result.value}\")\n    elif result is None:\n        print(\"Error: Division by zero\")\n\nif __name__ == \"__main__\":\n    result1 = safe_divide(10, 2)\n    process_result(result1)\n\n    result2 = safe_divide(10, 0)\n    process_result(result2)"
      },
      "languageStats": {
        "ailang": {
          "avgTokens": 549.4,
          "successRate": 1,
          "totalRuns": 5
        },
        "python": {
          "avgTokens": 490.2,
          "successRate": 0.8,
          "totalRuns": 5
        }
      },
      "languages": [
        "ailang",
        "python"
      ],
      "successRate": 0.9,
      "taskPrompt": "Write a program in \u003cLANG\u003e that:\n1. Defines an Option type (Some/None, or equivalent)\n2. Implements a safe division function that returns Option[Float]\n   - Returns Some(result) if divisor is non-zero\n   - Returns None if divisor is zero\n3. Tests the function with: divide(10, 2) and divide(10, 0)\n4. Prints the results:\n   - For Some(value): print \"Result: {value}\"\n   - For None: print \"Error: Division by zero\"\n\nOutput only the code, no explanations.\n",
      "totalRuns": 10
    },
    "cli_args": {
      "avgTokens": 687.9,
      "codeSamples": {
        "ailang": "func main(args) {\n    if len(args) \u003c 2 {\n        print(\"Error: No filename provided.\")\n        return\n    }\n\n    let filename = args[1]\n    let file = open(filename, \"r\")\n\n    if file == null {\n        print(\"Error: Could not open file '\" + filename + \"'\")\n        return\n    }\n\n    let sum = 0\n    for each line in file {\n        let num = number(line)\n        if num != null {\n            sum = sum + num\n        }\n    }\n\n    close(file)\n    print(sum)\n}",
        "python": "import sys\n\ntotal = 0.0\n\ntry:\n    filename = sys.argv[1]\n    with open(filename, 'r') as f:\n        for line in f:\n            try:\n                total += float(line.strip())\n            except ValueError:\n                continue\n    print(total)\nexcept IndexError:\n    print(\"Usage: python your_script_name.py \u003cfilename\u003e\")\nexcept FileNotFoundError:\n    print(f\"Error: File '{filename}' not found.\")"
      },
      "languageStats": {
        "ailang": {
          "avgTokens": 759.6,
          "successRate": 0,
          "totalRuns": 5
        },
        "python": {
          "avgTokens": 616.2,
          "successRate": 0,
          "totalRuns": 5
        }
      },
      "languages": [
        "ailang",
        "python"
      ],
      "successRate": 0,
      "taskPrompt": "Write a program in \u003cLANG\u003e that:\n1. Takes a filename as a command-line argument\n2. Reads the file contents (assume it contains numbers, one per line)\n3. Computes the sum of all numbers\n4. Prints the sum\n\nOutput only the code, no explanations.\n",
      "totalRuns": 10
    },
    "error_handling": {
      "avgTokens": 999.6,
      "codeSamples": {
        "ailang": "module benchmark/solution\n\nimport std/io (println)\n\ntype Result[a] = Ok(a) | Err(string)\n\nexport func parseInt(s: string) -\u003e Result[int] {\n  if s == \"10\" then Ok(10)\n  else if s == \"20\" then Ok(20)\n  else if s == \"0\" then Ok(0)\n  else if s == \"5\" then Ok(5)\n  else Err(\"Invalid integer\")\n}\n\nexport func divideSafe(a: int, b: int) -\u003e Result[int] {\n  if b == 0\n  then Err(\"Division by zero\")\n  else Ok(a / b)\n}\n\nexport func chainDivide(s: string, divisor: int) -\u003e Result[int] {\n  match parseInt(s) {\n    Ok(n) =\u003e divideSafe(n, divisor),\n    Err(msg) =\u003e Err(msg)\n  }\n}\n\nexport func printResult(result: Result[int]) -\u003e () ! {IO} {\n  match result {\n    Ok(value) =\u003e println(\"Result: \" ++ show(value)),\n    Err(msg) =\u003e println(\"Error: \" ++ msg)\n  }\n}\n\nexport func main() -\u003e () ! {IO} {\n  let r1 = chainDivide(\"10\", 2);\n  printResult(r1);\n  let r2 = chainDivide(\"10\", 0);\n  printResult(r2);\n  let r3 = chainDivide(\"abc\", 2);\n  printResult(r3)\n}",
        "python": "import sys\nfrom typing import TypeVar, Generic, NamedTuple, Union\n\nif sys.version_info \u003c (3, 9):\n    from typing import List, Dict, Set, Tuple\n\nT = TypeVar('T')\n\nclass Ok(NamedTuple, Generic[T]):\n    value: T\n\nclass Err(NamedTuple):\n    message: str\n\nif sys.version_info \u003e= (3, 9):\n    Result = Union[Ok[T], Err]\nelse:\n    Result = Union[Ok, Err]\n\n\ndef parse_int(s: str) -\u003e Result[int]:\n    \"\"\"Parses a string into an integer, returning a Result type.\"\"\"\n    try:\n        return Ok(int(s))\n    except ValueError:\n        return Err(\"Invalid integer\")\n\n\ndef divide_safe(a: int, b: int) -\u003e Result[int]:\n    \"\"\"Divides two integers, returning a Result type.\"\"\"\n    if b == 0:\n        return Err(\"Division by zero\")\n    return Ok(a // b)\n\n\ndef run_chain(s_to_parse: str, divisor: int | None = None):\n    \"\"\"\n    Runs a chain of operations (parse, then optionally divide)\n    and prints the final result.\n    \"\"\"\n    parse_result = parse_int(s_to_parse)\n\n    if isinstance(parse_result, Ok) and divisor is not None:\n        final_result = divide_safe(parse_result.value, divisor)\n    else:\n        final_result = parse_result\n\n    if isinstance(final_result, Ok):\n        print(f\"Result: {final_result.value}\")\n    else:\n        print(f\"Error: {final_result.message}\")\n\n\ndef main():\n    \"\"\"Runs the test cases.\"\"\"\n    # Test case 1: parse_int(\"10\") then divide by 2 -\u003e \"Result: 5\"\n    run_chain(\"10\", 2)\n\n    # Test case 2: parse_int(\"10\") then divide by 0 -\u003e \"Error: Division by zero\"\n    run_chain(\"10\", 0)\n\n    # Test case 3: parse_int(\"abc\") -\u003e \"Error: Invalid integer\"\n    run_chain(\"abc\")\n\n\nif __name__ == \"__main__\":\n    main()"
      },
      "languageStats": {
        "ailang": {
          "avgTokens": 1120.6,
          "successRate": 0.4,
          "totalRuns": 5
        },
        "python": {
          "avgTokens": 878.6,
          "successRate": 1,
          "totalRuns": 5
        }
      },
      "languages": [
        "ailang",
        "python"
      ],
      "successRate": 0.7,
      "taskPrompt": "Write a program in \u003cLANG\u003e that:\n1. Defines a Result type with Ok(value) and Err(message) variants\n2. Implements a function `parse_int(s: string) -\u003e Result[int]`:\n   - Returns Ok(n) if string can be parsed as integer\n   - Returns Err(\"Invalid integer\") otherwise\n3. Implements a function `divide_safe(a: int, b: int) -\u003e Result[int]`:\n   - Returns Ok(a/b) if b != 0\n   - Returns Err(\"Division by zero\") if b == 0\n4. Chains operations: parse_int(\"10\") -\u003e divide_safe(result, 2)\n5. Prints the final result:\n   - For Ok(value): \"Result: {value}\"\n   - For Err(msg): \"Error: {msg}\"\n\nTest cases:\n- parse_int(\"10\") then divide by 2 -\u003e \"Result: 5\"\n- parse_int(\"10\") then divide by 0 -\u003e \"Error: Division by zero\"\n- parse_int(\"abc\") -\u003e \"Error: Invalid integer\"\n\nOutput only the code, no explanations.\n",
      "totalRuns": 10
    },
    "fizzbuzz": {
      "avgTokens": 275,
      "codeSamples": {
        "ailang": "module benchmark/solution\n\nimport std/io (println)\n\nfunc fizzbuzz(n: int) -\u003e string {\n  if n % 15 == 0 then \"FizzBuzz\"\n  else if n % 3 == 0 then \"Fizz\"\n  else if n % 5 == 0 then \"Buzz\"\n  else show(n)\n}\n\nfunc loop(n: int) -\u003e () ! {IO} {\n  if n \u003e 100 then ()\n  else {\n    println(fizzbuzz(n));\n    loop(n + 1)\n  }\n}\n\nexport func main() -\u003e () ! {IO} {\n  loop(1)\n}",
        "python": "def fizzbuzz():\n    for i in range(1, 101):\n        if i % 15 == 0:\n            print(\"FizzBuzz\")\n        elif i % 3 == 0:\n            print(\"Fizz\")\n        elif i % 5 == 0:\n            print(\"Buzz\")\n        else:\n            print(i)\n\nif __name__ == \"__main__\":\n    fizzbuzz()"
      },
      "languageStats": {
        "ailang": {
          "avgTokens": 419.6,
          "successRate": 1,
          "totalRuns": 5
        },
        "python": {
          "avgTokens": 130.4,
          "successRate": 1,
          "totalRuns": 5
        }
      },
      "languages": [
        "ailang",
        "python"
      ],
      "successRate": 1,
      "taskPrompt": "Write a program in \u003cLANG\u003e that prints FizzBuzz from 1 to 100.\n\nRequirements:\n- Print numbers 1-100, one per line\n- For multiples of 3, print \"Fizz\" instead of the number\n- For multiples of 5, print \"Buzz\" instead of the number\n- For multiples of both 3 and 5, print \"FizzBuzz\" instead of the number\n\nOutput only the code, no explanations.\n",
      "totalRuns": 10
    },
    "float_eq": {
      "avgTokens": 219.3,
      "codeSamples": {
        "ailang": "(program\n    (def main ()\n        (print (== 0.0 0.0))\n    )\n)",
        "python": "print(0.0 == 0.0)"
      },
      "languageStats": {
        "ailang": {
          "avgTokens": 313.8,
          "successRate": 0,
          "totalRuns": 5
        },
        "python": {
          "avgTokens": 124.8,
          "successRate": 0.6,
          "totalRuns": 5
        }
      },
      "languages": [
        "ailang",
        "python"
      ],
      "successRate": 0.3,
      "taskPrompt": "Write a \u003cLANG\u003e program that evaluates (0.0 == 0.0) and prints true or false.\n",
      "totalRuns": 10
    },
    "higher_order_functions": {
      "avgTokens": 589.5,
      "codeSamples": {
        "ailang": "module benchmark/solution\n\nimport std/io (println)\n\nexport func compose[a, b, c](f: (b) -\u003e c, g: (a) -\u003e b) -\u003e ((a) -\u003e c) {\n  func(x: a) -\u003e c {\n    f(g(x))\n  }\n}\n\nexport func add(x: int) -\u003e ((int) -\u003e int) {\n  func(y: int) -\u003e int {\n    x + y\n  }\n}\n\nexport func multiply(x: int) -\u003e ((int) -\u003e int) {\n  func(y: int) -\u003e int {\n    x * y\n  }\n}\n\nexport func main() -\u003e () ! {IO} {\n  let add5 = add(5);\n  let double = multiply(2);\n\n  let add5_then_double = compose(double, add5);\n\n  let result = add5_then_double(10);\n\n  println(\"Result: \" ++ show(result))\n}",
        "python": "def compose(f, g):\n    return lambda x: f(g(x))\n\ndef add(x, y):\n    return x + y\n\ndef multiply(x, y):\n    return x * y\n\nadd5 = lambda y: add(5, y)\ndouble = lambda x: multiply(2, x)\n\nadd5_then_double = compose(double, add5)\n\nresult = add5_then_double(10)\n\nprint(f\"Result: {result}\")"
      },
      "languageStats": {
        "ailang": {
          "avgTokens": 864,
          "successRate": 0,
          "totalRuns": 5
        },
        "python": {
          "avgTokens": 315,
          "successRate": 1,
          "totalRuns": 5
        }
      },
      "languages": [
        "ailang",
        "python"
      ],
      "successRate": 0.5,
      "taskPrompt": "Write a program in \u003cLANG\u003e that demonstrates higher-order functions:\n\n1. Implement `compose(f, g)` - returns a function that computes f(g(x))\n2. Implement `add(x, y)` - adds two numbers\n3. Implement `multiply(x, y)` - multiplies two numbers\n4. Create `add5 = add(5, _)` using partial application (or lambda)\n5. Create `double = multiply(2, _)` using partial application (or lambda)\n6. Create `add5_then_double = compose(double, add5)`\n7. Apply the composed function to 10\n8. Print the result: \"Result: {value}\"\n\nExpected computation: (10 + 5) * 2 = 30\n\nRequirements:\n- Use first-class functions\n- Demonstrate function composition\n- Show currying or partial application\n\nOutput only the code, no explanations.\n",
      "totalRuns": 10
    },
    "json_parse": {
      "avgTokens": 310.3,
      "codeSamples": {
        "ailang": "json_text = '[{\"name\":\"Alice\",\"age\":30},{\"name\":\"Bob\",\"age\":25},{\"name\":\"Charlie\",\"age\":35}]'\npeople = JSON.parse(json_text)\nfor person in people:\n    if person.age \u003e= 30:\n        println(person.name)",
        "python": "data = [{\"name\": \"Alice\", \"age\": 30}, {\"name\": \"Bob\", \"age\": 25}, {\"name\": \"Charlie\", \"age\": 35}]\n\nfiltered_people = [person for person in data if person[\"age\"] \u003e= 30]\n\nfor person in filtered_people:\n    print(person[\"name\"])"
      },
      "languageStats": {
        "ailang": {
          "avgTokens": 451.6,
          "successRate": 0,
          "totalRuns": 5
        },
        "python": {
          "avgTokens": 169,
          "successRate": 1,
          "totalRuns": 5
        }
      },
      "languages": [
        "ailang",
        "python"
      ],
      "successRate": 0.5,
      "taskPrompt": "Write a program in \u003cLANG\u003e that:\n1. Parses this JSON array: [{\"name\":\"Alice\",\"age\":30},{\"name\":\"Bob\",\"age\":25},{\"name\":\"Charlie\",\"age\":35}]\n2. Filters to keep only people aged 30 or older\n3. Prints the names, one per line\n\nOutput only the code, no explanations.\n",
      "totalRuns": 10
    },
    "list_comprehension": {
      "avgTokens": 764.6,
      "codeSamples": {
        "ailang": "module benchmark/solution\n\nimport std/io (println)\n\ntype List[a] = Cons(a, List[a]) | Nil\n\nexport func filter[a](pred: (a) -\u003e bool, lst: List[a]) -\u003e List[a] {\n  match lst {\n    Nil =\u003e Nil,\n    Cons(x, xs) =\u003e if pred(x) then Cons(x, filter(pred, xs)) else filter(pred, xs)\n  }\n}\n\nexport func map[a, b](f: (a) -\u003e b, lst: List[a]) -\u003e List[b] {\n  match lst {\n    Nil =\u003e Nil,\n    Cons(x, xs) =\u003e Cons(f(x), map(f, xs))\n  }\n}\n\nexport func fold[a, b](f: (b, a) -\u003e b, acc: b, lst: List[a]) -\u003e b {\n  match lst {\n    Nil =\u003e acc,\n    Cons(x, xs) =\u003e fold(f, f(acc, x), xs)\n  }\n}\n\nexport func isEven(n: int) -\u003e bool {\n  n % 2 == 0\n}\n\nexport func square(n: int) -\u003e int {\n  n * n\n}\n\nexport func add(a: int, b: int) -\u003e int {\n  a + b\n}\n\nexport func main() -\u003e () ! {IO} {\n  let numbers = Cons(1, Cons(2, Cons(3, Cons(4, Cons(5, Cons(6, Cons(7, Cons(8, Cons(9, Cons(10, Nil))))))))));\n  let evens = filter(isEven, numbers);\n  let squares = map(square, evens);\n  let result = fold(add, 0, squares);\n  println(\"Sum of squares of evens: \" ++ show(result))\n}",
        "python": "numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nevens = [n for n in numbers if n % 2 == 0]\nprint(\"Filtered evens:\", evens)\n\nsquares = [n * n for n in evens]\nprint(\"Squared evens:\", squares)\n\ntotal = sum(squares)\nprint(f\"Sum of squares of evens: {total}\")"
      },
      "languageStats": {
        "ailang": {
          "avgTokens": 1312.2,
          "successRate": 0,
          "totalRuns": 5
        },
        "python": {
          "avgTokens": 217,
          "successRate": 0.6,
          "totalRuns": 5
        }
      },
      "languages": [
        "ailang",
        "python"
      ],
      "successRate": 0.3,
      "taskPrompt": "Write a program in \u003cLANG\u003e that:\n1. Creates a list of integers: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n2. Filters the list to keep only even numbers\n3. Maps the filtered list by squaring each number\n4. Computes the sum of the resulting list\n5. Prints the result: \"Sum of squares of evens: {result}\"\n\nRequirements:\n- For Python: Use list comprehensions or map/filter\n- For AILANG: Implement map/filter/fold as recursive functions\n- Show intermediate results if helpful for debugging\n\nExpected result: 2^2 + 4^2 + 6^2 + 8^2 + 10^2 = 4 + 16 + 36 + 64 + 100 = 220\n\nOutput only the code, no explanations.\n",
      "totalRuns": 10
    },
    "list_operations": {
      "avgTokens": 545.6,
      "codeSamples": {
        "ailang": "module benchmark/solution\n\nimport std/io (println)\n\ntype List[a] = Cons(a, List[a]) | Nil\n\nexport func sum_list(lst: List[int]) -\u003e int {\n  match lst {\n    Cons(h, t) =\u003e h + sum_list(t),\n    Nil =\u003e 0\n  }\n}\n\nexport func length_list(lst: List[int]) -\u003e int {\n  match lst {\n    Cons(_, t) =\u003e 1 + length_list(t),\n    Nil =\u003e 0\n  }\n}\n\nexport func main() -\u003e () ! {IO} {\n  let lst = Cons(1, Cons(2, Cons(3, Cons(4, Cons(5, Nil)))));\n  let sum = sum_list(lst);\n  let len = length_list(lst);\n  println(\"Sum: \" ++ show(sum));\n  println(\"Length: \" ++ show(len))\n}",
        "python": "def sum_list(numbers: list[int]) -\u003e int:\n    match numbers:\n        case []:\n            return 0\n        case [head, *tail]:\n            return head + sum_list(tail)\n\ndef length_list(numbers: list) -\u003e int:\n    match numbers:\n        case []:\n            return 0\n        case [_, *tail]:\n            return 1 + length_list(tail)\n\ndata = [1, 2, 3, 4, 5]\n\ntotal_sum = sum_list(data)\ntotal_length = length_list(data)\n\nprint(f\"Sum: {total_sum}\")\nprint(f\"Length: {total_length}\")"
      },
      "languageStats": {
        "ailang": {
          "avgTokens": 756.6,
          "successRate": 0.4,
          "totalRuns": 5
        },
        "python": {
          "avgTokens": 334.6,
          "successRate": 1,
          "totalRuns": 5
        }
      },
      "languages": [
        "ailang",
        "python"
      ],
      "successRate": 0.7,
      "taskPrompt": "Write a program in \u003cLANG\u003e that:\n1. Creates a list of integers: [1, 2, 3, 4, 5]\n2. Implements a recursive function `sum_list` that sums all elements\n3. Implements a recursive function `length_list` that counts elements\n4. Prints the sum and length in this exact format:\n   \"Sum: {sum}\"\n   \"Length: {length}\"\n\nRequirements:\n- Use pattern matching for head/tail (e.g., x::xs or similar)\n- Use recursion (no loops)\n- For empty list, sum is 0 and length is 0\n\nOutput only the code, no explanations.\n",
      "totalRuns": 10
    },
    "nested_records": {
      "avgTokens": 281.4,
      "codeSamples": {
        "ailang": "module benchmark/solution\n\nimport std/io (println)\n\nexport func main() -\u003e () ! {IO} {\n  let employee = {name: \"Alice\", age: 30, department: {name: \"Engineering\", code: \"ENG\", building: 5}};\n  println(\"Employee: \" ++ employee.name);\n  println(\"Department: \" ++ employee.department.name);\n  println(\"Building: \" ++ show(employee.department.building))\n}",
        "python": "from dataclasses import dataclass\n\n@dataclass\nclass Department:\n    name: str\n    code: str\n    building: int\n\n@dataclass\nclass Employee:\n    name: str\n    age: int\n    department: Department\n\ndef main():\n    # 1. Create a nested record structure\n    employee_record = Employee(\n        name=\"Alice\",\n        age=30,\n        department=Department(\n            name=\"Engineering\",\n            code=\"ENG\",\n            building=5\n        )\n    )\n\n    # 2. Access and print the employee's details\n    employee_name = employee_record.name\n    department_name = employee_record.department.name\n    building_number = employee_record.department.building\n\n    # 3. Output in the specified format\n    print(f\"Employee: {employee_name}\")\n    print(f\"Department: {department_name}\")\n    print(f\"Building: {building_number}\")\n\nif __name__ == \"__main__\":\n    main()"
      },
      "languageStats": {
        "ailang": {
          "avgTokens": 255.4,
          "successRate": 1,
          "totalRuns": 5
        },
        "python": {
          "avgTokens": 307.4,
          "successRate": 0.8,
          "totalRuns": 5
        }
      },
      "languages": [
        "ailang",
        "python"
      ],
      "successRate": 0.9,
      "taskPrompt": "Write a program in \u003cLANG\u003e that:\n1. Creates a nested record structure representing a company employee:\n   - Employee record with fields:\n     - name: \"Alice\"\n     - age: 30\n     - department: (nested record)\n       - name: \"Engineering\"\n       - code: \"ENG\"\n       - building: 5\n2. Access and print the employee's name, department name, and building number\n3. Output format (one per line):\n   \"Employee: {name}\"\n   \"Department: {dept_name}\"\n   \"Building: {building}\"\n\nRequirements:\n- Use nested record/object structure\n- Access nested fields through chaining (e.g., employee.department.name)\n\nOutput only the code, no explanations.\n",
      "totalRuns": 10
    },
    "numeric_modulo": {
      "avgTokens": 156,
      "codeSamples": {
        "ailang": "BEGIN\n    PRINT 5 % 3\nEND",
        "python": "print(5 % 3)"
      },
      "languageStats": {
        "ailang": {
          "avgTokens": 285.4,
          "successRate": 0,
          "totalRuns": 5
        },
        "python": {
          "avgTokens": 26.6,
          "successRate": 1,
          "totalRuns": 5
        }
      },
      "languages": [
        "ailang",
        "python"
      ],
      "successRate": 0.5,
      "taskPrompt": "Write a \u003cLANG\u003e program that prints the remainder of 5 divided by 3.\n",
      "totalRuns": 10
    },
    "pattern_matching_complex": {
      "avgTokens": 1110.6,
      "codeSamples": {
        "ailang": "module benchmark/solution\n\nimport std/io (println)\n\ntype Tree = Leaf(int) | Node(Tree, int, Tree)\n\nexport func tree_sum(tree: Tree) -\u003e int {\n  match tree {\n    Leaf(v) =\u003e v,\n    Node(left, value, right) =\u003e tree_sum(left) + value + tree_sum(right)\n  }\n}\n\nfunc max(a: int, b: int) -\u003e int {\n  if a \u003e b then a else b\n}\n\nexport func find_max(tree: Tree) -\u003e int {\n  match tree {\n    Leaf(v) =\u003e v,\n    Node(left, value, right) =\u003e {\n      let max_left = find_max(left);\n      let max_right = find_max(right);\n      max(value, max(max_left, max_right))\n    }\n  }\n}\n\nexport func main() -\u003e () ! {IO} {\n  let sample_tree = Node(Leaf(1), 5, Node(Leaf(3), 7, Leaf(2)));\n\n  let sum = tree_sum(sample_tree);\n  println(\"Sum: \" ++ show(sum));\n\n  let max_val = find_max(sample_tree);\n  println(\"Max: \" ++ show(max_val))\n}",
        "python": "from dataclasses import dataclass\nfrom typing import Union, TypeAlias\n\n@dataclass\nclass Leaf:\n    value: int\n\n@dataclass\nclass Node:\n    left: 'Tree'\n    value: int\n    right: 'Tree'\n\nTree: TypeAlias = Union[Leaf, Node]\n\ndef tree_sum(tree: Tree) -\u003e int:\n    match tree:\n        case Leaf(value):\n            return value\n        case Node(left, value, right):\n            return tree_sum(left) + value + tree_sum(right)\n        case _:\n            raise TypeError(\"Not a valid Tree\")\n\ndef find_max(tree: Tree) -\u003e int:\n    match tree:\n        case Leaf(value):\n            return value\n        case Node(Leaf(l_val), value, Leaf(r_val)) if value \u003e= l_val and value \u003e= r_val:\n            return value\n        case Node(left, value, right):\n            return max(find_max(left), value, find_max(right))\n        case _:\n            raise TypeError(\"Not a valid Tree\")\n\nif __name__ == \"__main__\":\n    sample_tree = Node(Leaf(1), 5, Node(Leaf(3), 7, Leaf(2)))\n\n    total_sum = tree_sum(sample_tree)\n    max_value = find_max(sample_tree)\n\n    print(f\"Sum: {total_sum}\")\n    print(f\"Max: {max_value}\")"
      },
      "languageStats": {
        "ailang": {
          "avgTokens": 1100.8,
          "successRate": 0,
          "totalRuns": 5
        },
        "python": {
          "avgTokens": 1120.4,
          "successRate": 0.8,
          "totalRuns": 5
        }
      },
      "languages": [
        "ailang",
        "python"
      ],
      "successRate": 0.4,
      "taskPrompt": "Write a program in \u003cLANG\u003e that demonstrates complex pattern matching:\n\n1. Define a Tree type: Leaf(value: int) | Node(left: Tree, value: int, right: Tree)\n2. Implement `tree_sum(tree: Tree) -\u003e int` using pattern matching:\n   - Match Leaf(v): return v\n   - Match Node(l, v, r): return tree_sum(l) + v + tree_sum(r)\n3. Implement `find_max(tree: Tree) -\u003e int` with nested patterns and guards:\n   - Match Leaf(v): return v\n   - Match Node with guards to find maximum value in tree\n4. Create a sample tree: Node(Leaf(1), 5, Node(Leaf(3), 7, Leaf(2)))\n5. Print results:\n   \"Sum: {sum}\"\n   \"Max: {max}\"\n\nExpected: sum = 1+5+3+7+2 = 18, max = 7\n\nRequirements:\n- Use algebraic data types\n- Use pattern matching with nested constructors\n- Demonstrate exhaustiveness (cover all cases)\n\nOutput only the code, no explanations.\n",
      "totalRuns": 10
    },
    "pipeline": {
      "avgTokens": 353.1,
      "codeSamples": {
        "ailang": "LOOP {\n    READ number\n    LET doubled_number = number * 2\n    PRINT doubled_number\n}",
        "python": "import sys\n\nfor line in sys.stdin:\n    s = line.strip()\n    if not s:\n        continue\n    try:\n        n = int(s)\n    except ValueError:\n        try:\n            n = float(s)\n        except ValueError:\n            continue\n    if isinstance(n, int):\n        print(n * 2)\n    else:\n        print(n * 2)"
      },
      "languageStats": {
        "ailang": {
          "avgTokens": 420.2,
          "successRate": 0,
          "totalRuns": 5
        },
        "python": {
          "avgTokens": 286,
          "successRate": 0,
          "totalRuns": 5
        }
      },
      "languages": [
        "ailang",
        "python"
      ],
      "successRate": 0,
      "taskPrompt": "Write a program in \u003cLANG\u003e that:\n1. Reads numbers from stdin (one per line)\n2. For each number, computes double its value\n3. Prints the doubled values to stdout (one per line)\n\nAssume input is: 1, 2, 3, 4, 5 (one per line)\n\nOutput only the code, no explanations.\n",
      "totalRuns": 10
    },
    "record_update": {
      "avgTokens": 399.8,
      "codeSamples": {
        "ailang": "module benchmark/solution\n\nimport std/io (println)\n\nfunc formatPerson(p: {name: string, age: int, city: string}) -\u003e string {\n  p.name ++ \", \" ++ show(p.age) ++ \", \" ++ p.city\n}\n\nexport func main() -\u003e () ! {IO} {\n  let p1 = {name: \"Alice\", age: 30, city: \"NYC\"};\n  let p2 = {name: p1.name, age: p1.age + 1, city: p1.city};\n  let p3 = {name: p1.name, age: p1.age, city: \"SF\"};\n\n  println(formatPerson(p1));\n  println(formatPerson(p2));\n  println(formatPerson(p3))\n}",
        "python": "from dataclasses import dataclass, replace\n\n@dataclass(frozen=True)\nclass Person:\n    name: str\n    age: int\n    city: str\n\ndef main():\n    person1 = Person(name=\"Alice\", age=30, city=\"NYC\")\n    \n    person2 = replace(person1, age=person1.age + 1)\n    \n    person3 = replace(person1, city=\"SF\")\n    \n    all_persons = [person1, person2, person3]\n    \n    for p in all_persons:\n        print(f\"{p.name}, {p.age}, {p.city}\")\n\nif __name__ == \"__main__\":\n    main()"
      },
      "languageStats": {
        "ailang": {
          "avgTokens": 424.6,
          "successRate": 0.2,
          "totalRuns": 5
        },
        "python": {
          "avgTokens": 375,
          "successRate": 0.4,
          "totalRuns": 5
        }
      },
      "languages": [
        "ailang",
        "python"
      ],
      "successRate": 0.3,
      "taskPrompt": "Write a program in \u003cLANG\u003e that:\n1. Creates a person record: {name: \"Alice\", age: 30, city: \"NYC\"}\n2. Creates an updated version with age incremented by 1 (using record update syntax)\n3. Creates another update changing only the city to \"SF\"\n4. Prints all three records in format: \"{name}, {age}, {city}\"\n\nRequirements:\n- For AILANG: Use record update syntax {r | field: value}\n- For Python: Use dict update or dataclass replace\n- Each update creates a NEW record (immutable)\n\nOutput only the code, no explanations.\n",
      "totalRuns": 10
    },
    "records_person": {
      "avgTokens": 236,
      "codeSamples": {
        "ailang": "module benchmark/solution\n\nimport std/io (println)\n\nexport func main() -\u003e () ! {IO} {\n  let alice = {name: \"Alice\", age: 30, city: \"NYC\"};\n  let bob = {name: \"Bob\", age: 25, city: \"SF\"};\n\n  println(alice.name ++ \", \" ++ show(alice.age) ++ \", \" ++ alice.city);\n  println(bob.name ++ \", \" ++ show(bob.age) ++ \", \" ++ bob.city)\n}",
        "python": "from dataclasses import dataclass\n\n@dataclass\nclass Person:\n    name: str\n    age: int\n    city: str\n\ndef main():\n    alice = Person(name=\"Alice\", age=30, city=\"NYC\")\n    bob = Person(name=\"Bob\", age=25, city=\"SF\")\n\n    print(f\"{alice.name}, {alice.age}, {alice.city}\")\n    print(f\"{bob.name}, {bob.age}, {bob.city}\")\n\nif __name__ == \"__main__\":\n    main()"
      },
      "languageStats": {
        "ailang": {
          "avgTokens": 302.2,
          "successRate": 1,
          "totalRuns": 5
        },
        "python": {
          "avgTokens": 169.8,
          "successRate": 1,
          "totalRuns": 5
        }
      },
      "languages": [
        "ailang",
        "python"
      ],
      "successRate": 1,
      "taskPrompt": "Write a program in \u003cLANG\u003e that:\n1. Creates a person record/object with fields: name (string), age (int), city (string)\n2. Creates TWO persons:\n   - Alice: name=\"Alice\", age=30, city=\"NYC\"\n   - Bob: name=\"Bob\", age=25, city=\"SF\"\n3. Prints both persons in this exact format (one per line):\n   \"{name}, {age}, {city}\"\n\nOutput only the code for \u003cLANG\u003e, no explanations.\n",
      "totalRuns": 10
    },
    "recursion_factorial": {
      "avgTokens": 167.6,
      "codeSamples": {
        "ailang": "module benchmark/solution\n\nimport std/io (println)\n\nfunc factorial(n: int) -\u003e int {\n  if n \u003c= 1\n  then 1\n  else n * factorial(n - 1)\n}\n\nexport func main() -\u003e () ! {IO} {\n  let result = factorial(10);\n  println(\"Factorial of 10 is: \" ++ show(result))\n}",
        "python": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\nresult = factorial(10)\nprint(result)"
      },
      "languageStats": {
        "ailang": {
          "avgTokens": 227.8,
          "successRate": 0.6,
          "totalRuns": 5
        },
        "python": {
          "avgTokens": 107.4,
          "successRate": 1,
          "totalRuns": 5
        }
      },
      "languages": [
        "ailang",
        "python"
      ],
      "successRate": 0.8,
      "taskPrompt": "Write a program in \u003cLANG\u003e that:\n1. Defines a recursive factorial function that computes n!\n2. Computes factorial(10)\n3. Prints the result\n\nThe factorial function should use recursion (not loops).\n\nOutput only the code for \u003cLANG\u003e, no explanations.\n",
      "totalRuns": 10
    },
    "recursion_fibonacci": {
      "avgTokens": 213.6,
      "codeSamples": {
        "ailang": "module benchmark/solution\n\nimport std/io (println)\n\nfunc fib(n: int) -\u003e int {\n  if n == 0 then 0\n  else if n == 1 then 1\n  else fib(n - 1) + fib(n - 2)\n}\n\nexport func main() -\u003e () ! {IO} {\n  let result = fib(20);\n  println(show(result))\n}",
        "python": "def fib(n):\n    if n \u003c= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\nif __name__ == \"__main__\":\n    result = fib(20)\n    print(result)"
      },
      "languageStats": {
        "ailang": {
          "avgTokens": 291.6,
          "successRate": 0.8,
          "totalRuns": 5
        },
        "python": {
          "avgTokens": 135.6,
          "successRate": 1,
          "totalRuns": 5
        }
      },
      "languages": [
        "ailang",
        "python"
      ],
      "successRate": 0.9,
      "taskPrompt": "Write a program in \u003cLANG\u003e that:\n1. Defines a recursive Fibonacci function: fib(0) = 0, fib(1) = 1, fib(n) = fib(n-1) + fib(n-2)\n2. Computes fib(20)\n3. Prints the result\n\nThe function MUST use recursion (not loops or memoization).\nThis will be compute-intensive to test execution performance.\n\nOutput only the code for \u003cLANG\u003e, no explanations.\n",
      "totalRuns": 10
    },
    "string_manipulation": {
      "avgTokens": 268.8,
      "codeSamples": {
        "ailang": "module benchmark/solution\n\nimport std/io (println)\n\nexport func main() -\u003e () ! {IO} {\n  let greeting = \"Hello\";\n  let name = \"World\";\n  let year = 2025;\n  let message = greeting ++ \", \" ++ name ++ \"! Year: \" ++ show(year);\n  let matchResult = if greeting == \"Hello\" then \"Match\" else \"No match\";\n  println(\"Message: \" ++ message);\n  println(\"Check: \" ++ matchResult)\n}",
        "python": "greeting = \"Hello\"\nname = \"World\"\nyear = 2025\n\nmessage = greeting + \", \" + name + \"! Year: \" + str(year)\n\nif greeting == \"Hello\":\n    check_status = \"Match\"\nelse:\n    check_status = \"No match\"\n\nprint(\"Message: \" + message)\nprint(\"Check: \" + check_status)"
      },
      "languageStats": {
        "ailang": {
          "avgTokens": 374.8,
          "successRate": 1,
          "totalRuns": 5
        },
        "python": {
          "avgTokens": 162.8,
          "successRate": 1,
          "totalRuns": 5
        }
      },
      "languages": [
        "ailang",
        "python"
      ],
      "successRate": 1,
      "taskPrompt": "Write a program in \u003cLANG\u003e that:\n1. Creates three variables:\n   - greeting: \"Hello\"\n   - name: \"World\"\n   - year: 2025 (integer)\n2. Concatenates them into a message: \"{greeting}, {name}! Year: {year}\"\n3. Checks if greeting equals \"Hello\" (print \"Match\" or \"No match\")\n4. Prints both results:\n   \"Message: {message}\"\n   \"Check: {Match or No match}\"\n\nRequirements:\n- Use string concatenation operator\n- Convert integer to string for concatenation\n- Use string equality comparison\n\nOutput only the code, no explanations.\n",
      "totalRuns": 10
    }
  },
  "history": [
    {
      "languages": "",
      "successCount": 107,
      "successRate": 0.5944444444444444,
      "timestamp": "0001-01-01T00:00:00Z",
      "totalRuns": 180,
      "version": "v0.3.3-11-5models"
    },
    {
      "languages": "ailang",
      "successCount": 4,
      "successRate": 0.4,
      "timestamp": "2025-10-10T15:28:33Z",
      "totalRuns": 10,
      "version": "v0.3.2-19-g4f42cf4"
    },
    {
      "languages": "ailang",
      "successCount": 4,
      "successRate": 0.4,
      "timestamp": "2025-10-10T10:57:42Z",
      "totalRuns": 10,
      "version": "v0.3.0-40-ga7be6e9"
    },
    {
      "languages": "ailang",
      "successCount": 5,
      "successRate": 0.5,
      "timestamp": "2025-10-08T12:54:01Z",
      "totalRuns": 10,
      "version": "v0.3.0-36-g76515b0"
    },
    {
      "languages": "ailang",
      "successCount": 4,
      "successRate": 0.4,
      "timestamp": "2025-10-08T12:47:41Z",
      "totalRuns": 10,
      "version": "v0.3.0-35-g3530d07"
    },
    {
      "languages": "ailang",
      "successCount": 4,
      "successRate": 0.4,
      "timestamp": "2025-10-08T12:43:46Z",
      "totalRuns": 10,
      "version": "v0.3.0-33-gd8a86be"
    },
    {
      "languages": "",
      "successCount": 4,
      "successRate": 0.4,
      "timestamp": "0001-01-01T00:00:00Z",
      "totalRuns": 10,
      "version": "v0.3.0-25-g9435827"
    }
  ],
  "languages": {
    "ailang": {
      "total_runs": 90,
      "success_rate": 0.4111111111111111,
      "avg_tokens": 568.3444444444444
    },
    "python": {
      "total_runs": 90,
      "success_rate": 0.7777777777777778,
      "avg_tokens": 331.4888888888889
    }
  },
  "models": {
    "claude-sonnet-4-5-20250929": {
      "aggregates": {
        "avgDurationMs": 31.194444444444443,
        "finalSuccess": 0.5833333333333334,
        "repairSuccessRate": 0,
        "repairUsed": 0,
        "totalCostUSD": 2.573489999999999,
        "totalTokens": 85783,
        "zeroShotSuccess": 0.5833333333333334
      },
      "totalRuns": 36
    },
    "gemini-2.5-flash": {
      "aggregates": {
        "avgDurationMs": 24.27777777777778,
        "finalSuccess": 0.5555555555555556,
        "repairSuccessRate": 0,
        "repairUsed": 0,
        "totalCostUSD": 2.35953,
        "totalTokens": 78651,
        "zeroShotSuccess": 0.5555555555555556
      },
      "totalRuns": 36
    },
    "gemini-2.5-pro": {
      "aggregates": {
        "avgDurationMs": 25.36111111111111,
        "finalSuccess": 0.5555555555555556,
        "repairSuccessRate": 0,
        "repairUsed": 0,
        "totalCostUSD": 2.35863,
        "totalTokens": 78621,
        "zeroShotSuccess": 0.5555555555555556
      },
      "totalRuns": 36
    },
    "gpt-5": {
      "aggregates": {
        "avgDurationMs": 31.11111111111111,
        "finalSuccess": 0.6388888888888888,
        "repairSuccessRate": 0,
        "repairUsed": 0,
        "totalCostUSD": 3.171419999999999,
        "totalTokens": 105714,
        "zeroShotSuccess": 0.6388888888888888
      },
      "totalRuns": 36
    },
    "gpt-5-mini": {
      "aggregates": {
        "avgDurationMs": 28.72222222222222,
        "finalSuccess": 0.6388888888888888,
        "repairSuccessRate": 0,
        "repairUsed": 0,
        "totalCostUSD": 2.8074,
        "totalTokens": 93580,
        "zeroShotSuccess": 0.6388888888888888
      },
      "totalRuns": 36
    }
  },
  "timestamp": "2025-10-10T20:40:02+02:00",
  "totalRuns": 180,
  "version": "0.3.3-11-5models"
}