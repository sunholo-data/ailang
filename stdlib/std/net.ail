-- Standard library: Network operations
-- Run with: ailang run --caps Net <file>

module std/net

import std/result (Result)

-- Network error types
export type NetError =
  | Transport(string)      -- DNS, timeout, TLS, connection errors
  | DisallowedHost(string) -- Domain not in allowlist
  | InvalidHeader(string)  -- Blocked or malformed header
  | BodyTooLarge(string)   -- Response exceeds size limit

-- HTTP response with full metadata
export type HttpResponse = {
  status: int,                           -- HTTP status code (200, 404, etc.)
  headers: List[{name: string, value: string}], -- Response headers (preserved order)
  body: string,                          -- Response body
  ok: bool                               -- true if status 200-299
}

-- HTTP GET request (deprecated: use httpRequest for status codes/headers)
--
-- Fetches content from an HTTP/HTTPS URL.
--
-- Security features:
--   - HTTPS enforced by default (http:// requires --net-allow-http)
--   - DNS rebinding prevention
--   - IP blocking (localhost, private IPs, link-local)
--   - Redirect validation (max 5 redirects)
--   - Body size limits (5MB default)
--   - Domain allowlist support
--
-- Args:
--   url: String - The URL to fetch (must be https:// unless http allowed)
--
-- Returns:
--   String - The response body
--
-- Errors:
--   E_NET_CAP_MISSING - Net capability not granted
--   E_NET_PROTOCOL_BLOCKED - Unsupported/blocked protocol
--   E_NET_IP_BLOCKED - Blocked IP address (localhost/private/link-local)
--   E_NET_DOMAIN_BLOCKED - Domain not in allowlist
--   E_NET_DNS_REBINDING - DNS resolves to blocked IP
--   E_NET_TOO_MANY_REDIRECTS - Exceeded redirect limit
--   E_NET_BODY_TOO_LARGE - Response exceeds size limit
--   E_NET_REQUEST_FAILED - HTTP request failed
--
-- Example:
--   let html = httpGet("https://example.com")
export func httpGet(url: string) -> string ! {Net} {
  _net_httpGet(url)
}

-- HTTP POST request
--
-- Sends an HTTP POST request with the given body.
-- Sets Content-Type: application/json by default.
--
-- Security features: Same as httpGet()
--
-- Args:
--   url: String - The URL to POST to
--   body: String - The request body (typically JSON)
--
-- Returns:
--   String - The response body
--
-- Errors: Same as httpGet()
--
-- Example:
--   let response = httpPost("https://api.example.com/data", "{\"key\": \"value\"}")
export func httpPost(url: string, body: string) -> string ! {Net} {
  _net_httpPost(url, body)
}

-- HTTP request with custom headers and structured errors (v0.3.8+)
--
-- Advanced HTTP client with full control over method, headers, and error handling.
--
-- Security features:
--   - Same as httpGet() plus:
--   - Header validation (blocks hop-by-hop, Host override, etc.)
--   - Authorization stripped on cross-origin redirects
--   - Method whitelist (GET, POST only in v0.3.8)
--
-- Args:
--   method: String - HTTP method ("GET", "POST")
--   url: String - Target URL
--   headers: List[{name, value}] - Custom headers (Authorization, Content-Type, etc.)
--   body: String - Request body (empty for GET)
--
-- Returns:
--   Result[HttpResponse, NetError] - Ok(response) or Err(error)
--
-- Error handling:
--   - Transport/DisallowedHost/InvalidHeader/BodyTooLarge → Err(NetError)
--   - HTTP 4xx/5xx → Ok(HttpResponse) with status code
--
-- Example:
--   let headers = [{name: "Authorization", value: "Bearer token"}];
--   match httpRequest("POST", url, headers, body) {
--     Ok(resp) -> if resp.ok then resp.body else "Error"
--     Err(Transport(msg)) -> "Network error: " ++ msg
--     Err(DisallowedHost(host)) -> "Blocked: " ++ host
--     Err(InvalidHeader(hdr)) -> "Bad header: " ++ hdr
--     Err(BodyTooLarge(size)) -> "Too large: " ++ size
--   }
export func httpRequest(
  method: string,
  url: string,
  headers: List[{name: string, value: string}],
  body: string
) -> Result[HttpResponse, NetError] ! {Net} {
  _net_httpRequest(method, url, headers, body)
}
